
RxDuino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004a6  00800100  00006660  000066f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  008005a6  008005a6  00006b9a  2**0
                  ALLOC
  3 .stab         000040f8  00000000  00000000  00006b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000136f  00000000  00000000  0000ac94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000008a0  00000000  00000000  0000c008  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000adb  00000000  00000000  0000c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000113e4  00000000  00000000  0000d383  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003490  00000000  00000000  0001e767  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005675  00000000  00000000  00021bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001890  00000000  00000000  0002726c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002f07  00000000  00000000  00028afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000088f9  00000000  00000000  0002ba03  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000648  00000000  00000000  000342fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8a 01 	jmp	0x314	; 0x314 <__dtors_end>
       4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
       8:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
       c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      10:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      14:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      18:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      1c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      20:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      24:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      28:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      2c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      30:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      34:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      38:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      3c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      40:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__vector_16>
      44:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      48:	0c 94 04 21 	jmp	0x4208	; 0x4208 <__vector_18>
      4c:	0c 94 4b 21 	jmp	0x4296	; 0x4296 <__vector_19>
      50:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      54:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      58:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      5c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      60:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>
      64:	0c 94 b2 01 	jmp	0x364	; 0x364 <__bad_interrupt>

00000068 <_ZL11allMonitors>:
      68:	0c 00 05 00 0d 00 10 00 11 00 44 00 34 00 43 00     ..........D.4.C.
      78:	3c 00 0f 00 06 00 07 00 1f 00 2f 00 42 00           <........./.B.

00000086 <_ZL15allMonitorsText>:
      86:	c0 00 c5 00 cd 00 d4 00 d9 00 de 00 e5 00 ec 00     ................
      96:	f2 00 fa 00 ff 00 05 01 0b 01 11 01 17 01           ..............

000000a4 <_ZL12allModesText>:
      a4:	1f 01 2b 01 37 01 43 01 4f 01 59 01 63 01 70 01     ..+.7.C.O.Y.c.p.
      b4:	7b 01 84 01 8b 01 96 01 a0 01 ac 01                 {...........

000000c0 <_ZL8rpmLabel>:
      c0:	52 50 4d 3a 00                                      RPM:.

000000c5 <_ZL12engTempLabel>:
      c5:	45 6e 67 54 6d 70 3a 00                             EngTmp:.

000000cd <_ZL10speedLabel>:
      cd:	53 70 65 65 64 3a 00                                Speed:.

000000d4 <_ZL8mafLabel>:
      d4:	4d 41 46 3a 00                                      MAF:.

000000d9 <_ZL8tpsLabel>:
      d9:	54 50 53 3a 00                                      TPS:.

000000de <_ZL10olafrLabel>:
      de:	4f 4c 41 46 52 3a 00                                OLAFR:.

000000e5 <_ZL10wbafrLabel>:
      e5:	57 42 41 46 52 3a 00                                WBAFR:.

000000ec <_ZL9loadLabel>:
      ec:	4c 6f 61 64 3a 00                                   Load:.

000000f2 <_ZL8catLabel>:
      f2:	43 61 74 54 6d 70 3a 00                             CatTmp:.

000000fa <_ZL8iatLabel>:
      fa:	49 41 54 3a 00                                      IAT:.

000000ff <_ZL9stftLabel>:
      ff:	53 54 46 54 3a 00                                   STFT:.

00000105 <_ZL9ltftLabel>:
     105:	4c 54 46 54 3a 00                                   LTFT:.

0000010b <_ZL9runtLabel>:
     10b:	52 75 6e 54 3a 00                                   RunT:.

00000111 <_ZL9fuelLabel>:
     111:	46 75 65 6c 3a 00                                   Fuel:.

00000117 <_ZL12controlLabel>:
     117:	43 6f 6e 74 72 6c 3a 00                             Contrl:.

0000011f <_ZL14ecuMonitorText>:
     11f:	45 43 55 20 4d 6f 6e 69 74 6f 72 00                 ECU Monitor.

0000012b <_ZL15milesPerGalText>:
     12b:	4d 69 6c 65 73 50 65 72 47 61 6c 00                 MilesPerGal.

00000137 <_ZL14wheelSpeedText>:
     137:	57 68 65 65 6c 20 53 70 65 65 64 00                 Wheel Speed.

00000143 <_ZL12wheelPsiText>:
     143:	57 68 65 65 6c 20 50 72 65 73 73 00                 Wheel Press.

0000014f <_ZL12textModeText>:
     14f:	54 65 78 74 20 4d 6f 64 65 00                       Text Mode.

00000159 <_ZL12askClockText>:
     159:	53 65 74 20 43 6c 6f 63 6b 00                       Set Clock.

00000163 <_ZL16troubleCodesText>:
     163:	54 72 6f 75 62 6c 65 43 6f 64 65 73 00              TroubleCodes.

00000170 <_ZL13systemOffText>:
     170:	53 79 73 74 65 6d 20 4f 66 66 00                    System Off.

0000017b <_ZL12respTimeText>:
     17b:	52 65 73 70 54 69 6d 65 00                          RespTime.

00000184 <_ZL10avgMpgText>:
     184:	41 76 67 4d 50 47 00                                AvgMPG.

0000018b <_ZL13wheelTempText>:
     18b:	57 68 65 65 6c 20 54 65 6d 70 00                    Wheel Temp.

00000196 <_ZL12editTextText>:
     196:	45 64 69 74 20 54 65 78 74 00                       Edit Text.

000001a0 <_ZL12setClockText>:
     1a0:	53 65 74 74 69 6e 67 20 43 6c 6b 00                 Setting Clk.

000001ac <_ZL12milClearText>:
     1ac:	4d 49 4c 20 43 6c 65 61 72 00                       MIL Clear.

000001b6 <port_to_mode_PGM>:
     1b6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001c0 <port_to_output_PGM>:
     1c0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001ca <port_to_input_PGM>:
     1ca:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001d4 <digital_pin_to_port_PGM>:
     1d4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1e4:	03 03 03 03                                         ....

000001e8 <digital_pin_to_bit_mask_PGM>:
     1e8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1f8:	04 08 10 20                                         ... 

000001fc <digital_pin_to_timer_PGM>:
     1fc:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     20c:	00 00 00 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     .....@z..Z..rN..
     21c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     22c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     23c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     24c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     25c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     26c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     27c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     28c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     29c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2ac:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2bc:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2cc:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2dc:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ec:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2fc:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000030a <__ctors_start>:
     30a:	0f 20       	and	r0, r15
     30c:	b1 22       	and	r11, r17
     30e:	d1 27       	eor	r29, r17

00000310 <__ctors_end>:
     310:	14 20       	and	r1, r4
     312:	d6 27       	eor	r29, r22

00000314 <__dtors_end>:
     314:	11 24       	eor	r1, r1
     316:	1f be       	out	0x3f, r1	; 63
     318:	cf ef       	ldi	r28, 0xFF	; 255
     31a:	d8 e0       	ldi	r29, 0x08	; 8
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	cd bf       	out	0x3d, r28	; 61

00000320 <__do_copy_data>:
     320:	15 e0       	ldi	r17, 0x05	; 5
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b1 e0       	ldi	r27, 0x01	; 1
     326:	e0 e6       	ldi	r30, 0x60	; 96
     328:	f6 e6       	ldi	r31, 0x66	; 102
     32a:	02 c0       	rjmp	.+4      	; 0x330 <__do_copy_data+0x10>
     32c:	05 90       	lpm	r0, Z+
     32e:	0d 92       	st	X+, r0
     330:	a6 3a       	cpi	r26, 0xA6	; 166
     332:	b1 07       	cpc	r27, r17
     334:	d9 f7       	brne	.-10     	; 0x32c <__do_copy_data+0xc>

00000336 <__do_clear_bss>:
     336:	16 e0       	ldi	r17, 0x06	; 6
     338:	a6 ea       	ldi	r26, 0xA6	; 166
     33a:	b5 e0       	ldi	r27, 0x05	; 5
     33c:	01 c0       	rjmp	.+2      	; 0x340 <.do_clear_bss_start>

0000033e <.do_clear_bss_loop>:
     33e:	1d 92       	st	X+, r1

00000340 <.do_clear_bss_start>:
     340:	ad 3e       	cpi	r26, 0xED	; 237
     342:	b1 07       	cpc	r27, r17
     344:	e1 f7       	brne	.-8      	; 0x33e <.do_clear_bss_loop>

00000346 <__do_global_ctors>:
     346:	13 e0       	ldi	r17, 0x03	; 3
     348:	c0 e1       	ldi	r28, 0x10	; 16
     34a:	d3 e0       	ldi	r29, 0x03	; 3
     34c:	04 c0       	rjmp	.+8      	; 0x356 <__do_global_ctors+0x10>
     34e:	22 97       	sbiw	r28, 0x02	; 2
     350:	fe 01       	movw	r30, r28
     352:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <__tablejump__>
     356:	ca 30       	cpi	r28, 0x0A	; 10
     358:	d1 07       	cpc	r29, r17
     35a:	c9 f7       	brne	.-14     	; 0x34e <__do_global_ctors+0x8>
     35c:	0e 94 01 23 	call	0x4602	; 0x4602 <main>
     360:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__do_global_dtors>

00000364 <__bad_interrupt>:
     364:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000368 <_Z41__static_initialization_and_destruction_0ii.constprop.4>:
		DebugMethods::serialDebug("User Updated Text", true);
		// Save user changes
		strcpy((char *)sv.stored, dispText);
		eeprom_write_block((void *)&sv, 0, sizeof(sv)); 
	}	 	  
     368:	81 30       	cpi	r24, 0x01	; 1
     36a:	91 05       	cpc	r25, r1
     36c:	39 f4       	brne	.+14     	; 0x37c <_Z41__static_initialization_and_destruction_0ii.constprop.4+0x14>
// Custom Refresh
static int customDelay = 0;

// Storage for engine data
//char engineData[8];
static String engineData;
     36e:	89 e1       	ldi	r24, 0x19	; 25
     370:	96 e0       	ldi	r25, 0x06	; 6
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	71 e0       	ldi	r23, 0x01	; 1
     376:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
     37a:	08 95       	ret
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	21 f4       	brne	.+8      	; 0x388 <_Z41__static_initialization_and_destruction_0ii.constprop.4+0x20>
     380:	89 e1       	ldi	r24, 0x19	; 25
     382:	96 e0       	ldi	r25, 0x06	; 6
     384:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
     388:	08 95       	ret

0000038a <_Z10initBussesv>:
}

/**
 * Initialize the can based busses
 */
void initBusses(void) {
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	2a 97       	sbiw	r28, 0x0a	; 10
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
	if(HSCAN.initCAN(CAN_BAUD_500K, HSCANCS)) {
     39e:	86 e0       	ldi	r24, 0x06	; 6
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	9a 87       	std	Y+10, r25	; 0x0a
     3a4:	89 87       	std	Y+9, r24	; 0x09
     3a6:	8a e0       	ldi	r24, 0x0A	; 10
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	98 87       	std	Y+8, r25	; 0x08
     3ac:	8f 83       	std	Y+7, r24	; 0x07
     3ae:	8c ee       	ldi	r24, 0xEC	; 236
     3b0:	95 e0       	ldi	r25, 0x05	; 5
     3b2:	be 01       	movw	r22, r28
     3b4:	67 5f       	subi	r22, 0xF7	; 247
     3b6:	7f 4f       	sbci	r23, 0xFF	; 255
     3b8:	ae 01       	movw	r20, r28
     3ba:	49 5f       	subi	r20, 0xF9	; 249
     3bc:	5f 4f       	sbci	r21, 0xFF	; 255
     3be:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN7MCP25157initCANERKiS1_>
     3c2:	88 23       	and	r24, r24
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <_Z10initBussesv+0x3e>
     3c6:	72 c0       	rjmp	.+228    	; 0x4ac <_Z10initBussesv+0x122>
		DebugMethods::serialDebug("HSCAN Initialized\n");
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <_Z10initBussesv+0x40>
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	ed b7       	in	r30, 0x3d	; 61
     3d0:	fe b7       	in	r31, 0x3e	; 62
     3d2:	92 83       	std	Z+2, r25	; 0x02
     3d4:	81 83       	std	Z+1, r24	; 0x01
     3d6:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
		  
		// Once initialize set the mode to normal
		if(!HSCAN.setMode(NORMAL)) {
     3da:	1a 82       	std	Y+2, r1	; 0x02
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	8c ee       	ldi	r24, 0xEC	; 236
     3e2:	95 e0       	ldi	r25, 0x05	; 5
     3e4:	be 01       	movw	r22, r28
     3e6:	6e 5f       	subi	r22, 0xFE	; 254
     3e8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ea:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN7MCP25157setModeERK7CanMode>
     3ee:	88 23       	and	r24, r24
     3f0:	59 f4       	brne	.+22     	; 0x408 <_Z10initBussesv+0x7e>
			DebugMethods::serialDebug("Error Setting HSCAN Normal\n");
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <_Z10initBussesv+0x6a>
     3f4:	84 e1       	ldi	r24, 0x14	; 20
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	ed b7       	in	r30, 0x3d	; 61
     3fa:	fe b7       	in	r31, 0x3e	; 62
     3fc:	92 83       	std	Z+2, r25	; 0x02
     3fe:	81 83       	std	Z+1, r24	; 0x01
     400:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
		}
		  
		// Initialize The MSCAN
		if(MSCAN.initCAN(CAN_BAUD_125K, MSCANCS)){
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	9e 83       	std	Y+6, r25	; 0x06
     40e:	8d 83       	std	Y+5, r24	; 0x05
     410:	89 e0       	ldi	r24, 0x09	; 9
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	9c 83       	std	Y+4, r25	; 0x04
     416:	8b 83       	std	Y+3, r24	; 0x03
     418:	8a ee       	ldi	r24, 0xEA	; 234
     41a:	95 e0       	ldi	r25, 0x05	; 5
     41c:	be 01       	movw	r22, r28
     41e:	6b 5f       	subi	r22, 0xFB	; 251
     420:	7f 4f       	sbci	r23, 0xFF	; 255
     422:	ae 01       	movw	r20, r28
     424:	4d 5f       	subi	r20, 0xFD	; 253
     426:	5f 4f       	sbci	r21, 0xFF	; 255
     428:	0e 94 65 0d 	call	0x1aca	; 0x1aca <_ZN7MCP25157initCANERKiS1_>
     42c:	88 23       	and	r24, r24
     42e:	d1 f1       	breq	.+116    	; 0x4a4 <_Z10initBussesv+0x11a>
			DebugMethods::serialDebug("MSCAN Initialized\n");
     430:	00 d0       	rcall	.+0      	; 0x432 <_Z10initBussesv+0xa8>
     432:	80 e3       	ldi	r24, 0x30	; 48
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	ed b7       	in	r30, 0x3d	; 61
     438:	fe b7       	in	r31, 0x3e	; 62
     43a:	92 83       	std	Z+2, r25	; 0x02
     43c:	81 83       	std	Z+1, r24	; 0x01
     43e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
			  
			// Set mode to normal
			if(!MSCAN.setMode(NORMAL)) {
     442:	19 82       	std	Y+1, r1	; 0x01
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	8a ee       	ldi	r24, 0xEA	; 234
     44a:	95 e0       	ldi	r25, 0x05	; 5
     44c:	be 01       	movw	r22, r28
     44e:	6f 5f       	subi	r22, 0xFF	; 255
     450:	7f 4f       	sbci	r23, 0xFF	; 255
     452:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN7MCP25157setModeERK7CanMode>
     456:	88 23       	and	r24, r24
     458:	59 f4       	brne	.+22     	; 0x470 <_Z10initBussesv+0xe6>
				DebugMethods::serialDebug("Error Setting MSCAN Normal\n");
     45a:	00 d0       	rcall	.+0      	; 0x45c <_Z10initBussesv+0xd2>
     45c:	83 e4       	ldi	r24, 0x43	; 67
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	ed b7       	in	r30, 0x3d	; 61
     462:	fe b7       	in	r31, 0x3e	; 62
     464:	92 83       	std	Z+2, r25	; 0x02
     466:	81 83       	std	Z+1, r24	; 0x01
     468:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
			}
			  
			DebugMethods::serialDebug("Printing Welcome Message\n");
     470:	00 d0       	rcall	.+0      	; 0x472 <_Z10initBussesv+0xe8>
     472:	8f e5       	ldi	r24, 0x5F	; 95
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	ed b7       	in	r30, 0x3d	; 61
     478:	fe b7       	in	r31, 0x3e	; 62
     47a:	92 83       	std	Z+2, r25	; 0x02
     47c:	81 83       	std	Z+1, r24	; 0x01
     47e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
			LCDMethods::setLcdMessage( startText, MSCAN, currentMode);
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	83 ea       	ldi	r24, 0xA3	; 163
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	6a ee       	ldi	r22, 0xEA	; 234
     48c:	75 e0       	ldi	r23, 0x05	; 5
     48e:	4e ee       	ldi	r20, 0xEE	; 238
     490:	55 e0       	ldi	r21, 0x05	; 5
     492:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi>
			delay(1000);
     496:	68 ee       	ldi	r22, 0xE8	; 232
     498:	73 e0       	ldi	r23, 0x03	; 3
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 6f 20 	call	0x40de	; 0x40de <delay>
     4a2:	0f c0       	rjmp	.+30     	; 0x4c2 <_Z10initBussesv+0x138>
			  
		} else {
			DebugMethods::serialDebug("RxDUINO::MSCAN Initialize Failure, shut down\n");
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <_Z10initBussesv+0x11c>
     4a6:	89 e7       	ldi	r24, 0x79	; 121
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <_Z10initBussesv+0x128>
		}
	} else {
		DebugMethods::serialDebug("RxDUINO::HSCAN Initialize Failure, shut down\n");
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <_Z10initBussesv+0x124>
     4ae:	87 ea       	ldi	r24, 0xA7	; 167
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	ed b7       	in	r30, 0x3d	; 61
     4b4:	fe b7       	in	r31, 0x3e	; 62
     4b6:	92 83       	std	Z+2, r25	; 0x02
     4b8:	81 83       	std	Z+1, r24	; 0x01
     4ba:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
	}
}
     4c2:	2a 96       	adiw	r28, 0x0a	; 10
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <_Z8initVarsv>:

/**
 * Initialize all variables used in the application
 */
void initVars(void)
{  
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
  // Message initializing
  DebugMethods::serialDebug("Initializing...", true);
     4d8:	00 d0       	rcall	.+0      	; 0x4da <_Z8initVarsv+0x6>
     4da:	00 d0       	rcall	.+0      	; 0x4dc <_Z8initVarsv+0x8>
     4dc:	85 ed       	ldi	r24, 0xD5	; 213
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	ad b7       	in	r26, 0x3d	; 61
     4e2:	be b7       	in	r27, 0x3e	; 62
     4e4:	12 96       	adiw	r26, 0x02	; 2
     4e6:	9c 93       	st	X, r25
     4e8:	8e 93       	st	-X, r24
     4ea:	11 97       	sbiw	r26, 0x01	; 1
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	14 96       	adiw	r26, 0x04	; 4
     4f2:	9c 93       	st	X, r25
     4f4:	8e 93       	st	-X, r24
     4f6:	13 97       	sbiw	r26, 0x03	; 3
     4f8:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>

  // Set current Monitor
  currentMonitor = 0;
     4fc:	10 92 f1 05 	sts	0x05F1, r1
     500:	10 92 f0 05 	sts	0x05F0, r1
  
  // Init Clock Vars
  ClockMethods::initClockVars();
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN12ClockMethods13initClockVarsEv>
  
  // Get current monitor pid
  currentMonitorPid = pgm_read_byte(&allMonitors[currentMonitor]);
     510:	e0 91 f0 05 	lds	r30, 0x05F0
     514:	f0 91 f1 05 	lds	r31, 0x05F1
     518:	ee 0f       	add	r30, r30
     51a:	ff 1f       	adc	r31, r31
     51c:	e8 59       	subi	r30, 0x98	; 152
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	e4 91       	lpm	r30, Z
     522:	e0 93 f2 05 	sts	0x05F2, r30
     526:	10 92 f3 05 	sts	0x05F3, r1
  DebugMethods::serialDebug("Current Monitor Pid: %d\n", currentMonitorPid);
     52a:	00 d0       	rcall	.+0      	; 0x52c <_Z8initVarsv+0x58>
     52c:	00 d0       	rcall	.+0      	; 0x52e <_Z8initVarsv+0x5a>
     52e:	ad b7       	in	r26, 0x3d	; 61
     530:	be b7       	in	r27, 0x3e	; 62
     532:	11 96       	adiw	r26, 0x01	; 1
     534:	85 ee       	ldi	r24, 0xE5	; 229
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	9a 83       	std	Y+2, r25	; 0x02
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	ec 93       	st	X, r30
     544:	12 97       	sbiw	r26, 0x02	; 2
     546:	13 96       	adiw	r26, 0x03	; 3
     548:	1c 92       	st	X, r1
     54a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
  
  // Set current Mode
  currentMode = ECU;
     54e:	10 92 ef 05 	sts	0x05EF, r1
     552:	10 92 ee 05 	sts	0x05EE, r1
  
  // Get current monitor text
  strcpy_P(currentMonitorText, (char*)pgm_read_word(&(allMonitorsText[0])));
     556:	e6 e8       	ldi	r30, 0x86	; 134
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	65 91       	lpm	r22, Z+
     55c:	74 91       	lpm	r23, Z
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	c4 ef       	ldi	r28, 0xF4	; 244
     568:	d5 e0       	ldi	r29, 0x05	; 5
     56a:	ce 01       	movw	r24, r28
     56c:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <strcpy_P>
  DebugMethods::serialDebug("Current Monitor Text: %s\n", currentMonitorText);
     570:	00 d0       	rcall	.+0      	; 0x572 <_Z8initVarsv+0x9e>
     572:	00 d0       	rcall	.+0      	; 0x574 <_Z8initVarsv+0xa0>
     574:	8e ef       	ldi	r24, 0xFE	; 254
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	ed b7       	in	r30, 0x3d	; 61
     57a:	fe b7       	in	r31, 0x3e	; 62
     57c:	92 83       	std	Z+2, r25	; 0x02
     57e:	81 83       	std	Z+1, r24	; 0x01
     580:	d4 83       	std	Z+4, r29	; 0x04
     582:	c3 83       	std	Z+3, r28	; 0x03
     584:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
  
  // Get current mode text
  strcpy_P(currentModeText, (char*)pgm_read_word(&(allModesText[0])));
     588:	e4 ea       	ldi	r30, 0xA4	; 164
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	65 91       	lpm	r22, Z+
     58e:	74 91       	lpm	r23, Z
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	cd ef       	ldi	r28, 0xFD	; 253
     59a:	d5 e0       	ldi	r29, 0x05	; 5
     59c:	ce 01       	movw	r24, r28
     59e:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <strcpy_P>
  DebugMethods::serialDebug("Current Mode Text: %s\n", currentModeText);
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <_Z8initVarsv+0xd0>
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <_Z8initVarsv+0xd2>
     5a6:	88 e1       	ldi	r24, 0x18	; 24
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	ad b7       	in	r26, 0x3d	; 61
     5ac:	be b7       	in	r27, 0x3e	; 62
     5ae:	12 96       	adiw	r26, 0x02	; 2
     5b0:	9c 93       	st	X, r25
     5b2:	8e 93       	st	-X, r24
     5b4:	11 97       	sbiw	r26, 0x01	; 1
     5b6:	14 96       	adiw	r26, 0x04	; 4
     5b8:	dc 93       	st	X, r29
     5ba:	ce 93       	st	-X, r28
     5bc:	13 97       	sbiw	r26, 0x03	; 3
     5be:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
  
  // Read stored text from our EEPROM for user info  
  eeprom_read_block((void *) &sv, 0, sizeof(sv));
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	86 ea       	ldi	r24, 0xA6	; 166
     5cc:	95 e0       	ldi	r25, 0x05	; 5
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	41 e1       	ldi	r20, 0x11	; 17
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <__eerd_block_m328p>
 
  // Check the preamble for our random value, if this is not set then
  // there is no eeprom initialized
  if(sv.preamble != _PREAMBLE_) {
     5da:	80 91 a6 05 	lds	r24, 0x05A6
     5de:	90 91 a7 05 	lds	r25, 0x05A7
     5e2:	86 32       	cpi	r24, 0x26	; 38
     5e4:	91 05       	cpc	r25, r1
     5e6:	91 f0       	breq	.+36     	; 0x60c <_Z8initVarsv+0x138>
	  sv.preamble = _PREAMBLE_;
     5e8:	86 e2       	ldi	r24, 0x26	; 38
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	90 93 a7 05 	sts	0x05A7, r25
     5f0:	80 93 a6 05 	sts	0x05A6, r24
	  sv.delay = 100;
     5f4:	84 e6       	ldi	r24, 0x64	; 100
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	90 93 a9 05 	sts	0x05A9, r25
     5fc:	80 93 a8 05 	sts	0x05A8, r24
	  strcpy((char *)sv.stored, defaultText);
     600:	8a ea       	ldi	r24, 0xAA	; 170
     602:	95 e0       	ldi	r25, 0x05	; 5
     604:	60 eb       	ldi	r22, 0xB0	; 176
     606:	73 e0       	ldi	r23, 0x03	; 3
     608:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <strcpy>
  }
  strcpy(dispText, (char *)sv.stored);
     60c:	c9 e0       	ldi	r28, 0x09	; 9
     60e:	d6 e0       	ldi	r29, 0x06	; 6
     610:	ce 01       	movw	r24, r28
     612:	6a ea       	ldi	r22, 0xAA	; 170
     614:	75 e0       	ldi	r23, 0x05	; 5
     616:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <strcpy>
  DebugMethods::serialDebug("Display Text: %s\n", dispText);
     61a:	00 d0       	rcall	.+0      	; 0x61c <_Z8initVarsv+0x148>
     61c:	00 d0       	rcall	.+0      	; 0x61e <_Z8initVarsv+0x14a>
     61e:	8f e2       	ldi	r24, 0x2F	; 47
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	ed b7       	in	r30, 0x3d	; 61
     624:	fe b7       	in	r31, 0x3e	; 62
     626:	92 83       	std	Z+2, r25	; 0x02
     628:	81 83       	std	Z+1, r24	; 0x01
     62a:	d4 83       	std	Z+4, r29	; 0x04
     62c:	c3 83       	std	Z+3, r28	; 0x03
     62e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
    
  // Read custom Refresh 
  customDelay = sv.delay;
     632:	80 91 a8 05 	lds	r24, 0x05A8
     636:	90 91 a9 05 	lds	r25, 0x05A9
     63a:	90 93 17 06 	sts	0x0617, r25
     63e:	80 93 16 06 	sts	0x0616, r24
  DebugMethods::serialDebug("Custom Delay: %d\n", customDelay);
     642:	21 e4       	ldi	r18, 0x41	; 65
     644:	32 e0       	ldi	r19, 0x02	; 2
     646:	ad b7       	in	r26, 0x3d	; 61
     648:	be b7       	in	r27, 0x3e	; 62
     64a:	12 96       	adiw	r26, 0x02	; 2
     64c:	3c 93       	st	X, r19
     64e:	2e 93       	st	-X, r18
     650:	11 97       	sbiw	r26, 0x01	; 1
     652:	14 96       	adiw	r26, 0x04	; 4
     654:	9c 93       	st	X, r25
     656:	8e 93       	st	-X, r24
     658:	13 97       	sbiw	r26, 0x03	; 3
     65a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
  DebugMethods::serialDebug("Note: Running In Debug Mode\n");
#endif

  // Nightly??
#ifdef _NIGHTLY
  sprintf(nightlyString, "%s Nightly: 1/10, 10:30pm", intStr);
     65e:	00 d0       	rcall	.+0      	; 0x660 <_Z8initVarsv+0x18c>
     660:	ed b7       	in	r30, 0x3d	; 61
     662:	fe b7       	in	r31, 0x3e	; 62
     664:	31 96       	adiw	r30, 0x01	; 1
     666:	c7 eb       	ldi	r28, 0xB7	; 183
     668:	d5 e0       	ldi	r29, 0x05	; 5
     66a:	ad b7       	in	r26, 0x3d	; 61
     66c:	be b7       	in	r27, 0x3e	; 62
     66e:	12 96       	adiw	r26, 0x02	; 2
     670:	dc 93       	st	X, r29
     672:	ce 93       	st	-X, r28
     674:	11 97       	sbiw	r26, 0x01	; 1
     676:	83 e5       	ldi	r24, 0x53	; 83
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	93 83       	std	Z+3, r25	; 0x03
     67c:	82 83       	std	Z+2, r24	; 0x02
     67e:	89 ee       	ldi	r24, 0xE9	; 233
     680:	95 e0       	ldi	r25, 0x05	; 5
     682:	95 83       	std	Z+5, r25	; 0x05
     684:	84 83       	std	Z+4, r24	; 0x04
     686:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <sprintf>
  DebugMethods::serialDebug("%s\n", nightlyString);
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	8d e6       	ldi	r24, 0x6D	; 109
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	ed b7       	in	r30, 0x3d	; 61
     694:	fe b7       	in	r31, 0x3e	; 62
     696:	92 83       	std	Z+2, r25	; 0x02
     698:	81 83       	std	Z+1, r24	; 0x01
     69a:	d4 83       	std	Z+4, r29	; 0x04
     69c:	c3 83       	std	Z+3, r28	; 0x03
     69e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
#endif
}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <setup>:
 * Prepare the RXDUINO application.  This method is called when the
 * device is first booted up
 */
void setup(void)
{      
  Serial.begin(115200);
     6b0:	8a ec       	ldi	r24, 0xCA	; 202
     6b2:	96 e0       	ldi	r25, 0x06	; 6
     6b4:	40 e0       	ldi	r20, 0x00	; 0
     6b6:	52 ec       	ldi	r21, 0xC2	; 194
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	0e 94 86 21 	call	0x430c	; 0x430c <_ZN14HardwareSerial5beginEm>
  
  // Initialize SPI
  RxduinoMethods::init_all();
     6c0:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <_ZN14RxduinoMethods8init_allEv>
  
  // Init all vars  
  initVars();
     6c4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_Z8initVarsv>
  
  // Initialize CAN Busses
  initBusses();
     6c8:	0e 94 c5 01 	call	0x38a	; 0x38a <_Z10initBussesv>
}
     6cc:	08 95       	ret

000006ce <_Z16saveStoredValuesv>:
/**
 * Save the EEPROM values if they have been changed
 */
void saveStoredValues() {
	// If the user changed the delay, save the new delay
	if(sv.delay != customDelay) {
     6ce:	20 91 a8 05 	lds	r18, 0x05A8
     6d2:	30 91 a9 05 	lds	r19, 0x05A9
     6d6:	80 91 16 06 	lds	r24, 0x0616
     6da:	90 91 17 06 	lds	r25, 0x0617
     6de:	28 17       	cp	r18, r24
     6e0:	39 07       	cpc	r19, r25
     6e2:	11 f1       	breq	.+68     	; 0x728 <_Z16saveStoredValuesv+0x5a>
		DebugMethods::serialDebug("User Updated Delay", true);
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <_Z16saveStoredValuesv+0x18>
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <_Z16saveStoredValuesv+0x1a>
     6e8:	81 e7       	ldi	r24, 0x71	; 113
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	ed b7       	in	r30, 0x3d	; 61
     6ee:	fe b7       	in	r31, 0x3e	; 62
     6f0:	92 83       	std	Z+2, r25	; 0x02
     6f2:	81 83       	std	Z+1, r24	; 0x01
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	94 83       	std	Z+4, r25	; 0x04
     6fa:	83 83       	std	Z+3, r24	; 0x03
     6fc:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
		sv.delay = customDelay; 
     700:	80 91 16 06 	lds	r24, 0x0616
     704:	90 91 17 06 	lds	r25, 0x0617
     708:	90 93 a9 05 	sts	0x05A9, r25
     70c:	80 93 a8 05 	sts	0x05A8, r24
		eeprom_write_block((void *)&sv, 0, sizeof(sv)); 
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	86 ea       	ldi	r24, 0xA6	; 166
     71a:	95 e0       	ldi	r25, 0x05	; 5
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	41 e1       	ldi	r20, 0x11	; 17
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <__eewr_block_m328p>
	}
	
	// if the user changed the text, save the new text
	if(strcmp((char*)sv.stored, dispText) != 0) {
     728:	8a ea       	ldi	r24, 0xAA	; 170
     72a:	95 e0       	ldi	r25, 0x05	; 5
     72c:	69 e0       	ldi	r22, 0x09	; 9
     72e:	76 e0       	ldi	r23, 0x06	; 6
     730:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <strcmp>
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	01 f1       	breq	.+64     	; 0x778 <_Z16saveStoredValuesv+0xaa>
		DebugMethods::serialDebug("User Updated Text", true);
     738:	00 d0       	rcall	.+0      	; 0x73a <_Z16saveStoredValuesv+0x6c>
     73a:	00 d0       	rcall	.+0      	; 0x73c <_Z16saveStoredValuesv+0x6e>
     73c:	84 e8       	ldi	r24, 0x84	; 132
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	ed b7       	in	r30, 0x3d	; 61
     742:	fe b7       	in	r31, 0x3e	; 62
     744:	92 83       	std	Z+2, r25	; 0x02
     746:	81 83       	std	Z+1, r24	; 0x01
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	94 83       	std	Z+4, r25	; 0x04
     74e:	83 83       	std	Z+3, r24	; 0x03
     750:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
		// Save user changes
		strcpy((char *)sv.stored, dispText);
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	8a ea       	ldi	r24, 0xAA	; 170
     75e:	95 e0       	ldi	r25, 0x05	; 5
     760:	69 e0       	ldi	r22, 0x09	; 9
     762:	76 e0       	ldi	r23, 0x06	; 6
     764:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <strcpy>
		eeprom_write_block((void *)&sv, 0, sizeof(sv)); 
     768:	86 ea       	ldi	r24, 0xA6	; 166
     76a:	95 e0       	ldi	r25, 0x05	; 5
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	41 e1       	ldi	r20, 0x11	; 17
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <__eewr_block_m328p>
     778:	08 95       	ret

0000077a <_Z17getAlternateStatev>:
/** 
 * Report the next state
 * @return The next state based on the current mode
 */
int getAlternateState() {
	if(currentMode == TEXT) {
     77a:	80 91 ee 05 	lds	r24, 0x05EE
     77e:	90 91 ef 05 	lds	r25, 0x05EF
     782:	84 30       	cpi	r24, 0x04	; 4
     784:	91 05       	cpc	r25, r1
     786:	59 f1       	breq	.+86     	; 0x7de <_Z17getAlternateStatev+0x64>
		return EDIT_TEXT;
	} else if (currentMode == EDIT_TEXT) {
     788:	8b 30       	cpi	r24, 0x0B	; 11
     78a:	91 05       	cpc	r25, r1
     78c:	29 f4       	brne	.+10     	; 0x798 <_Z17getAlternateStatev+0x1e>
		saveStoredValues();
     78e:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z16saveStoredValuesv>
		return TEXT;
     792:	84 e0       	ldi	r24, 0x04	; 4
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	08 95       	ret
	} else if (currentMode == ECU) {
     798:	00 97       	sbiw	r24, 0x00	; 0
     79a:	21 f1       	breq	.+72     	; 0x7e4 <_Z17getAlternateStatev+0x6a>
		return RESPONSE_TIME;
	} else if (currentMode == RESPONSE_TIME) {
     79c:	88 30       	cpi	r24, 0x08	; 8
     79e:	91 05       	cpc	r25, r1
     7a0:	29 f4       	brne	.+10     	; 0x7ac <_Z17getAlternateStatev+0x32>
		saveStoredValues();
     7a2:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z16saveStoredValuesv>
		return ECU;
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	08 95       	ret
	} else if (currentMode == ASK_CLOCK) {
     7ac:	85 30       	cpi	r24, 0x05	; 5
     7ae:	91 05       	cpc	r25, r1
     7b0:	e1 f0       	breq	.+56     	; 0x7ea <_Z17getAlternateStatev+0x70>
		return SET_CLOCK;
	} else if (currentMode == SET_CLOCK) {
     7b2:	8c 30       	cpi	r24, 0x0C	; 12
     7b4:	91 05       	cpc	r25, r1
     7b6:	e1 f0       	breq	.+56     	; 0x7f0 <_Z17getAlternateStatev+0x76>
		return ASK_CLOCK;
	} else if (currentMode == MILES_PER_GAL) {
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	91 05       	cpc	r25, r1
     7bc:	e1 f0       	breq	.+56     	; 0x7f6 <_Z17getAlternateStatev+0x7c>
		return AVG_MPG;
	} else if (currentMode == AVG_MPG) {
     7be:	89 30       	cpi	r24, 0x09	; 9
     7c0:	91 05       	cpc	r25, r1
     7c2:	e1 f0       	breq	.+56     	; 0x7fc <_Z17getAlternateStatev+0x82>
		return MILES_PER_GAL;
	} else if (currentMode == WHEEL_PSI) {
     7c4:	83 30       	cpi	r24, 0x03	; 3
     7c6:	91 05       	cpc	r25, r1
     7c8:	e1 f0       	breq	.+56     	; 0x802 <_Z17getAlternateStatev+0x88>
		return WHEEL_TEMP;
	} else if (currentMode == WHEEL_TEMP) {
     7ca:	8a 30       	cpi	r24, 0x0A	; 10
     7cc:	91 05       	cpc	r25, r1
     7ce:	e1 f0       	breq	.+56     	; 0x808 <_Z17getAlternateStatev+0x8e>
		return WHEEL_PSI;
	} else if (currentMode == CEL) {
     7d0:	86 30       	cpi	r24, 0x06	; 6
     7d2:	91 05       	cpc	r25, r1
     7d4:	e1 f0       	breq	.+56     	; 0x80e <_Z17getAlternateStatev+0x94>
		return MIL_CLEAR;
	} else if (currentMode == MIL_CLEAR) {
     7d6:	8d 30       	cpi	r24, 0x0D	; 13
     7d8:	91 05       	cpc	r25, r1
     7da:	f1 f4       	brne	.+60     	; 0x818 <_Z17getAlternateStatev+0x9e>
     7dc:	1b c0       	rjmp	.+54     	; 0x814 <_Z17getAlternateStatev+0x9a>
 * Report the next state
 * @return The next state based on the current mode
 */
int getAlternateState() {
	if(currentMode == TEXT) {
		return EDIT_TEXT;
     7de:	8b e0       	ldi	r24, 0x0B	; 11
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	08 95       	ret
	} else if (currentMode == EDIT_TEXT) {
		saveStoredValues();
		return TEXT;
	} else if (currentMode == ECU) {
		return RESPONSE_TIME;
     7e4:	88 e0       	ldi	r24, 0x08	; 8
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	08 95       	ret
	} else if (currentMode == RESPONSE_TIME) {
		saveStoredValues();
		return ECU;
	} else if (currentMode == ASK_CLOCK) {
		return SET_CLOCK;
     7ea:	8c e0       	ldi	r24, 0x0C	; 12
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	08 95       	ret
	} else if (currentMode == SET_CLOCK) {
		return ASK_CLOCK;
     7f0:	85 e0       	ldi	r24, 0x05	; 5
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	08 95       	ret
	} else if (currentMode == MILES_PER_GAL) {
		return AVG_MPG;
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	08 95       	ret
	} else if (currentMode == AVG_MPG) {
		return MILES_PER_GAL;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	08 95       	ret
	} else if (currentMode == WHEEL_PSI) {
		return WHEEL_TEMP;
     802:	8a e0       	ldi	r24, 0x0A	; 10
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	08 95       	ret
	} else if (currentMode == WHEEL_TEMP) {
		return WHEEL_PSI;
     808:	83 e0       	ldi	r24, 0x03	; 3
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	08 95       	ret
	} else if (currentMode == CEL) {
		return MIL_CLEAR;
     80e:	8d e0       	ldi	r24, 0x0D	; 13
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	08 95       	ret
	} else if (currentMode == MIL_CLEAR) {
		return CEL;
     814:	86 e0       	ldi	r24, 0x06	; 6
     816:	90 e0       	ldi	r25, 0x00	; 0
	} else {
		return currentMode;
	}		
}
     818:	08 95       	ret

0000081a <_Z15joystickHandlerRKiRb>:
 *
 * @param  action        The action the user requested
 * @param  buttonPressed Signal the button pressed flag to
 *                       set the delay on a valid command
 */
void joystickHandler(const int& action, boolean& buttonPressed) {
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	00 d0       	rcall	.+0      	; 0x828 <_Z15joystickHandlerRKiRb+0xe>
     828:	00 d0       	rcall	.+0      	; 0x82a <_Z15joystickHandlerRKiRb+0x10>
     82a:	00 d0       	rcall	.+0      	; 0x82c <_Z15joystickHandlerRKiRb+0x12>
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	7b 01       	movw	r14, r22
  switch(action) {
     832:	fc 01       	movw	r30, r24
     834:	80 81       	ld	r24, Z
     836:	91 81       	ldd	r25, Z+1	; 0x01
     838:	81 31       	cpi	r24, 0x11	; 17
     83a:	91 05       	cpc	r25, r1
     83c:	a9 f0       	breq	.+42     	; 0x868 <_Z15joystickHandlerRKiRb+0x4e>
     83e:	82 31       	cpi	r24, 0x12	; 18
     840:	91 05       	cpc	r25, r1
     842:	4c f4       	brge	.+18     	; 0x856 <_Z15joystickHandlerRKiRb+0x3c>
     844:	8f 30       	cpi	r24, 0x0F	; 15
     846:	91 05       	cpc	r25, r1
     848:	09 f4       	brne	.+2      	; 0x84c <_Z15joystickHandlerRKiRb+0x32>
     84a:	66 c0       	rjmp	.+204    	; 0x918 <__stack+0x19>
     84c:	80 31       	cpi	r24, 0x10	; 16
     84e:	91 05       	cpc	r25, r1
     850:	09 f0       	breq	.+2      	; 0x854 <_Z15joystickHandlerRKiRb+0x3a>
     852:	a9 c1       	rjmp	.+850    	; 0xba6 <__stack+0x2a7>
     854:	2f c1       	rjmp	.+606    	; 0xab4 <__stack+0x1b5>
     856:	82 31       	cpi	r24, 0x12	; 18
     858:	91 05       	cpc	r25, r1
     85a:	09 f4       	brne	.+2      	; 0x85e <_Z15joystickHandlerRKiRb+0x44>
     85c:	82 c1       	rjmp	.+772    	; 0xb62 <__stack+0x263>
     85e:	83 31       	cpi	r24, 0x13	; 19
     860:	91 05       	cpc	r25, r1
     862:	09 f0       	breq	.+2      	; 0x866 <_Z15joystickHandlerRKiRb+0x4c>
     864:	a0 c1       	rjmp	.+832    	; 0xba6 <__stack+0x2a7>
     866:	f4 c0       	rjmp	.+488    	; 0xa50 <__stack+0x151>
    // User Pressed Down
    case DOWN:
    if(currentMode == ECU) {
     868:	80 91 ee 05 	lds	r24, 0x05EE
     86c:	90 91 ef 05 	lds	r25, 0x05EF
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	51 f4       	brne	.+20     	; 0x888 <_Z15joystickHandlerRKiRb+0x6e>
      if(currentMonitor < (totalMonitors - 1)) {
     874:	80 91 f0 05 	lds	r24, 0x05F0
     878:	90 91 f1 05 	lds	r25, 0x05F1
     87c:	8e 30       	cpi	r24, 0x0E	; 14
     87e:	91 05       	cpc	r25, r1
     880:	0c f0       	brlt	.+2      	; 0x884 <_Z15joystickHandlerRKiRb+0x6a>
     882:	8e c1       	rjmp	.+796    	; 0xba0 <__stack+0x2a1>
        currentMonitor++;   
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	58 c0       	rjmp	.+176    	; 0x938 <__stack+0x39>
        DebugMethods::serialDebug("Current Mode: ", false);
        strcpy_P(currentMonitorText, (char*)pgm_read_word(&allMonitorsText[currentMonitor]));
        currentMonitorPid = pgm_read_byte(&allMonitors[currentMonitor]);
        DebugMethods::serialDebug("%s\n", currentMonitorText);        
      }
    } else if (currentMode == EDIT_TEXT) {
     888:	8b 30       	cpi	r24, 0x0B	; 11
     88a:	91 05       	cpc	r25, r1
     88c:	49 f4       	brne	.+18     	; 0x8a0 <_Z15joystickHandlerRKiRb+0x86>
      dispText[dispTextIndex] -= 1;  
     88e:	e0 91 29 06 	lds	r30, 0x0629
     892:	f0 91 2a 06 	lds	r31, 0x062A
     896:	e7 5f       	subi	r30, 0xF7	; 247
     898:	f9 4f       	sbci	r31, 0xF9	; 249
     89a:	80 81       	ld	r24, Z
     89c:	81 50       	subi	r24, 0x01	; 1
     89e:	a2 c0       	rjmp	.+324    	; 0x9e4 <__stack+0xe5>
    } else if (currentMode == RESPONSE_TIME) {
     8a0:	88 30       	cpi	r24, 0x08	; 8
     8a2:	91 05       	cpc	r25, r1
     8a4:	59 f4       	brne	.+22     	; 0x8bc <_Z15joystickHandlerRKiRb+0xa2>
      if( customDelay > 0 ) 
     8a6:	80 91 16 06 	lds	r24, 0x0616
     8aa:	90 91 17 06 	lds	r25, 0x0617
     8ae:	18 16       	cp	r1, r24
     8b0:	19 06       	cpc	r1, r25
     8b2:	0c f0       	brlt	.+2      	; 0x8b6 <_Z15joystickHandlerRKiRb+0x9c>
     8b4:	75 c1       	rjmp	.+746    	; 0xba0 <__stack+0x2a1>
        customDelay-=100;
     8b6:	84 56       	subi	r24, 0x64	; 100
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	9f c0       	rjmp	.+318    	; 0x9fa <__stack+0xfb>
    } else if (currentMode == ASK_CLOCK) {
     8bc:	85 30       	cpi	r24, 0x05	; 5
     8be:	91 05       	cpc	r25, r1
     8c0:	19 f4       	brne	.+6      	; 0x8c8 <_Z15joystickHandlerRKiRb+0xae>
      ClockMethods::incrementMin();
     8c2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN12ClockMethods12incrementMinEv>
     8c6:	7e c0       	rjmp	.+252    	; 0x9c4 <__stack+0xc5>
	  delay(200);
    } else if (currentMode == WHEEL_PSI || currentMode == WHEEL_TEMP) {
     8c8:	83 30       	cpi	r24, 0x03	; 3
     8ca:	91 05       	cpc	r25, r1
     8cc:	19 f0       	breq	.+6      	; 0x8d4 <_Z15joystickHandlerRKiRb+0xba>
     8ce:	8a 30       	cpi	r24, 0x0A	; 10
     8d0:	91 05       	cpc	r25, r1
     8d2:	51 f4       	brne	.+20     	; 0x8e8 <_Z15joystickHandlerRKiRb+0xce>
      if(tireNumber < 4) tireNumber++;
     8d4:	80 91 bd 03 	lds	r24, 0x03BD
     8d8:	90 91 be 03 	lds	r25, 0x03BE
     8dc:	84 30       	cpi	r24, 0x04	; 4
     8de:	91 05       	cpc	r25, r1
     8e0:	0c f0       	brlt	.+2      	; 0x8e4 <_Z15joystickHandlerRKiRb+0xca>
     8e2:	5e c1       	rjmp	.+700    	; 0xba0 <__stack+0x2a1>
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	9d c0       	rjmp	.+314    	; 0xa22 <__stack+0x123>
	} else if (currentMode == CEL) {
     8e8:	86 30       	cpi	r24, 0x06	; 6
     8ea:	91 05       	cpc	r25, r1
     8ec:	51 f4       	brne	.+20     	; 0x902 <__stack+0x3>
	  if(milCode < 3) milCode++;	  
     8ee:	80 91 bf 03 	lds	r24, 0x03BF
     8f2:	90 91 c0 03 	lds	r25, 0x03C0
     8f6:	83 30       	cpi	r24, 0x03	; 3
     8f8:	91 05       	cpc	r25, r1
     8fa:	0c f0       	brlt	.+2      	; 0x8fe <_Z15joystickHandlerRKiRb+0xe4>
     8fc:	51 c1       	rjmp	.+674    	; 0xba0 <__stack+0x2a1>
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	a2 c0       	rjmp	.+324    	; 0xa46 <__stack+0x147>
    } else if (currentMode == MIL_CLEAR) {
     902:	8d 30       	cpi	r24, 0x0D	; 13
     904:	91 05       	cpc	r25, r1
     906:	09 f0       	breq	.+2      	; 0x90a <__stack+0xb>
     908:	4b c1       	rjmp	.+662    	; 0xba0 <__stack+0x2a1>
	  MILMethods::clearMILCodes(HSCAN, MSCAN);
     90a:	8c ee       	ldi	r24, 0xEC	; 236
     90c:	95 e0       	ldi	r25, 0x05	; 5
     90e:	6a ee       	ldi	r22, 0xEA	; 234
     910:	75 e0       	ldi	r23, 0x05	; 5
     912:	0e 94 a8 1b 	call	0x3750	; 0x3750 <_ZN10MILMethods13clearMILCodesER7MCP2515S1_>
     916:	44 c1       	rjmp	.+648    	; 0xba0 <__stack+0x2a1>
    buttonPressed = true; 
    break;
    
    // User Pressed Up
    case UP:
    if(currentMode == ECU) {
     918:	80 91 ee 05 	lds	r24, 0x05EE
     91c:	90 91 ef 05 	lds	r25, 0x05EF
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	09 f0       	breq	.+2      	; 0x926 <__stack+0x27>
     924:	4a c0       	rjmp	.+148    	; 0x9ba <__stack+0xbb>
      if(currentMonitor > 0) {
     926:	80 91 f0 05 	lds	r24, 0x05F0
     92a:	90 91 f1 05 	lds	r25, 0x05F1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	0c f0       	brlt	.+2      	; 0x936 <__stack+0x37>
     934:	35 c1       	rjmp	.+618    	; 0xba0 <__stack+0x2a1>
        currentMonitor--;
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	90 93 f1 05 	sts	0x05F1, r25
     93c:	80 93 f0 05 	sts	0x05F0, r24
        DebugMethods::serialDebug("Current Mode: ", false);
     940:	00 d0       	rcall	.+0      	; 0x942 <__stack+0x43>
     942:	00 d0       	rcall	.+0      	; 0x944 <__stack+0x45>
     944:	86 e9       	ldi	r24, 0x96	; 150
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	ed b7       	in	r30, 0x3d	; 61
     94a:	fe b7       	in	r31, 0x3e	; 62
     94c:	92 83       	std	Z+2, r25	; 0x02
     94e:	81 83       	std	Z+1, r24	; 0x01
     950:	14 82       	std	Z+4, r1	; 0x04
     952:	13 82       	std	Z+3, r1	; 0x03
     954:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
        strcpy_P(currentMonitorText, (char*)pgm_read_word(&allMonitorsText[currentMonitor]));
     958:	e0 91 f0 05 	lds	r30, 0x05F0
     95c:	f0 91 f1 05 	lds	r31, 0x05F1
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	ea 57       	subi	r30, 0x7A	; 122
     966:	ff 4f       	sbci	r31, 0xFF	; 255
     968:	65 91       	lpm	r22, Z+
     96a:	74 91       	lpm	r23, Z
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	04 ef       	ldi	r16, 0xF4	; 244
     976:	15 e0       	ldi	r17, 0x05	; 5
     978:	c8 01       	movw	r24, r16
     97a:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <strcpy_P>
        currentMonitorPid = pgm_read_byte(&allMonitors[currentMonitor]);
     97e:	e0 91 f0 05 	lds	r30, 0x05F0
     982:	f0 91 f1 05 	lds	r31, 0x05F1
     986:	ee 0f       	add	r30, r30
     988:	ff 1f       	adc	r31, r31
     98a:	e8 59       	subi	r30, 0x98	; 152
     98c:	ff 4f       	sbci	r31, 0xFF	; 255
     98e:	e4 91       	lpm	r30, Z
     990:	e0 93 f2 05 	sts	0x05F2, r30
     994:	10 92 f3 05 	sts	0x05F3, r1
        DebugMethods::serialDebug("%s\n", currentMonitorText);
     998:	00 d0       	rcall	.+0      	; 0x99a <__stack+0x9b>
     99a:	00 d0       	rcall	.+0      	; 0x99c <__stack+0x9d>
     99c:	8d e6       	ldi	r24, 0x6D	; 109
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	ed b7       	in	r30, 0x3d	; 61
     9a2:	fe b7       	in	r31, 0x3e	; 62
     9a4:	92 83       	std	Z+2, r25	; 0x02
     9a6:	81 83       	std	Z+1, r24	; 0x01
     9a8:	14 83       	std	Z+4, r17	; 0x04
     9aa:	03 83       	std	Z+3, r16	; 0x03
     9ac:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	f3 c0       	rjmp	.+486    	; 0xba0 <__stack+0x2a1>
      }
    } else if (currentMode == ASK_CLOCK) {
     9ba:	85 30       	cpi	r24, 0x05	; 5
     9bc:	91 05       	cpc	r25, r1
     9be:	39 f4       	brne	.+14     	; 0x9ce <__stack+0xcf>
      ClockMethods::incrementHour();
     9c0:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN12ClockMethods13incrementHourEv>
	  delay(200);
     9c4:	68 ec       	ldi	r22, 0xC8	; 200
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	e7 c0       	rjmp	.+462    	; 0xb9c <__stack+0x29d>
    } else if (currentMode == EDIT_TEXT) {
     9ce:	8b 30       	cpi	r24, 0x0B	; 11
     9d0:	91 05       	cpc	r25, r1
     9d2:	51 f4       	brne	.+20     	; 0x9e8 <__stack+0xe9>
      dispText[dispTextIndex] += 1;
     9d4:	e0 91 29 06 	lds	r30, 0x0629
     9d8:	f0 91 2a 06 	lds	r31, 0x062A
     9dc:	e7 5f       	subi	r30, 0xF7	; 247
     9de:	f9 4f       	sbci	r31, 0xF9	; 249
     9e0:	80 81       	ld	r24, Z
     9e2:	8f 5f       	subi	r24, 0xFF	; 255
     9e4:	80 83       	st	Z, r24
     9e6:	dc c0       	rjmp	.+440    	; 0xba0 <__stack+0x2a1>
    } else if (currentMode == RESPONSE_TIME) {
     9e8:	88 30       	cpi	r24, 0x08	; 8
     9ea:	91 05       	cpc	r25, r1
     9ec:	59 f4       	brne	.+22     	; 0xa04 <__stack+0x105>
      customDelay += 100;
     9ee:	80 91 16 06 	lds	r24, 0x0616
     9f2:	90 91 17 06 	lds	r25, 0x0617
     9f6:	8c 59       	subi	r24, 0x9C	; 156
     9f8:	9f 4f       	sbci	r25, 0xFF	; 255
     9fa:	90 93 17 06 	sts	0x0617, r25
     9fe:	80 93 16 06 	sts	0x0616, r24
     a02:	ce c0       	rjmp	.+412    	; 0xba0 <__stack+0x2a1>
    } else if (currentMode == WHEEL_PSI || currentMode == WHEEL_TEMP) {
     a04:	83 30       	cpi	r24, 0x03	; 3
     a06:	91 05       	cpc	r25, r1
     a08:	19 f0       	breq	.+6      	; 0xa10 <__stack+0x111>
     a0a:	8a 30       	cpi	r24, 0x0A	; 10
     a0c:	91 05       	cpc	r25, r1
     a0e:	71 f4       	brne	.+28     	; 0xa2c <__stack+0x12d>
      if(tireNumber > 1) tireNumber--;
     a10:	80 91 bd 03 	lds	r24, 0x03BD
     a14:	90 91 be 03 	lds	r25, 0x03BE
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	91 05       	cpc	r25, r1
     a1c:	0c f4       	brge	.+2      	; 0xa20 <__stack+0x121>
     a1e:	c0 c0       	rjmp	.+384    	; 0xba0 <__stack+0x2a1>
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	90 93 be 03 	sts	0x03BE, r25
     a26:	80 93 bd 03 	sts	0x03BD, r24
     a2a:	ba c0       	rjmp	.+372    	; 0xba0 <__stack+0x2a1>
    } else if (currentMode == CEL) {
     a2c:	86 30       	cpi	r24, 0x06	; 6
     a2e:	91 05       	cpc	r25, r1
     a30:	09 f0       	breq	.+2      	; 0xa34 <__stack+0x135>
     a32:	b6 c0       	rjmp	.+364    	; 0xba0 <__stack+0x2a1>
	  if(milCode > 1) milCode--;
     a34:	80 91 bf 03 	lds	r24, 0x03BF
     a38:	90 91 c0 03 	lds	r25, 0x03C0
     a3c:	82 30       	cpi	r24, 0x02	; 2
     a3e:	91 05       	cpc	r25, r1
     a40:	0c f4       	brge	.+2      	; 0xa44 <__stack+0x145>
     a42:	ae c0       	rjmp	.+348    	; 0xba0 <__stack+0x2a1>
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	90 93 c0 03 	sts	0x03C0, r25
     a4a:	80 93 bf 03 	sts	0x03BF, r24
     a4e:	a8 c0       	rjmp	.+336    	; 0xba0 <__stack+0x2a1>
    buttonPressed = true; 
    break;
    
    // User Pressed Left
    case LEFT:
    if(currentMode == EDIT_TEXT) {
     a50:	e0 91 ee 05 	lds	r30, 0x05EE
     a54:	f0 91 ef 05 	lds	r31, 0x05EF
     a58:	eb 30       	cpi	r30, 0x0B	; 11
     a5a:	f1 05       	cpc	r31, r1
     a5c:	51 f4       	brne	.+20     	; 0xa72 <__stack+0x173>
      if(dispTextIndex > 0) {
     a5e:	80 91 29 06 	lds	r24, 0x0629
     a62:	90 91 2a 06 	lds	r25, 0x062A
     a66:	18 16       	cp	r1, r24
     a68:	19 06       	cpc	r1, r25
     a6a:	0c f0       	brlt	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	99 c0       	rjmp	.+306    	; 0xba0 <__stack+0x2a1>
        dispTextIndex--;
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	31 c0       	rjmp	.+98     	; 0xad4 <__stack+0x1d5>
      }
    } else if(currentMode > ECU && currentMode < RESPONSE_TIME) {
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	e7 30       	cpi	r30, 0x07	; 7
     a76:	f1 05       	cpc	r31, r1
     a78:	08 f0       	brcs	.+2      	; 0xa7c <__stack+0x17d>
     a7a:	92 c0       	rjmp	.+292    	; 0xba0 <__stack+0x2a1>
      strcpy_P(currentModeText, (char*)pgm_read_word(&allModesText[--currentMode]));
     a7c:	f0 93 ef 05 	sts	0x05EF, r31
     a80:	e0 93 ee 05 	sts	0x05EE, r30
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	ec 55       	subi	r30, 0x5C	; 92
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	65 91       	lpm	r22, Z+
     a8e:	74 91       	lpm	r23, Z
     a90:	8d ef       	ldi	r24, 0xFD	; 253
     a92:	95 e0       	ldi	r25, 0x05	; 5
     a94:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <strcpy_P>
      LCDMethods::setLcdMessage(currentModeText, MSCAN, currentMode, 20);
     a98:	84 e1       	ldi	r24, 0x14	; 20
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	9e 83       	std	Y+6, r25	; 0x06
     a9e:	8d 83       	std	Y+5, r24	; 0x05
     aa0:	8d ef       	ldi	r24, 0xFD	; 253
     aa2:	95 e0       	ldi	r25, 0x05	; 5
     aa4:	6a ee       	ldi	r22, 0xEA	; 234
     aa6:	75 e0       	ldi	r23, 0x05	; 5
     aa8:	4e ee       	ldi	r20, 0xEE	; 238
     aaa:	55 e0       	ldi	r21, 0x05	; 5
     aac:	9e 01       	movw	r18, r28
     aae:	2b 5f       	subi	r18, 0xFB	; 251
     ab0:	3f 4f       	sbci	r19, 0xFF	; 255
     ab2:	54 c0       	rjmp	.+168    	; 0xb5c <__stack+0x25d>
    buttonPressed = true; 
    break;
    
    // User pressed right
    case RIGHT:
    if(currentMode == EDIT_TEXT) {
     ab4:	e0 91 ee 05 	lds	r30, 0x05EE
     ab8:	f0 91 ef 05 	lds	r31, 0x05EF
     abc:	eb 30       	cpi	r30, 0x0B	; 11
     abe:	f1 05       	cpc	r31, r1
     ac0:	71 f4       	brne	.+28     	; 0xade <__stack+0x1df>
      if(dispTextIndex < TEXTMAX) {
     ac2:	80 91 29 06 	lds	r24, 0x0629
     ac6:	90 91 2a 06 	lds	r25, 0x062A
     aca:	8d 30       	cpi	r24, 0x0D	; 13
     acc:	91 05       	cpc	r25, r1
     ace:	0c f0       	brlt	.+2      	; 0xad2 <__stack+0x1d3>
     ad0:	67 c0       	rjmp	.+206    	; 0xba0 <__stack+0x2a1>
        dispTextIndex++;
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	90 93 2a 06 	sts	0x062A, r25
     ad8:	80 93 29 06 	sts	0x0629, r24
     adc:	61 c0       	rjmp	.+194    	; 0xba0 <__stack+0x2a1>
      }  
    } else if(currentMode < OFF) {
     ade:	e7 30       	cpi	r30, 0x07	; 7
     ae0:	f1 05       	cpc	r31, r1
     ae2:	fc f4       	brge	.+62     	; 0xb22 <__stack+0x223>
      strcpy_P(currentModeText, (char*)pgm_read_word(&allModesText[++currentMode])); 
     ae4:	31 96       	adiw	r30, 0x01	; 1
     ae6:	f0 93 ef 05 	sts	0x05EF, r31
     aea:	e0 93 ee 05 	sts	0x05EE, r30
     aee:	ee 0f       	add	r30, r30
     af0:	ff 1f       	adc	r31, r31
     af2:	ec 55       	subi	r30, 0x5C	; 92
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	65 91       	lpm	r22, Z+
     af8:	74 91       	lpm	r23, Z
     afa:	8d ef       	ldi	r24, 0xFD	; 253
     afc:	95 e0       	ldi	r25, 0x05	; 5
     afe:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <strcpy_P>
      LCDMethods::setLcdMessage(currentModeText, MSCAN, currentMode, 20);
     b02:	84 e1       	ldi	r24, 0x14	; 20
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	9c 83       	std	Y+4, r25	; 0x04
     b08:	8b 83       	std	Y+3, r24	; 0x03
     b0a:	8d ef       	ldi	r24, 0xFD	; 253
     b0c:	95 e0       	ldi	r25, 0x05	; 5
     b0e:	6a ee       	ldi	r22, 0xEA	; 234
     b10:	75 e0       	ldi	r23, 0x05	; 5
     b12:	4e ee       	ldi	r20, 0xEE	; 238
     b14:	55 e0       	ldi	r21, 0x05	; 5
     b16:	9e 01       	movw	r18, r28
     b18:	2d 5f       	subi	r18, 0xFD	; 253
     b1a:	3f 4f       	sbci	r19, 0xFF	; 255
     b1c:	0e 94 44 1b 	call	0x3688	; 0x3688 <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKiS5_>
     b20:	39 c0       	rjmp	.+114    	; 0xb94 <__stack+0x295>
	  delay(100);
    } else if(currentMode == OFF) {
     b22:	e7 30       	cpi	r30, 0x07	; 7
     b24:	f1 05       	cpc	r31, r1
     b26:	09 f0       	breq	.+2      	; 0xb2a <__stack+0x22b>
     b28:	3b c0       	rjmp	.+118    	; 0xba0 <__stack+0x2a1>
      currentMode = ECU;
     b2a:	10 92 ef 05 	sts	0x05EF, r1
     b2e:	10 92 ee 05 	sts	0x05EE, r1
      strcpy_P(currentModeText, (char*)pgm_read_word(&allModesText[currentMode]));
     b32:	e4 ea       	ldi	r30, 0xA4	; 164
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	65 91       	lpm	r22, Z+
     b38:	74 91       	lpm	r23, Z
     b3a:	8d ef       	ldi	r24, 0xFD	; 253
     b3c:	95 e0       	ldi	r25, 0x05	; 5
     b3e:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <strcpy_P>
      LCDMethods::setLcdMessage(currentModeText, MSCAN, currentMode, 20);
     b42:	84 e1       	ldi	r24, 0x14	; 20
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	89 83       	std	Y+1, r24	; 0x01
     b4a:	8d ef       	ldi	r24, 0xFD	; 253
     b4c:	95 e0       	ldi	r25, 0x05	; 5
     b4e:	6a ee       	ldi	r22, 0xEA	; 234
     b50:	75 e0       	ldi	r23, 0x05	; 5
     b52:	4e ee       	ldi	r20, 0xEE	; 238
     b54:	55 e0       	ldi	r21, 0x05	; 5
     b56:	9e 01       	movw	r18, r28
     b58:	2f 5f       	subi	r18, 0xFF	; 255
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
     b5c:	0e 94 44 1b 	call	0x3688	; 0x3688 <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKiS5_>
     b60:	1f c0       	rjmp	.+62     	; 0xba0 <__stack+0x2a1>
    buttonPressed = true; 
    break;
    
    // User clicked joystick
    case CLICK:
    currentMode = getAlternateState();
     b62:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z17getAlternateStatev>
     b66:	90 93 ef 05 	sts	0x05EF, r25
     b6a:	80 93 ee 05 	sts	0x05EE, r24
    strcpy_P(currentModeText, (char*)pgm_read_word(&allModesText[currentMode]));
     b6e:	fc 01       	movw	r30, r24
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	ec 55       	subi	r30, 0x5C	; 92
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	65 91       	lpm	r22, Z+
     b7a:	74 91       	lpm	r23, Z
     b7c:	8d ef       	ldi	r24, 0xFD	; 253
     b7e:	95 e0       	ldi	r25, 0x05	; 5
     b80:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <strcpy_P>
    LCDMethods::setLcdMessage(currentModeText, MSCAN, currentMode);//, 100);
     b84:	8d ef       	ldi	r24, 0xFD	; 253
     b86:	95 e0       	ldi	r25, 0x05	; 5
     b88:	6a ee       	ldi	r22, 0xEA	; 234
     b8a:	75 e0       	ldi	r23, 0x05	; 5
     b8c:	4e ee       	ldi	r20, 0xEE	; 238
     b8e:	55 e0       	ldi	r21, 0x05	; 5
     b90:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi>
    delay(100);
     b94:	64 e6       	ldi	r22, 0x64	; 100
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 6f 20 	call	0x40de	; 0x40de <delay>
    buttonPressed = true; 
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	f7 01       	movw	r30, r14
     ba4:	80 83       	st	Z, r24
    break;
  }  
}
     ba6:	26 96       	adiw	r28, 0x06	; 6
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	08 95       	ret

00000bc0 <_Z23readCruiseControlSwitchv>:
//////////////////////////////////////////////////////////////////////////////////

/** 
 * Handler for reading the cruise control switch
 */
void readCruiseControlSwitch(void) {
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	6a 97       	sbiw	r28, 0x1a	; 26
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
    Frame message;
	
    // Check if CC is on
    boolean ccIsOn = CruiseControlMethods::getCCStatus(HSCAN, ccFail);
     bd4:	8c ee       	ldi	r24, 0xEC	; 236
     bd6:	95 e0       	ldi	r25, 0x05	; 5
     bd8:	68 e1       	ldi	r22, 0x18	; 24
     bda:	76 e0       	ldi	r23, 0x06	; 6
     bdc:	0e 94 0e 19 	call	0x321c	; 0x321c <_ZN20CruiseControlMethods11getCCStatusER7MCP2515Rb>
    
    if(!ccIsOn) {
     be0:	88 23       	and	r24, r24
     be2:	09 f0       	breq	.+2      	; 0xbe6 <_Z23readCruiseControlSwitchv+0x26>
     be4:	ea c0       	rjmp	.+468    	; 0xdba <_Z23readCruiseControlSwitchv+0x1fa>
      // Query Cruise Control Switch Module
      if(CruiseControlMethods::getCCButton(message, HSCAN)) {
     be6:	ce 01       	movw	r24, r28
     be8:	0a 96       	adiw	r24, 0x0a	; 10
     bea:	6c ee       	ldi	r22, 0xEC	; 236
     bec:	75 e0       	ldi	r23, 0x05	; 5
     bee:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN20CruiseControlMethods11getCCButtonER5FrameR7MCP2515>
     bf2:	88 23       	and	r24, r24
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <_Z23readCruiseControlSwitchv+0x38>
     bf6:	f3 c0       	rjmp	.+486    	; 0xdde <_Z23readCruiseControlSwitchv+0x21e>
        boolean buttonPressed = false;
     bf8:	19 82       	std	Y+1, r1	; 0x01
		
		// The cruise control can be held down so lets make sure
		// that this is not a hold down and just a single press
		if(message.data[4] != CC_CNCL && lastButtonPressedCnt != 0) {
     bfa:	8f 89       	ldd	r24, Y+23	; 0x17
     bfc:	88 33       	cpi	r24, 0x38	; 56
     bfe:	41 f1       	breq	.+80     	; 0xc50 <_Z23readCruiseControlSwitchv+0x90>
     c00:	80 91 24 06 	lds	r24, 0x0624
     c04:	90 91 25 06 	lds	r25, 0x0625
     c08:	a0 91 26 06 	lds	r26, 0x0626
     c0c:	b0 91 27 06 	lds	r27, 0x0627
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	e1 f0       	breq	.+56     	; 0xc50 <_Z23readCruiseControlSwitchv+0x90>
			joystickHandler(RIGHT, buttonPressed);
     c18:	80 e1       	ldi	r24, 0x10	; 16
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	99 87       	std	Y+9, r25	; 0x09
     c1e:	88 87       	std	Y+8, r24	; 0x08
     c20:	ce 01       	movw	r24, r28
     c22:	08 96       	adiw	r24, 0x08	; 8
     c24:	be 01       	movw	r22, r28
     c26:	6f 5f       	subi	r22, 0xFF	; 255
     c28:	7f 4f       	sbci	r23, 0xFF	; 255
     c2a:	0e 94 0d 04 	call	0x81a	; 0x81a <_Z15joystickHandlerRKiRb>
			lastButtonPressedCnt = 0;
     c2e:	10 92 24 06 	sts	0x0624, r1
     c32:	10 92 25 06 	sts	0x0625, r1
     c36:	10 92 26 06 	sts	0x0626, r1
     c3a:	10 92 27 06 	sts	0x0627, r1
			holdDownDone = true;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	80 93 28 06 	sts	0x0628, r24
			Serial.println("Timer Ended");
     c44:	8a ec       	ldi	r24, 0xCA	; 202
     c46:	96 e0       	ldi	r25, 0x06	; 6
     c48:	65 ea       	ldi	r22, 0xA5	; 165
     c4a:	72 e0       	ldi	r23, 0x02	; 2
     c4c:	0e 94 84 24 	call	0x4908	; 0x4908 <_ZN5Print7printlnEPKc>
		}	
        
        // Read data
        switch(message.data[4]) {
     c50:	8f 89       	ldd	r24, Y+23	; 0x17
     c52:	8c 39       	cpi	r24, 0x9C	; 156
     c54:	f9 f0       	breq	.+62     	; 0xc94 <_Z23readCruiseControlSwitchv+0xd4>
     c56:	86 3d       	cpi	r24, 0xD6	; 214
     c58:	21 f0       	breq	.+8      	; 0xc62 <_Z23readCruiseControlSwitchv+0xa2>
     c5a:	88 33       	cpi	r24, 0x38	; 56
     c5c:	09 f0       	breq	.+2      	; 0xc60 <_Z23readCruiseControlSwitchv+0xa0>
     c5e:	a3 c0       	rjmp	.+326    	; 0xda6 <_Z23readCruiseControlSwitchv+0x1e6>
     c60:	37 c0       	rjmp	.+110    	; 0xcd0 <_Z23readCruiseControlSwitchv+0x110>
			case CC_UP: // up
            DebugMethods::serialDebug("CC Up Pressed", true);
     c62:	00 d0       	rcall	.+0      	; 0xc64 <_Z23readCruiseControlSwitchv+0xa4>
     c64:	00 d0       	rcall	.+0      	; 0xc66 <_Z23readCruiseControlSwitchv+0xa6>
     c66:	81 eb       	ldi	r24, 0xB1	; 177
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	ed b7       	in	r30, 0x3d	; 61
     c6c:	fe b7       	in	r31, 0x3e	; 62
     c6e:	92 83       	std	Z+2, r25	; 0x02
     c70:	81 83       	std	Z+1, r24	; 0x01
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	94 83       	std	Z+4, r25	; 0x04
     c78:	83 83       	std	Z+3, r24	; 0x03
     c7a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
            joystickHandler(UP,    buttonPressed);
     c7e:	8f e0       	ldi	r24, 0x0F	; 15
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	9f 83       	std	Y+7, r25	; 0x07
     c84:	8e 83       	std	Y+6, r24	; 0x06
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	ce 01       	movw	r24, r28
     c90:	06 96       	adiw	r24, 0x06	; 6
     c92:	18 c0       	rjmp	.+48     	; 0xcc4 <_Z23readCruiseControlSwitchv+0x104>
            break; 
            case CC_DOWN: // down
            DebugMethods::serialDebug("CC Down Pressed", true);
     c94:	00 d0       	rcall	.+0      	; 0xc96 <_Z23readCruiseControlSwitchv+0xd6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <_Z23readCruiseControlSwitchv+0xd8>
     c98:	8f eb       	ldi	r24, 0xBF	; 191
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	ed b7       	in	r30, 0x3d	; 61
     c9e:	fe b7       	in	r31, 0x3e	; 62
     ca0:	92 83       	std	Z+2, r25	; 0x02
     ca2:	81 83       	std	Z+1, r24	; 0x01
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	94 83       	std	Z+4, r25	; 0x04
     caa:	83 83       	std	Z+3, r24	; 0x03
     cac:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
            joystickHandler(DOWN,  buttonPressed);
     cb0:	81 e1       	ldi	r24, 0x11	; 17
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	9d 83       	std	Y+5, r25	; 0x05
     cb6:	8c 83       	std	Y+4, r24	; 0x04
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	ce 01       	movw	r24, r28
     cc2:	04 96       	adiw	r24, 0x04	; 4
     cc4:	be 01       	movw	r22, r28
     cc6:	6f 5f       	subi	r22, 0xFF	; 255
     cc8:	7f 4f       	sbci	r23, 0xFF	; 255
     cca:	0e 94 0d 04 	call	0x81a	; 0x81a <_Z15joystickHandlerRKiRb>
            break;
     cce:	6b c0       	rjmp	.+214    	; 0xda6 <_Z23readCruiseControlSwitchv+0x1e6>
            case CC_CNCL: // cancel
            DebugMethods::serialDebug("CC Cancel Pressed", true);
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <_Z23readCruiseControlSwitchv+0x112>
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <_Z23readCruiseControlSwitchv+0x114>
     cd4:	8f ec       	ldi	r24, 0xCF	; 207
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	ed b7       	in	r30, 0x3d	; 61
     cda:	fe b7       	in	r31, 0x3e	; 62
     cdc:	92 83       	std	Z+2, r25	; 0x02
     cde:	81 83       	std	Z+1, r24	; 0x01
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	94 83       	std	Z+4, r25	; 0x04
     ce6:	83 83       	std	Z+3, r24	; 0x03
     ce8:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
			if (lastButtonPressedCnt == 0) {      // check if continued press
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	80 91 24 06 	lds	r24, 0x0624
     cf8:	90 91 25 06 	lds	r25, 0x0625
     cfc:	a0 91 26 06 	lds	r26, 0x0626
     d00:	b0 91 27 06 	lds	r27, 0x0627
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	a1 05       	cpc	r26, r1
     d08:	b1 05       	cpc	r27, r1
     d0a:	a9 f4       	brne	.+42     	; 0xd36 <_Z23readCruiseControlSwitchv+0x176>
				lastButtonPressedCnt = millis();  // if not, set timer
     d0c:	0e 94 61 20 	call	0x40c2	; 0x40c2 <millis>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	80 93 24 06 	sts	0x0624, r24
     d18:	90 93 25 06 	sts	0x0625, r25
     d1c:	a0 93 26 06 	sts	0x0626, r26
     d20:	b0 93 27 06 	sts	0x0627, r27
				Serial.println("Timer Started");
     d24:	8a ec       	ldi	r24, 0xCA	; 202
     d26:	96 e0       	ldi	r25, 0x06	; 6
     d28:	61 ee       	ldi	r22, 0xE1	; 225
     d2a:	72 e0       	ldi	r23, 0x02	; 2
     d2c:	0e 94 84 24 	call	0x4908	; 0x4908 <_ZN5Print7printlnEPKc>
				holdDownDone = false;
     d30:	10 92 28 06 	sts	0x0628, r1
     d34:	38 c0       	rjmp	.+112    	; 0xda6 <_Z23readCruiseControlSwitchv+0x1e6>
			} else if ((millis() - lastButtonPressedCnt) > 1000 && !holdDownDone) { // if so, check if long ennough
     d36:	0e 94 61 20 	call	0x40c2	; 0x40c2 <millis>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	40 91 24 06 	lds	r20, 0x0624
     d42:	50 91 25 06 	lds	r21, 0x0625
     d46:	60 91 26 06 	lds	r22, 0x0626
     d4a:	70 91 27 06 	lds	r23, 0x0627
     d4e:	84 1b       	sub	r24, r20
     d50:	95 0b       	sbc	r25, r21
     d52:	a6 0b       	sbc	r26, r22
     d54:	b7 0b       	sbc	r27, r23
     d56:	89 3e       	cpi	r24, 0xE9	; 233
     d58:	f3 e0       	ldi	r31, 0x03	; 3
     d5a:	9f 07       	cpc	r25, r31
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	af 07       	cpc	r26, r31
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	bf 07       	cpc	r27, r31
     d64:	00 f1       	brcs	.+64     	; 0xda6 <_Z23readCruiseControlSwitchv+0x1e6>
     d66:	80 91 28 06 	lds	r24, 0x0628
     d6a:	88 23       	and	r24, r24
     d6c:	e1 f4       	brne	.+56     	; 0xda6 <_Z23readCruiseControlSwitchv+0x1e6>
				Serial.println("Button Held Down");
     d6e:	8a ec       	ldi	r24, 0xCA	; 202
     d70:	96 e0       	ldi	r25, 0x06	; 6
     d72:	6f ee       	ldi	r22, 0xEF	; 239
     d74:	72 e0       	ldi	r23, 0x02	; 2
     d76:	0e 94 84 24 	call	0x4908	; 0x4908 <_ZN5Print7printlnEPKc>
				joystickHandler(CLICK, buttonPressed);
     d7a:	82 e1       	ldi	r24, 0x12	; 18
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	9b 83       	std	Y+3, r25	; 0x03
     d80:	8a 83       	std	Y+2, r24	; 0x02
     d82:	ce 01       	movw	r24, r28
     d84:	02 96       	adiw	r24, 0x02	; 2
     d86:	be 01       	movw	r22, r28
     d88:	6f 5f       	subi	r22, 0xFF	; 255
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	0e 94 0d 04 	call	0x81a	; 0x81a <_Z15joystickHandlerRKiRb>
				holdDownDone = true;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	80 93 28 06 	sts	0x0628, r24
				lastButtonPressedCnt = 0;
     d96:	10 92 24 06 	sts	0x0624, r1
     d9a:	10 92 25 06 	sts	0x0625, r1
     d9e:	10 92 26 06 	sts	0x0626, r1
     da2:	10 92 27 06 	sts	0x0627, r1
			} // else ignore
            break;
        }
      
	    if(buttonPressed)
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	c9 f0       	breq	.+50     	; 0xdde <_Z23readCruiseControlSwitchv+0x21e>
		  delay(125);
     dac:	6d e7       	ldi	r22, 0x7D	; 125
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 6f 20 	call	0x40de	; 0x40de <delay>
     db8:	12 c0       	rjmp	.+36     	; 0xdde <_Z23readCruiseControlSwitchv+0x21e>
	  }
		
    } else {
      DebugMethods::serialDebug("Cruise Control Is On, Buttons Disabled", true);
     dba:	00 d0       	rcall	.+0      	; 0xdbc <_Z23readCruiseControlSwitchv+0x1fc>
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <_Z23readCruiseControlSwitchv+0x1fe>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	ed b7       	in	r30, 0x3d	; 61
     dc4:	fe b7       	in	r31, 0x3e	; 62
     dc6:	92 83       	std	Z+2, r25	; 0x02
     dc8:	81 83       	std	Z+1, r24	; 0x01
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	94 83       	std	Z+4, r25	; 0x04
     dd0:	83 83       	std	Z+3, r24	; 0x03
     dd2:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
    }
}
     dde:	6a 96       	adiw	r28, 0x1a	; 26
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <_Z18parseSerialMessageRK6String>:
/** 
 * Parse the message on the serial bus
 * @param msg	The message on the bus
 */
#ifdef _ALLOWINPUT
void parseSerialMessage(const String& msg) {
     df0:	8f 92       	push	r8
     df2:	9f 92       	push	r9
     df4:	af 92       	push	r10
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	c8 55       	subi	r28, 0x58	; 88
     e0e:	d0 40       	sbci	r29, 0x00	; 0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	7c 01       	movw	r14, r24
		DebugMethods::serialDebug("Current Monitor Text: %s\n", currentMonitorText);
		DebugMethods::serialDebug("Current Mode Text: %s\n", currentModeText);
		DebugMethods::serialDebug("Display Text: %s\n", dispText);
		DebugMethods::serialDebug("Custom Delay: %d\n", customDelay);
	}
}
     e1c:	8d b6       	in	r8, 0x3d	; 61
     e1e:	9e b6       	in	r9, 0x3e	; 62
 */
#ifdef _ALLOWINPUT
void parseSerialMessage(const String& msg) {
	
	// Control for button press
	boolean buttonPressed = false;
     e20:	19 82       	std	Y+1, r1	; 0x01
	
	if(msg.compareTo("RST") == 0) {
     e22:	ce 01       	movw	r24, r28
     e24:	8e 5a       	subi	r24, 0xAE	; 174
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	67 e2       	ldi	r22, 0x27	; 39
     e2a:	73 e0       	ldi	r23, 0x03	; 3
     e2c:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
     e30:	c7 01       	movw	r24, r14
     e32:	be 01       	movw	r22, r28
     e34:	6e 5a       	subi	r22, 0xAE	; 174
     e36:	7f 4f       	sbci	r23, 0xFF	; 255
     e38:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <_ZNK6String9compareToERKS_>
     e3c:	8c 01       	movw	r16, r24
     e3e:	ce 01       	movw	r24, r28
     e40:	8e 5a       	subi	r24, 0xAE	; 174
     e42:	9f 4f       	sbci	r25, 0xFF	; 255
     e44:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
     e48:	01 15       	cp	r16, r1
     e4a:	11 05       	cpc	r17, r1
     e4c:	19 f4       	brne	.+6      	; 0xe54 <_Z18parseSerialMessageRK6String+0x64>
		asm volatile ("  jmp 0");
     e4e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     e52:	9b c1       	rjmp	.+822    	; 0x118a <_Z18parseSerialMessageRK6String+0x39a>
	} else if(msg.substring(0,3) == "TXT") {
     e54:	ce 01       	movw	r24, r28
     e56:	85 5b       	subi	r24, 0xB5	; 181
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	b7 01       	movw	r22, r14
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	23 e0       	ldi	r18, 0x03	; 3
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <_ZNK6String9substringEjj>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     e68:	ce 01       	movw	r24, r28
     e6a:	85 5b       	subi	r24, 0xB5	; 181
     e6c:	9f 4f       	sbci	r25, 0xFF	; 255
     e6e:	6b e2       	ldi	r22, 0x2B	; 43
     e70:	73 e0       	ldi	r23, 0x03	; 3
     e72:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <_ZNK6String6equalsEPKc>
     e76:	08 2f       	mov	r16, r24
     e78:	ce 01       	movw	r24, r28
     e7a:	85 5b       	subi	r24, 0xB5	; 181
     e7c:	9f 4f       	sbci	r25, 0xFF	; 255
     e7e:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
     e82:	00 23       	and	r16, r16
     e84:	09 f4       	brne	.+2      	; 0xe88 <_Z18parseSerialMessageRK6String+0x98>
     e86:	52 c0       	rjmp	.+164    	; 0xf2c <_Z18parseSerialMessageRK6String+0x13c>
     e88:	dd b6       	in	r13, 0x3d	; 61
     e8a:	ce b6       	in	r12, 0x3e	; 62
		char tmp[msg.length()];
     e8c:	f7 01       	movw	r30, r14
     e8e:	04 81       	ldd	r16, Z+4	; 0x04
     e90:	15 81       	ldd	r17, Z+5	; 0x05
     e92:	8d b7       	in	r24, 0x3d	; 61
     e94:	9e b7       	in	r25, 0x3e	; 62
     e96:	80 1b       	sub	r24, r16
     e98:	91 0b       	sbc	r25, r17
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	9e bf       	out	0x3e, r25	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	8d bf       	out	0x3d, r24	; 61
     ea4:	ad b6       	in	r10, 0x3d	; 61
     ea6:	be b6       	in	r11, 0x3e	; 62
     ea8:	08 94       	sec
     eaa:	a1 1c       	adc	r10, r1
     eac:	b1 1c       	adc	r11, r1
		msg.toCharArray(tmp, msg.length(), msg.indexOf(" ")+1);
     eae:	ce 01       	movw	r24, r28
     eb0:	8c 5b       	subi	r24, 0xBC	; 188
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	6f e2       	ldi	r22, 0x2F	; 47
     eb6:	73 e0       	ldi	r23, 0x03	; 3
     eb8:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
     ebc:	c7 01       	movw	r24, r14
     ebe:	be 01       	movw	r22, r28
     ec0:	6c 5b       	subi	r22, 0xBC	; 188
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <_ZNK6String7indexOfERKS_>
     ec8:	9c 01       	movw	r18, r24
     eca:	2f 5f       	subi	r18, 0xFF	; 255
     ecc:	3f 4f       	sbci	r19, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
     ece:	c7 01       	movw	r24, r14
     ed0:	b5 01       	movw	r22, r10
     ed2:	a8 01       	movw	r20, r16
     ed4:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZNK6String8getBytesEPhjj>
     ed8:	ce 01       	movw	r24, r28
     eda:	8c 5b       	subi	r24, 0xBC	; 188
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
		strcpy(dispText, tmp);
     ee2:	09 e0       	ldi	r16, 0x09	; 9
     ee4:	16 e0       	ldi	r17, 0x06	; 6
     ee6:	c8 01       	movw	r24, r16
     ee8:	b5 01       	movw	r22, r10
     eea:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <strcpy>
		DebugMethods::serialDebug("Writing To Memory: ", false);
     eee:	00 d0       	rcall	.+0      	; 0xef0 <_Z18parseSerialMessageRK6String+0x100>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <_Z18parseSerialMessageRK6String+0x102>
     ef2:	81 e3       	ldi	r24, 0x31	; 49
     ef4:	93 e0       	ldi	r25, 0x03	; 3
     ef6:	ed b7       	in	r30, 0x3d	; 61
     ef8:	fe b7       	in	r31, 0x3e	; 62
     efa:	92 83       	std	Z+2, r25	; 0x02
     efc:	81 83       	std	Z+1, r24	; 0x01
     efe:	14 82       	std	Z+4, r1	; 0x04
     f00:	13 82       	std	Z+3, r1	; 0x03
     f02:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
		DebugMethods::serialDebug(dispText, true);
     f06:	ed b7       	in	r30, 0x3d	; 61
     f08:	fe b7       	in	r31, 0x3e	; 62
     f0a:	12 83       	std	Z+2, r17	; 0x02
     f0c:	01 83       	std	Z+1, r16	; 0x01
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	94 83       	std	Z+4, r25	; 0x04
     f14:	83 83       	std	Z+3, r24	; 0x03
     f16:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
		saveStoredValues();
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0e 94 67 03 	call	0x6ce	; 0x6ce <_Z16saveStoredValuesv>
     f26:	dd be       	out	0x3d, r13	; 61
     f28:	ce be       	out	0x3e, r12	; 62
     f2a:	2f c1       	rjmp	.+606    	; 0x118a <_Z18parseSerialMessageRK6String+0x39a>
	} else if(msg.compareTo("NEXT") == 0) {
     f2c:	ce 01       	movw	r24, r28
     f2e:	cd 96       	adiw	r24, 0x3d	; 61
     f30:	65 e4       	ldi	r22, 0x45	; 69
     f32:	73 e0       	ldi	r23, 0x03	; 3
     f34:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
     f38:	c7 01       	movw	r24, r14
     f3a:	be 01       	movw	r22, r28
     f3c:	63 5c       	subi	r22, 0xC3	; 195
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <_ZNK6String9compareToERKS_>
     f44:	8c 01       	movw	r16, r24
     f46:	ce 01       	movw	r24, r28
     f48:	cd 96       	adiw	r24, 0x3d	; 61
     f4a:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
     f4e:	01 15       	cp	r16, r1
     f50:	11 05       	cpc	r17, r1
     f52:	39 f4       	brne	.+14     	; 0xf62 <_Z18parseSerialMessageRK6String+0x172>
		joystickHandler(RIGHT, buttonPressed);
     f54:	80 e1       	ldi	r24, 0x10	; 16
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9b 87       	std	Y+11, r25	; 0x0b
     f5a:	8a 87       	std	Y+10, r24	; 0x0a
     f5c:	ce 01       	movw	r24, r28
     f5e:	0a 96       	adiw	r24, 0x0a	; 10
     f60:	1a c0       	rjmp	.+52     	; 0xf96 <_Z18parseSerialMessageRK6String+0x1a6>
	} else if(msg.compareTo("PREV") == 0) {
     f62:	ce 01       	movw	r24, r28
     f64:	c6 96       	adiw	r24, 0x36	; 54
     f66:	6a e4       	ldi	r22, 0x4A	; 74
     f68:	73 e0       	ldi	r23, 0x03	; 3
     f6a:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
     f6e:	c7 01       	movw	r24, r14
     f70:	be 01       	movw	r22, r28
     f72:	6a 5c       	subi	r22, 0xCA	; 202
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
     f76:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <_ZNK6String9compareToERKS_>
     f7a:	8c 01       	movw	r16, r24
     f7c:	ce 01       	movw	r24, r28
     f7e:	c6 96       	adiw	r24, 0x36	; 54
     f80:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
     f84:	01 15       	cp	r16, r1
     f86:	11 05       	cpc	r17, r1
     f88:	61 f4       	brne	.+24     	; 0xfa2 <_Z18parseSerialMessageRK6String+0x1b2>
		joystickHandler(LEFT, buttonPressed);
     f8a:	83 e1       	ldi	r24, 0x13	; 19
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	99 87       	std	Y+9, r25	; 0x09
     f90:	88 87       	std	Y+8, r24	; 0x08
     f92:	ce 01       	movw	r24, r28
     f94:	08 96       	adiw	r24, 0x08	; 8
     f96:	be 01       	movw	r22, r28
     f98:	6f 5f       	subi	r22, 0xFF	; 255
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	0e 94 0d 04 	call	0x81a	; 0x81a <_Z15joystickHandlerRKiRb>
     fa0:	f4 c0       	rjmp	.+488    	; 0x118a <_Z18parseSerialMessageRK6String+0x39a>
	} else if(msg.compareTo("UP") == 0) {
     fa2:	ce 01       	movw	r24, r28
     fa4:	8f 96       	adiw	r24, 0x2f	; 47
     fa6:	6f e4       	ldi	r22, 0x4F	; 79
     fa8:	73 e0       	ldi	r23, 0x03	; 3
     faa:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
     fae:	c7 01       	movw	r24, r14
     fb0:	be 01       	movw	r22, r28
     fb2:	61 5d       	subi	r22, 0xD1	; 209
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <_ZNK6String9compareToERKS_>
     fba:	8c 01       	movw	r16, r24
     fbc:	ce 01       	movw	r24, r28
     fbe:	8f 96       	adiw	r24, 0x2f	; 47
     fc0:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
     fc4:	01 15       	cp	r16, r1
     fc6:	11 05       	cpc	r17, r1
     fc8:	39 f4       	brne	.+14     	; 0xfd8 <_Z18parseSerialMessageRK6String+0x1e8>
		joystickHandler(UP, buttonPressed);
     fca:	8f e0       	ldi	r24, 0x0F	; 15
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9f 83       	std	Y+7, r25	; 0x07
     fd0:	8e 83       	std	Y+6, r24	; 0x06
     fd2:	ce 01       	movw	r24, r28
     fd4:	06 96       	adiw	r24, 0x06	; 6
     fd6:	df cf       	rjmp	.-66     	; 0xf96 <_Z18parseSerialMessageRK6String+0x1a6>
	} else if(msg.compareTo("DOWN") == 0) {
     fd8:	ce 01       	movw	r24, r28
     fda:	88 96       	adiw	r24, 0x28	; 40
     fdc:	62 e5       	ldi	r22, 0x52	; 82
     fde:	73 e0       	ldi	r23, 0x03	; 3
     fe0:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
     fe4:	c7 01       	movw	r24, r14
     fe6:	be 01       	movw	r22, r28
     fe8:	68 5d       	subi	r22, 0xD8	; 216
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <_ZNK6String9compareToERKS_>
     ff0:	8c 01       	movw	r16, r24
     ff2:	ce 01       	movw	r24, r28
     ff4:	88 96       	adiw	r24, 0x28	; 40
     ff6:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
     ffa:	01 15       	cp	r16, r1
     ffc:	11 05       	cpc	r17, r1
     ffe:	39 f4       	brne	.+14     	; 0x100e <_Z18parseSerialMessageRK6String+0x21e>
		joystickHandler(DOWN, buttonPressed);			
    1000:	81 e1       	ldi	r24, 0x11	; 17
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9d 83       	std	Y+5, r25	; 0x05
    1006:	8c 83       	std	Y+4, r24	; 0x04
    1008:	ce 01       	movw	r24, r28
    100a:	04 96       	adiw	r24, 0x04	; 4
    100c:	c4 cf       	rjmp	.-120    	; 0xf96 <_Z18parseSerialMessageRK6String+0x1a6>
	} else if(msg.compareTo("ALT") == 0) {
    100e:	ce 01       	movw	r24, r28
    1010:	81 96       	adiw	r24, 0x21	; 33
    1012:	67 e5       	ldi	r22, 0x57	; 87
    1014:	73 e0       	ldi	r23, 0x03	; 3
    1016:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
    101a:	c7 01       	movw	r24, r14
    101c:	be 01       	movw	r22, r28
    101e:	6f 5d       	subi	r22, 0xDF	; 223
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <_ZNK6String9compareToERKS_>
    1026:	8c 01       	movw	r16, r24
    1028:	ce 01       	movw	r24, r28
    102a:	81 96       	adiw	r24, 0x21	; 33
    102c:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
    1030:	01 15       	cp	r16, r1
    1032:	11 05       	cpc	r17, r1
    1034:	39 f4       	brne	.+14     	; 0x1044 <_Z18parseSerialMessageRK6String+0x254>
		joystickHandler(CLICK, buttonPressed);
    1036:	82 e1       	ldi	r24, 0x12	; 18
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9b 83       	std	Y+3, r25	; 0x03
    103c:	8a 83       	std	Y+2, r24	; 0x02
    103e:	ce 01       	movw	r24, r28
    1040:	02 96       	adiw	r24, 0x02	; 2
    1042:	a9 cf       	rjmp	.-174    	; 0xf96 <_Z18parseSerialMessageRK6String+0x1a6>
	} else if(msg.compareTo("OFF") == 0) {
    1044:	ce 01       	movw	r24, r28
    1046:	4a 96       	adiw	r24, 0x1a	; 26
    1048:	6b e5       	ldi	r22, 0x5B	; 91
    104a:	73 e0       	ldi	r23, 0x03	; 3
    104c:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
    1050:	c7 01       	movw	r24, r14
    1052:	be 01       	movw	r22, r28
    1054:	66 5e       	subi	r22, 0xE6	; 230
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <_ZNK6String9compareToERKS_>
    105c:	8c 01       	movw	r16, r24
    105e:	ce 01       	movw	r24, r28
    1060:	4a 96       	adiw	r24, 0x1a	; 26
    1062:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
    1066:	01 15       	cp	r16, r1
    1068:	11 05       	cpc	r17, r1
    106a:	a9 f4       	brne	.+42     	; 0x1096 <_Z18parseSerialMessageRK6String+0x2a6>
		DebugMethods::serialDebug("Shutting Down", true);
    106c:	00 d0       	rcall	.+0      	; 0x106e <_Z18parseSerialMessageRK6String+0x27e>
    106e:	00 d0       	rcall	.+0      	; 0x1070 <_Z18parseSerialMessageRK6String+0x280>
    1070:	8f e5       	ldi	r24, 0x5F	; 95
    1072:	93 e0       	ldi	r25, 0x03	; 3
    1074:	ed b7       	in	r30, 0x3d	; 61
    1076:	fe b7       	in	r31, 0x3e	; 62
    1078:	92 83       	std	Z+2, r25	; 0x02
    107a:	81 83       	std	Z+1, r24	; 0x01
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	94 83       	std	Z+4, r25	; 0x04
    1082:	83 83       	std	Z+3, r24	; 0x03
    1084:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
		currentMode = OFF;
    1088:	87 e0       	ldi	r24, 0x07	; 7
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	90 93 ef 05 	sts	0x05EF, r25
    1090:	80 93 ee 05 	sts	0x05EE, r24
    1094:	76 c0       	rjmp	.+236    	; 0x1182 <_Z18parseSerialMessageRK6String+0x392>
	} else if(msg.compareTo("PING") == 0) {
    1096:	ce 01       	movw	r24, r28
    1098:	43 96       	adiw	r24, 0x13	; 19
    109a:	6d e6       	ldi	r22, 0x6D	; 109
    109c:	73 e0       	ldi	r23, 0x03	; 3
    109e:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
    10a2:	c7 01       	movw	r24, r14
    10a4:	be 01       	movw	r22, r28
    10a6:	6d 5e       	subi	r22, 0xED	; 237
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <_ZNK6String9compareToERKS_>
    10ae:	8c 01       	movw	r16, r24
    10b0:	ce 01       	movw	r24, r28
    10b2:	43 96       	adiw	r24, 0x13	; 19
    10b4:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
    10b8:	01 15       	cp	r16, r1
    10ba:	11 05       	cpc	r17, r1
    10bc:	59 f4       	brne	.+22     	; 0x10d4 <_Z18parseSerialMessageRK6String+0x2e4>
		DebugMethods::serialDebug("Serial Communications: OK" , true);
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <_Z18parseSerialMessageRK6String+0x2d0>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <_Z18parseSerialMessageRK6String+0x2d2>
    10c2:	82 e7       	ldi	r24, 0x72	; 114
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	ed b7       	in	r30, 0x3d	; 61
    10c8:	fe b7       	in	r31, 0x3e	; 62
    10ca:	92 83       	std	Z+2, r25	; 0x02
    10cc:	81 83       	std	Z+1, r24	; 0x01
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	53 c0       	rjmp	.+166    	; 0x117a <_Z18parseSerialMessageRK6String+0x38a>
	} else if(msg.compareTo("DUMP") == 0) {
    10d4:	ce 01       	movw	r24, r28
    10d6:	0c 96       	adiw	r24, 0x0c	; 12
    10d8:	6c e8       	ldi	r22, 0x8C	; 140
    10da:	73 e0       	ldi	r23, 0x03	; 3
    10dc:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
    10e0:	c7 01       	movw	r24, r14
    10e2:	be 01       	movw	r22, r28
    10e4:	64 5f       	subi	r22, 0xF4	; 244
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <_ZNK6String9compareToERKS_>
    10ec:	8c 01       	movw	r16, r24
    10ee:	ce 01       	movw	r24, r28
    10f0:	0c 96       	adiw	r24, 0x0c	; 12
    10f2:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
    10f6:	01 15       	cp	r16, r1
    10f8:	11 05       	cpc	r17, r1
    10fa:	09 f0       	breq	.+2      	; 0x10fe <_Z18parseSerialMessageRK6String+0x30e>
    10fc:	46 c0       	rjmp	.+140    	; 0x118a <_Z18parseSerialMessageRK6String+0x39a>
		// Message initializing
		DebugMethods::serialDebug("Current Monitor Pid: %d\n", currentMonitorPid);
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <_Z18parseSerialMessageRK6String+0x310>
    1100:	00 d0       	rcall	.+0      	; 0x1102 <_Z18parseSerialMessageRK6String+0x312>
    1102:	85 ee       	ldi	r24, 0xE5	; 229
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	ed b7       	in	r30, 0x3d	; 61
    1108:	fe b7       	in	r31, 0x3e	; 62
    110a:	92 83       	std	Z+2, r25	; 0x02
    110c:	81 83       	std	Z+1, r24	; 0x01
    110e:	80 91 f2 05 	lds	r24, 0x05F2
    1112:	90 91 f3 05 	lds	r25, 0x05F3
    1116:	94 83       	std	Z+4, r25	; 0x04
    1118:	83 83       	std	Z+3, r24	; 0x03
    111a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
		DebugMethods::serialDebug("Current Monitor Text: %s\n", currentMonitorText);
    111e:	8e ef       	ldi	r24, 0xFE	; 254
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	ed b7       	in	r30, 0x3d	; 61
    1124:	fe b7       	in	r31, 0x3e	; 62
    1126:	92 83       	std	Z+2, r25	; 0x02
    1128:	81 83       	std	Z+1, r24	; 0x01
    112a:	84 ef       	ldi	r24, 0xF4	; 244
    112c:	95 e0       	ldi	r25, 0x05	; 5
    112e:	94 83       	std	Z+4, r25	; 0x04
    1130:	83 83       	std	Z+3, r24	; 0x03
    1132:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
		DebugMethods::serialDebug("Current Mode Text: %s\n", currentModeText);
    1136:	88 e1       	ldi	r24, 0x18	; 24
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	ed b7       	in	r30, 0x3d	; 61
    113c:	fe b7       	in	r31, 0x3e	; 62
    113e:	92 83       	std	Z+2, r25	; 0x02
    1140:	81 83       	std	Z+1, r24	; 0x01
    1142:	8d ef       	ldi	r24, 0xFD	; 253
    1144:	95 e0       	ldi	r25, 0x05	; 5
    1146:	94 83       	std	Z+4, r25	; 0x04
    1148:	83 83       	std	Z+3, r24	; 0x03
    114a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
		DebugMethods::serialDebug("Display Text: %s\n", dispText);
    114e:	8f e2       	ldi	r24, 0x2F	; 47
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	ed b7       	in	r30, 0x3d	; 61
    1154:	fe b7       	in	r31, 0x3e	; 62
    1156:	92 83       	std	Z+2, r25	; 0x02
    1158:	81 83       	std	Z+1, r24	; 0x01
    115a:	89 e0       	ldi	r24, 0x09	; 9
    115c:	96 e0       	ldi	r25, 0x06	; 6
    115e:	94 83       	std	Z+4, r25	; 0x04
    1160:	83 83       	std	Z+3, r24	; 0x03
    1162:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
		DebugMethods::serialDebug("Custom Delay: %d\n", customDelay);
    1166:	81 e4       	ldi	r24, 0x41	; 65
    1168:	92 e0       	ldi	r25, 0x02	; 2
    116a:	ed b7       	in	r30, 0x3d	; 61
    116c:	fe b7       	in	r31, 0x3e	; 62
    116e:	92 83       	std	Z+2, r25	; 0x02
    1170:	81 83       	std	Z+1, r24	; 0x01
    1172:	80 91 16 06 	lds	r24, 0x0616
    1176:	90 91 17 06 	lds	r25, 0x0617
    117a:	94 83       	std	Z+4, r25	; 0x04
    117c:	83 83       	std	Z+3, r24	; 0x03
    117e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
	}
}
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	9e be       	out	0x3e, r9	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	8d be       	out	0x3d, r8	; 61
    1194:	c8 5a       	subi	r28, 0xA8	; 168
    1196:	df 4f       	sbci	r29, 0xFF	; 255
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	bf 90       	pop	r11
    11b4:	af 90       	pop	r10
    11b6:	9f 90       	pop	r9
    11b8:	8f 90       	pop	r8
    11ba:	08 95       	ret

000011bc <loop>:
/**
 * Standard Arduino loop method.  Loops application
 * indefinitely
 */
void loop(void)
{   
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	6b 97       	sbiw	r28, 0x1b	; 27
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
  String txtMsg = "";
    11d6:	8e 01       	movw	r16, r28
    11d8:	0b 5e       	subi	r16, 0xEB	; 235
    11da:	1f 4f       	sbci	r17, 0xFF	; 255
    11dc:	c8 01       	movw	r24, r16
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	71 e0       	ldi	r23, 0x01	; 1
    11e2:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
  
  // Did the user press anything?
  readCruiseControlSwitch();
    11e6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <_Z23readCruiseControlSwitchv>
#ifdef _ALLOWINPUT  
  // Is there a message on the bus
  // add any incoming characters to the String:
  while (Serial.available() > 0) {
    char inChar = Serial.read();
    txtMsg += inChar;
    11ea:	f0 2e       	mov	r15, r16
    11ec:	01 2f       	mov	r16, r17
  readCruiseControlSwitch();

#ifdef _ALLOWINPUT  
  // Is there a message on the bus
  // add any incoming characters to the String:
  while (Serial.available() > 0) {
    11ee:	09 c0       	rjmp	.+18     	; 0x1202 <loop+0x46>
    char inChar = Serial.read();
    11f0:	8a ec       	ldi	r24, 0xCA	; 202
    11f2:	96 e0       	ldi	r25, 0x06	; 6
    11f4:	0e 94 3d 22 	call	0x447a	; 0x447a <_ZN14HardwareSerial4readEv>
    11f8:	68 2f       	mov	r22, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    11fa:	8f 2d       	mov	r24, r15
    11fc:	90 2f       	mov	r25, r16
    11fe:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <_ZN6String6concatEc>
  readCruiseControlSwitch();

#ifdef _ALLOWINPUT  
  // Is there a message on the bus
  // add any incoming characters to the String:
  while (Serial.available() > 0) {
    1202:	8a ec       	ldi	r24, 0xCA	; 202
    1204:	96 e0       	ldi	r25, 0x06	; 6
    1206:	0e 94 0c 22 	call	0x4418	; 0x4418 <_ZN14HardwareSerial9availableEv>
    120a:	18 16       	cp	r1, r24
    120c:	19 06       	cpc	r1, r25
    120e:	84 f3       	brlt	.-32     	; 0x11f0 <loop+0x34>
    char inChar = Serial.read();
    txtMsg += inChar;
  }
  
  if(txtMsg.compareTo("") != 0) {
    1210:	ce 01       	movw	r24, r28
    1212:	0e 96       	adiw	r24, 0x0e	; 14
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	71 e0       	ldi	r23, 0x01	; 1
    1218:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
    121c:	ce 01       	movw	r24, r28
    121e:	45 96       	adiw	r24, 0x15	; 21
    1220:	be 01       	movw	r22, r28
    1222:	62 5f       	subi	r22, 0xF2	; 242
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <_ZNK6String9compareToERKS_>
    122a:	8c 01       	movw	r16, r24
    122c:	ce 01       	movw	r24, r28
    122e:	0e 96       	adiw	r24, 0x0e	; 14
    1230:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
    1234:	01 15       	cp	r16, r1
    1236:	11 05       	cpc	r17, r1
    1238:	21 f0       	breq	.+8      	; 0x1242 <loop+0x86>
	  parseSerialMessage(txtMsg);
    123a:	ce 01       	movw	r24, r28
    123c:	45 96       	adiw	r24, 0x15	; 21
    123e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_Z18parseSerialMessageRK6String>
  }
#endif

  // Check Failure
  if(currentMode != OFF && !ccFail) {  
    1242:	80 91 ee 05 	lds	r24, 0x05EE
    1246:	90 91 ef 05 	lds	r25, 0x05EF
    124a:	87 30       	cpi	r24, 0x07	; 7
    124c:	91 05       	cpc	r25, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <loop+0x96>
    1250:	f5 c0       	rjmp	.+490    	; 0x143c <loop+0x280>
    1252:	20 91 18 06 	lds	r18, 0x0618
    1256:	22 23       	and	r18, r18
    1258:	09 f0       	breq	.+2      	; 0x125c <loop+0xa0>
    125a:	f0 c0       	rjmp	.+480    	; 0x143c <loop+0x280>
    switch(currentMode) {
    125c:	86 30       	cpi	r24, 0x06	; 6
    125e:	91 05       	cpc	r25, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <loop+0xa8>
    1262:	ae c0       	rjmp	.+348    	; 0x13c0 <loop+0x204>
    1264:	87 30       	cpi	r24, 0x07	; 7
    1266:	91 05       	cpc	r25, r1
    1268:	bc f4       	brge	.+46     	; 0x1298 <loop+0xdc>
    126a:	82 30       	cpi	r24, 0x02	; 2
    126c:	91 05       	cpc	r25, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <loop+0xb6>
    1270:	61 c0       	rjmp	.+194    	; 0x1334 <loop+0x178>
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	3c f4       	brge	.+14     	; 0x1286 <loop+0xca>
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	59 f1       	breq	.+86     	; 0x12d2 <loop+0x116>
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	09 f0       	breq	.+2      	; 0x1284 <loop+0xc8>
    1282:	dc c0       	rjmp	.+440    	; 0x143c <loop+0x280>
    1284:	44 c0       	rjmp	.+136    	; 0x130e <loop+0x152>
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	91 05       	cpc	r25, r1
    128a:	09 f4       	brne	.+2      	; 0x128e <loop+0xd2>
    128c:	86 c0       	rjmp	.+268    	; 0x139a <loop+0x1de>
    128e:	85 30       	cpi	r24, 0x05	; 5
    1290:	91 05       	cpc	r25, r1
    1292:	0c f0       	brlt	.+2      	; 0x1296 <loop+0xda>
    1294:	85 c0       	rjmp	.+266    	; 0x13a0 <loop+0x1e4>
    1296:	6b c0       	rjmp	.+214    	; 0x136e <loop+0x1b2>
    1298:	8a 30       	cpi	r24, 0x0A	; 10
    129a:	91 05       	cpc	r25, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <loop+0xe4>
    129e:	72 c0       	rjmp	.+228    	; 0x1384 <loop+0x1c8>
    12a0:	8b 30       	cpi	r24, 0x0B	; 11
    12a2:	91 05       	cpc	r25, r1
    12a4:	4c f4       	brge	.+18     	; 0x12b8 <loop+0xfc>
    12a6:	88 30       	cpi	r24, 0x08	; 8
    12a8:	91 05       	cpc	r25, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <loop+0xf2>
    12ac:	9b c0       	rjmp	.+310    	; 0x13e4 <loop+0x228>
    12ae:	89 30       	cpi	r24, 0x09	; 9
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <loop+0xfa>
    12b4:	c3 c0       	rjmp	.+390    	; 0x143c <loop+0x280>
    12b6:	2b c0       	rjmp	.+86     	; 0x130e <loop+0x152>
    12b8:	8c 30       	cpi	r24, 0x0C	; 12
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <loop+0x104>
    12be:	75 c0       	rjmp	.+234    	; 0x13aa <loop+0x1ee>
    12c0:	8c 30       	cpi	r24, 0x0C	; 12
    12c2:	91 05       	cpc	r25, r1
    12c4:	0c f4       	brge	.+2      	; 0x12c8 <loop+0x10c>
    12c6:	69 c0       	rjmp	.+210    	; 0x139a <loop+0x1de>
    12c8:	8d 30       	cpi	r24, 0x0D	; 13
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <loop+0x114>
    12ce:	b6 c0       	rjmp	.+364    	; 0x143c <loop+0x280>
    12d0:	80 c0       	rjmp	.+256    	; 0x13d2 <loop+0x216>
      case ECU:
	  CanbusMessage::getEngineData(currentMonitorPid, engineData, HSCAN);	
    12d2:	80 91 f2 05 	lds	r24, 0x05F2
    12d6:	90 91 f3 05 	lds	r25, 0x05F3
    12da:	98 87       	std	Y+8, r25	; 0x08
    12dc:	8f 83       	std	Y+7, r24	; 0x07
    12de:	1e 82       	std	Y+6, r1	; 0x06
    12e0:	1d 82       	std	Y+5, r1	; 0x05
    12e2:	ce 01       	movw	r24, r28
    12e4:	07 96       	adiw	r24, 0x07	; 7
    12e6:	69 e1       	ldi	r22, 0x19	; 25
    12e8:	76 e0       	ldi	r23, 0x06	; 6
    12ea:	4c ee       	ldi	r20, 0xEC	; 236
    12ec:	55 e0       	ldi	r21, 0x05	; 5
    12ee:	9e 01       	movw	r18, r28
    12f0:	2b 5f       	subi	r18, 0xFB	; 251
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi>
	  LCDMethods::setLcdMessage(currentMonitorText, engineData, MSCAN, currentMode); 
    12f8:	84 ef       	ldi	r24, 0xF4	; 244
    12fa:	95 e0       	ldi	r25, 0x05	; 5
    12fc:	69 e1       	ldi	r22, 0x19	; 25
    12fe:	76 e0       	ldi	r23, 0x06	; 6
    1300:	4a ee       	ldi	r20, 0xEA	; 234
    1302:	55 e0       	ldi	r21, 0x05	; 5
    1304:	2e ee       	ldi	r18, 0xEE	; 238
    1306:	35 e0       	ldi	r19, 0x05	; 5
    1308:	0e 94 94 1a 	call	0x3528	; 0x3528 <_ZN10LCDMethods13setLcdMessageEPKcR6StringR7MCP2515RKi>
      break;
    130c:	97 c0       	rjmp	.+302    	; 0x143c <loop+0x280>
      
      case MILES_PER_GAL:
	  case AVG_MPG:
      if(CanbusMessage::getMilesPerGallon(engineData, avgMpg, currentMode, HSCAN, MSCAN)) {
    130e:	89 e1       	ldi	r24, 0x19	; 25
    1310:	96 e0       	ldi	r25, 0x06	; 6
    1312:	60 e2       	ldi	r22, 0x20	; 32
    1314:	76 e0       	ldi	r23, 0x06	; 6
    1316:	4e ee       	ldi	r20, 0xEE	; 238
    1318:	55 e0       	ldi	r21, 0x05	; 5
    131a:	2c ee       	ldi	r18, 0xEC	; 236
    131c:	35 e0       	ldi	r19, 0x05	; 5
    131e:	0a ee       	ldi	r16, 0xEA	; 234
    1320:	15 e0       	ldi	r17, 0x05	; 5
    1322:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_>
    1326:	88 23       	and	r24, r24
    1328:	09 f4       	brne	.+2      	; 0x132c <loop+0x170>
    132a:	88 c0       	rjmp	.+272    	; 0x143c <loop+0x280>
		  LCDMethods::setLcdMessage(engineData, MSCAN, currentMode);
    132c:	89 e1       	ldi	r24, 0x19	; 25
    132e:	96 e0       	ldi	r25, 0x06	; 6
    1330:	b8 01       	movw	r22, r16
    1332:	18 c0       	rjmp	.+48     	; 0x1364 <loop+0x1a8>
	  }
      break;
      
      case WHEEL_SPEED:
      if(CanbusMessage::getEngineData(ID_4B0, engineData, HSCAN)) {
    1334:	80 eb       	ldi	r24, 0xB0	; 176
    1336:	94 e0       	ldi	r25, 0x04	; 4
    1338:	9c 83       	std	Y+4, r25	; 0x04
    133a:	8b 83       	std	Y+3, r24	; 0x03
    133c:	1a 82       	std	Y+2, r1	; 0x02
    133e:	19 82       	std	Y+1, r1	; 0x01
    1340:	ce 01       	movw	r24, r28
    1342:	03 96       	adiw	r24, 0x03	; 3
    1344:	69 e1       	ldi	r22, 0x19	; 25
    1346:	76 e0       	ldi	r23, 0x06	; 6
    1348:	4c ee       	ldi	r20, 0xEC	; 236
    134a:	55 e0       	ldi	r21, 0x05	; 5
    134c:	9e 01       	movw	r18, r28
    134e:	2f 5f       	subi	r18, 0xFF	; 255
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi>
    1356:	88 23       	and	r24, r24
    1358:	09 f4       	brne	.+2      	; 0x135c <loop+0x1a0>
    135a:	70 c0       	rjmp	.+224    	; 0x143c <loop+0x280>
        LCDMethods::setLcdMessage(engineData, MSCAN, currentMode);
    135c:	89 e1       	ldi	r24, 0x19	; 25
    135e:	96 e0       	ldi	r25, 0x06	; 6
    1360:	6a ee       	ldi	r22, 0xEA	; 234
    1362:	75 e0       	ldi	r23, 0x05	; 5
    1364:	4e ee       	ldi	r20, 0xEE	; 238
    1366:	55 e0       	ldi	r21, 0x05	; 5
    1368:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN10LCDMethods13setLcdMessageER6StringR7MCP2515RKi>
    136c:	67 c0       	rjmp	.+206    	; 0x143c <loop+0x280>
      }
      break;
      
      case WHEEL_PSI:
      TPMSMethods::getWheelPSI(tireNumber, currentMode, MSCAN, HSCAN);
    136e:	8d eb       	ldi	r24, 0xBD	; 189
    1370:	93 e0       	ldi	r25, 0x03	; 3
    1372:	6e ee       	ldi	r22, 0xEE	; 238
    1374:	75 e0       	ldi	r23, 0x05	; 5
    1376:	4a ee       	ldi	r20, 0xEA	; 234
    1378:	55 e0       	ldi	r21, 0x05	; 5
    137a:	2c ee       	ldi	r18, 0xEC	; 236
    137c:	35 e0       	ldi	r19, 0x05	; 5
    137e:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <_ZN11TPMSMethods11getWheelPSIERKiS1_R7MCP2515S3_>
      break;
    1382:	5c c0       	rjmp	.+184    	; 0x143c <loop+0x280>
      
      case WHEEL_TEMP:
      TPMSMethods::getWheelTemp(tireNumber, currentMode, MSCAN, HSCAN);
    1384:	8d eb       	ldi	r24, 0xBD	; 189
    1386:	93 e0       	ldi	r25, 0x03	; 3
    1388:	6e ee       	ldi	r22, 0xEE	; 238
    138a:	75 e0       	ldi	r23, 0x05	; 5
    138c:	4a ee       	ldi	r20, 0xEA	; 234
    138e:	55 e0       	ldi	r21, 0x05	; 5
    1390:	2c ee       	ldi	r18, 0xEC	; 236
    1392:	35 e0       	ldi	r19, 0x05	; 5
    1394:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <_ZN11TPMSMethods12getWheelTempERKiS1_R7MCP2515S3_>
      break;
    1398:	51 c0       	rjmp	.+162    	; 0x143c <loop+0x280>
        
      case TEXT:
      case EDIT_TEXT:
      LCDMethods::setLcdMessage(dispText, MSCAN, currentMode);
    139a:	89 e0       	ldi	r24, 0x09	; 9
    139c:	96 e0       	ldi	r25, 0x06	; 6
    139e:	1b c0       	rjmp	.+54     	; 0x13d6 <loop+0x21a>
      break;
      
      case ASK_CLOCK:
	  ClockMethods::getInitialClock(MSCAN);
    13a0:	8a ee       	ldi	r24, 0xEA	; 234
    13a2:	95 e0       	ldi	r25, 0x05	; 5
    13a4:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <_ZN12ClockMethods15getInitialClockER7MCP2515>
	  break;
    13a8:	49 c0       	rjmp	.+146    	; 0x143c <loop+0x280>
	  
	  case SET_CLOCK:
	  ClockMethods::setClock(MSCAN);
    13aa:	8a ee       	ldi	r24, 0xEA	; 234
    13ac:	95 e0       	ldi	r25, 0x05	; 5
    13ae:	0e 94 e5 17 	call	0x2fca	; 0x2fca <_ZN12ClockMethods8setClockER7MCP2515>
      currentMode = ASK_CLOCK;
    13b2:	85 e0       	ldi	r24, 0x05	; 5
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	90 93 ef 05 	sts	0x05EF, r25
    13ba:	80 93 ee 05 	sts	0x05EE, r24
      break;
    13be:	3e c0       	rjmp	.+124    	; 0x143c <loop+0x280>
      
      case CEL:
	  MILMethods::getMILData(HSCAN, MSCAN, milCode);
    13c0:	8c ee       	ldi	r24, 0xEC	; 236
    13c2:	95 e0       	ldi	r25, 0x05	; 5
    13c4:	6a ee       	ldi	r22, 0xEA	; 234
    13c6:	75 e0       	ldi	r23, 0x05	; 5
    13c8:	4f eb       	ldi	r20, 0xBF	; 191
    13ca:	53 e0       	ldi	r21, 0x03	; 3
    13cc:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri>
      break;
    13d0:	35 c0       	rjmp	.+106    	; 0x143c <loop+0x280>
	  
	  case MIL_CLEAR:
	  LCDMethods::setLcdMessage("ClrMIL(DN)", MSCAN, currentMode);
    13d2:	81 e9       	ldi	r24, 0x91	; 145
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	6a ee       	ldi	r22, 0xEA	; 234
    13d8:	75 e0       	ldi	r23, 0x05	; 5
    13da:	4e ee       	ldi	r20, 0xEE	; 238
    13dc:	55 e0       	ldi	r21, 0x05	; 5
    13de:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi>
	  break;
    13e2:	2c c0       	rjmp	.+88     	; 0x143c <loop+0x280>
         
      case RESPONSE_TIME:
      char buf[5];
      sprintf(buf, "%d", customDelay);
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <loop+0x22a>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <loop+0x22c>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <loop+0x22e>
    13ea:	ed b7       	in	r30, 0x3d	; 61
    13ec:	fe b7       	in	r31, 0x3e	; 62
    13ee:	31 96       	adiw	r30, 0x01	; 1
    13f0:	8e 01       	movw	r16, r28
    13f2:	07 5f       	subi	r16, 0xF7	; 247
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	ad b7       	in	r26, 0x3d	; 61
    13f8:	be b7       	in	r27, 0x3e	; 62
    13fa:	12 96       	adiw	r26, 0x02	; 2
    13fc:	1c 93       	st	X, r17
    13fe:	0e 93       	st	-X, r16
    1400:	11 97       	sbiw	r26, 0x01	; 1
    1402:	8c e9       	ldi	r24, 0x9C	; 156
    1404:	93 e0       	ldi	r25, 0x03	; 3
    1406:	93 83       	std	Z+3, r25	; 0x03
    1408:	82 83       	std	Z+2, r24	; 0x02
    140a:	80 91 16 06 	lds	r24, 0x0616
    140e:	90 91 17 06 	lds	r25, 0x0617
    1412:	95 83       	std	Z+5, r25	; 0x05
    1414:	84 83       	std	Z+4, r24	; 0x04
    1416:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <sprintf>
      LCDMethods::setLcdMessage(buf, "ms.", MSCAN, currentMode);
    141a:	8d b7       	in	r24, 0x3d	; 61
    141c:	9e b7       	in	r25, 0x3e	; 62
    141e:	06 96       	adiw	r24, 0x06	; 6
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	9e bf       	out	0x3e, r25	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	8d bf       	out	0x3d, r24	; 61
    142a:	c8 01       	movw	r24, r16
    142c:	6f e9       	ldi	r22, 0x9F	; 159
    142e:	73 e0       	ldi	r23, 0x03	; 3
    1430:	4a ee       	ldi	r20, 0xEA	; 234
    1432:	55 e0       	ldi	r21, 0x05	; 5
    1434:	2e ee       	ldi	r18, 0xEE	; 238
    1436:	35 e0       	ldi	r19, 0x05	; 5
    1438:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN10LCDMethods13setLcdMessageEPKcS1_R7MCP2515RKi>
 * Standard Arduino loop method.  Loops application
 * indefinitely
 */
void loop(void)
{   
  String txtMsg = "";
    143c:	ce 01       	movw	r24, r28
    143e:	45 96       	adiw	r24, 0x15	; 21
    1440:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
      sprintf(buf, "%d", customDelay);
      LCDMethods::setLcdMessage(buf, "ms.", MSCAN, currentMode);
      break;
    }
  }
}
    1444:	6b 96       	adiw	r28, 0x1b	; 27
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	08 95       	ret

0000145c <_ZN8SPIClass8transferEh>:
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    145c:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & _BV(SPIF)))
    145e:	0d b4       	in	r0, 0x2d	; 45
    1460:	07 fe       	sbrs	r0, 7
    1462:	fd cf       	rjmp	.-6      	; 0x145e <_ZN8SPIClass8transferEh+0x2>
    ;
  return SPDR;
    1464:	8e b5       	in	r24, 0x2e	; 46
}
    1466:	08 95       	ret

00001468 <_ZN7MCP251510setCANBaudERKi>:
 * Set the CAN Baud Rate
 * @param	baudConst	The baud rate to set
 * @return				True if baud rate set
 */
boolean MCP2515::setCANBaud(const int& baudConst)
{
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	ec 01       	movw	r28, r24
  byte brp;
  
  //BRP<5:0> = 00h, so divisor (0+1)*2 for 125ns per quantum at 16MHz for 500K   
  //SJW<1:0> = 00h, Sync jump width = 1
  switch(baudConst)
    1470:	fb 01       	movw	r30, r22
    1472:	80 81       	ld	r24, Z
    1474:	91 81       	ldd	r25, Z+1	; 0x01
    1476:	84 30       	cpi	r24, 0x04	; 4
    1478:	91 05       	cpc	r25, r1
    147a:	71 f0       	breq	.+28     	; 0x1498 <_ZN7MCP251510setCANBaudERKi+0x30>
    147c:	85 30       	cpi	r24, 0x05	; 5
    147e:	91 05       	cpc	r25, r1
    1480:	24 f4       	brge	.+8      	; 0x148a <_ZN7MCP251510setCANBaudERKi+0x22>
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	91 05       	cpc	r25, r1
    1486:	61 f4       	brne	.+24     	; 0x14a0 <_ZN7MCP251510setCANBaudERKi+0x38>
    1488:	09 c0       	rjmp	.+18     	; 0x149c <_ZN7MCP251510setCANBaudERKi+0x34>
    148a:	85 30       	cpi	r24, 0x05	; 5
    148c:	91 05       	cpc	r25, r1
    148e:	91 f0       	breq	.+36     	; 0x14b4 <_ZN7MCP251510setCANBaudERKi+0x4c>
    1490:	86 30       	cpi	r24, 0x06	; 6
    1492:	91 05       	cpc	r25, r1
    1494:	29 f4       	brne	.+10     	; 0x14a0 <_ZN7MCP251510setCANBaudERKi+0x38>
    1496:	0c c0       	rjmp	.+24     	; 0x14b0 <_ZN7MCP251510setCANBaudERKi+0x48>
  {
    case CAN_BAUD_500K: brp = 0; break;
    case CAN_BAUD_250K: brp = 1; break;
    case CAN_BAUD_125K: brp = 3; break;
    1498:	13 e0       	ldi	r17, 0x03	; 3
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <_ZN7MCP251510setCANBaudERKi+0x4e>
    case CAN_BAUD_100K: brp = 4; break;
    149c:	14 e0       	ldi	r17, 0x04	; 4
    149e:	0b c0       	rjmp	.+22     	; 0x14b6 <_ZN7MCP251510setCANBaudERKi+0x4e>
    default: Serial.println("Non-Supported Baud Requested"); return false;
    14a0:	8a ec       	ldi	r24, 0xCA	; 202
    14a2:	96 e0       	ldi	r25, 0x06	; 6
    14a4:	62 ec       	ldi	r22, 0xC2	; 194
    14a6:	73 e0       	ldi	r23, 0x03	; 3
    14a8:	0e 94 84 24 	call	0x4908	; 0x4908 <_ZN5Print7printlnEPKc>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	37 c0       	rjmp	.+110    	; 0x151e <_ZN7MCP251510setCANBaudERKi+0xb6>
  
  //BRP<5:0> = 00h, so divisor (0+1)*2 for 125ns per quantum at 16MHz for 500K   
  //SJW<1:0> = 00h, Sync jump width = 1
  switch(baudConst)
  {
    case CAN_BAUD_500K: brp = 0; break;
    14b0:	10 e0       	ldi	r17, 0x00	; 0
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <_ZN7MCP251510setCANBaudERKi+0x4e>
    case CAN_BAUD_250K: brp = 1; break;
    14b4:	11 e0       	ldi	r17, 0x01	; 1
    case CAN_BAUD_125K: brp = 3; break;
    case CAN_BAUD_100K: brp = 4; break;
    default: Serial.println("Non-Supported Baud Requested"); return false;
  }
  
  digitalWrite(SLAVESELECT,LOW);
    14b6:	88 81       	ld	r24, Y
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  SPI.transfer(WRITE); 
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(CNF1);
    14c4:	8a e2       	ldi	r24, 0x2A	; 42
    14c6:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(brp & 0b00111111);
    14ca:	81 2f       	mov	r24, r17
    14cc:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  digitalWrite(SLAVESELECT,HIGH);  
    14d0:	88 81       	ld	r24, Y
    14d2:	61 e0       	ldi	r22, 0x01	; 1
    14d4:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  
  //PRSEG<2:0> = 0x01, 2 time quantum for prop
  //PHSEG<2:0> = 0x06, 7 time constants to PS1 sample
  //SAM = 0, just 1 sampling
  //BTLMODE = 1, PS2 determined by CNF3
  digitalWrite(SLAVESELECT,LOW);
    14d8:	88 81       	ld	r24, Y
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  SPI.transfer(WRITE); 
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(CNF2);
    14e6:	89 e2       	ldi	r24, 0x29	; 41
    14e8:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(0b10110001);
    14ec:	81 eb       	ldi	r24, 0xB1	; 177
    14ee:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  digitalWrite(SLAVESELECT,HIGH); 
    14f2:	88 81       	ld	r24, Y
    14f4:	61 e0       	ldi	r22, 0x01	; 1
    14f6:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  
  //PHSEG2<2:0> = 5 for 6 time constants after sample
  digitalWrite(SLAVESELECT,LOW);
    14fa:	88 81       	ld	r24, Y
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  SPI.transfer(WRITE); 
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(CNF3);
    1508:	88 e2       	ldi	r24, 0x28	; 40
    150a:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(0x05);
    150e:	85 e0       	ldi	r24, 0x05	; 5
    1510:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  digitalWrite(SLAVESELECT,HIGH); 
    1514:	88 81       	ld	r24, Y
    1516:	61 e0       	ldi	r22, 0x01	; 1
    1518:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  
  return true;
    151c:	81 e0       	ldi	r24, 0x01	; 1
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	08 95       	ret

00001526 <_ZN7MCP25158writeRegERKhS1_>:
 * Write a data byte to a register
 * @param	regno	The register to write to
 * @param	val		The byte to write to register
 */
void MCP2515::writeReg(const byte& regno, const byte& val)
{
    1526:	ef 92       	push	r14
    1528:	ff 92       	push	r15
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	ec 01       	movw	r28, r24
    1534:	7b 01       	movw	r14, r22
    1536:	8a 01       	movw	r16, r20
  digitalWrite(SLAVESELECT,LOW);
    1538:	88 81       	ld	r24, Y
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  SPI.transfer(WRITE); 
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(regno);
    1546:	f7 01       	movw	r30, r14
    1548:	80 81       	ld	r24, Z
    154a:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(val);
    154e:	f8 01       	movw	r30, r16
    1550:	80 81       	ld	r24, Z
    1552:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  digitalWrite(SLAVESELECT,HIGH);  
    1556:	88 81       	ld	r24, Y
    1558:	61 e0       	ldi	r22, 0x01	; 1
    155a:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	08 95       	ret

0000156c <_ZN7MCP251511writeRegBitERKhS1_S1_>:
 * @param	regno	Register to modify
 * @param	bitno	Bit in register to modify
 * @param   val		The byte to set
 */
void MCP2515::writeRegBit(const byte& regno, const byte& bitno, const byte& val)
{
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	8c 01       	movw	r16, r24
    157e:	eb 01       	movw	r28, r22
    1580:	6a 01       	movw	r12, r20
    1582:	79 01       	movw	r14, r18
  digitalWrite(SLAVESELECT,LOW);
    1584:	fc 01       	movw	r30, r24
    1586:	80 81       	ld	r24, Z
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  SPI.transfer(BIT_MODIFY); 
    158e:	85 e0       	ldi	r24, 0x05	; 5
    1590:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(regno);
    1594:	88 81       	ld	r24, Y
    1596:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(1 << bitno);
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	f6 01       	movw	r30, r12
    15a0:	00 80       	ld	r0, Z
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <_ZN7MCP251511writeRegBitERKhS1_S1_+0x3c>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <_ZN7MCP251511writeRegBitERKhS1_S1_+0x38>
    15ac:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  if(val != 0)
    15b0:	f7 01       	movw	r30, r14
    15b2:	80 81       	ld	r24, Z
    15b4:	88 23       	and	r24, r24
    15b6:	11 f0       	breq	.+4      	; 0x15bc <_ZN7MCP251511writeRegBitERKhS1_S1_+0x50>
    SPI.transfer(0xff);
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <_ZN7MCP251511writeRegBitERKhS1_S1_+0x52>
  else
    SPI.transfer(0x00);
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  digitalWrite(SLAVESELECT,HIGH);
    15c2:	f8 01       	movw	r30, r16
    15c4:	80 81       	ld	r24, Z
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
}
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	08 95       	ret

000015de <_ZN7MCP25157readRegERKh>:
 * Read the value of a register
 * @param	regno	The register to read
 * @return			The byte value of the register
 */
byte MCP2515::readReg(const byte& regno)
{
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	8c 01       	movw	r16, r24
    15e8:	eb 01       	movw	r28, r22
  byte val;
  
  digitalWrite(SLAVESELECT,LOW);
    15ea:	fc 01       	movw	r30, r24
    15ec:	80 81       	ld	r24, Z
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  SPI.transfer(READ); 
    15f4:	83 e0       	ldi	r24, 0x03	; 3
    15f6:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(regno);
    15fa:	88 81       	ld	r24, Y
    15fc:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  val = SPI.transfer(0);
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
    1606:	c8 2f       	mov	r28, r24
  digitalWrite(SLAVESELECT,HIGH);
    1608:	f8 01       	movw	r30, r16
    160a:	80 81       	ld	r24, Z
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  
  return val;  
}  
    1612:	8c 2f       	mov	r24, r28
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	08 95       	ret

0000161e <_ZN7MCP251514getCANRxErrCntEv>:
/** 
 * Get the receive error count
 * @return	Total errors thrown on receive
 */
byte MCP2515::getCANRxErrCnt()
{
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	0f 92       	push	r0
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
  return(readReg(REC));
    1628:	2d e1       	ldi	r18, 0x1D	; 29
    162a:	29 83       	std	Y+1, r18	; 0x01
    162c:	be 01       	movw	r22, r28
    162e:	6f 5f       	subi	r22, 0xFF	; 255
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MCP25157readRegERKh>
}
    1636:	0f 90       	pop	r0
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <_ZN7MCP251514getCANTxErrCntEv>:
/** 
 * Get the transmission error count
 * @return	Total errors thrown on transmission
 */
byte MCP2515::getCANTxErrCnt()
{
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	0f 92       	push	r0
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
  return(readReg(TEC));
    1648:	2c e1       	ldi	r18, 0x1C	; 28
    164a:	29 83       	std	Y+1, r18	; 0x01
    164c:	be 01       	movw	r22, r28
    164e:	6f 5f       	subi	r22, 0xFF	; 255
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MCP25157readRegERKh>
}
    1656:	0f 90       	pop	r0
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <_ZN7MCP251518transmitCANMessageER5FrameRKm>:
 * @param	msg		The message structure to send
 * @param	timeout	Timeout for the message transmission
 * @return			True if message transmitted successfully
 */
boolean MCP2515::transmitCANMessage(Frame& msg, const unsigned long& timeout)
{
    165e:	8f 92       	push	r8
    1660:	9f 92       	push	r9
    1662:	af 92       	push	r10
    1664:	bf 92       	push	r11
    1666:	cf 92       	push	r12
    1668:	df 92       	push	r13
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	64 97       	sbiw	r28, 0x14	; 20
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	6c 01       	movw	r12, r24
    1688:	7b 01       	movw	r14, r22
    168a:	8a 01       	movw	r16, r20
  boolean sentMessage = false;
  unsigned short val;
  
  // get our end time
  unsigned long endTime = millis() + timeout;
    168c:	0e 94 61 20 	call	0x40c2	; 0x40c2 <millis>
    1690:	4b 01       	movw	r8, r22
    1692:	5c 01       	movw	r10, r24
    1694:	f8 01       	movw	r30, r16
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	a2 81       	ldd	r26, Z+2	; 0x02
    169c:	b3 81       	ldd	r27, Z+3	; 0x03
    169e:	88 0e       	add	r8, r24
    16a0:	99 1e       	adc	r9, r25
    16a2:	aa 1e       	adc	r10, r26
    16a4:	bb 1e       	adc	r11, r27

  // Read the address of the message we are about
  // to send
  val = msg.adrsValue >> 3;
    16a6:	f7 01       	movw	r30, r14
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	23 e0       	ldi	r18, 0x03	; 3
    16ae:	96 95       	lsr	r25
    16b0:	87 95       	ror	r24
    16b2:	2a 95       	dec	r18
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <_ZN7MCP251518transmitCANMessageER5FrameRKm+0x50>
  writeReg(TXB0SIDH,val);
    16b6:	91 e3       	ldi	r25, 0x31	; 49
    16b8:	9c 8b       	std	Y+20, r25	; 0x14
    16ba:	8b 8b       	std	Y+19, r24	; 0x13
    16bc:	c6 01       	movw	r24, r12
    16be:	be 01       	movw	r22, r28
    16c0:	6c 5e       	subi	r22, 0xEC	; 236
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	ae 01       	movw	r20, r28
    16c6:	4d 5e       	subi	r20, 0xED	; 237
    16c8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ca:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN7MCP25158writeRegERKhS1_>
  
  // Next, check to see if the message is an extended
  // message, if it is, shift so that we can get the 
  // lower bytes of the address
  val = msg.adrsValue << 5;
    16ce:	f7 01       	movw	r30, r14
    16d0:	80 81       	ld	r24, Z
    16d2:	91 81       	ldd	r25, Z+1	; 0x01
    16d4:	35 e0       	ldi	r19, 0x05	; 5
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	3a 95       	dec	r19
    16dc:	e1 f7       	brne	.-8      	; 0x16d6 <_ZN7MCP251518transmitCANMessageER5FrameRKm+0x78>
  if(msg.isExtendedAdrs)
    16de:	22 81       	ldd	r18, Z+2	; 0x02
    16e0:	21 11       	cpse	r18, r1
    val |= 1 << EXIDE;
    16e2:	88 60       	ori	r24, 0x08	; 8
  writeReg(TXB0SIDL,val);
    16e4:	92 e3       	ldi	r25, 0x32	; 50
    16e6:	9a 8b       	std	Y+18, r25	; 0x12
    16e8:	89 8b       	std	Y+17, r24	; 0x11
    16ea:	c6 01       	movw	r24, r12
    16ec:	be 01       	movw	r22, r28
    16ee:	6e 5e       	subi	r22, 0xEE	; 238
    16f0:	7f 4f       	sbci	r23, 0xFF	; 255
    16f2:	ae 01       	movw	r20, r28
    16f4:	4f 5e       	subi	r20, 0xEF	; 239
    16f6:	5f 4f       	sbci	r21, 0xFF	; 255
    16f8:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN7MCP25158writeRegERKhS1_>
  
  // Was the message extended?  If so, store the message
  // in the extended register
  if(msg.isExtendedAdrs)
    16fc:	f7 01       	movw	r30, r14
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	88 23       	and	r24, r24
    1702:	d9 f0       	breq	.+54     	; 0x173a <_ZN7MCP251518transmitCANMessageER5FrameRKm+0xdc>
  {
    val = msg.extendedAdrsValue >> 8;
    1704:	84 81       	ldd	r24, Z+4	; 0x04
    writeReg(TXB0EID8,val);
    1706:	93 e3       	ldi	r25, 0x33	; 51
    1708:	98 8b       	std	Y+16, r25	; 0x10
    170a:	8f 87       	std	Y+15, r24	; 0x0f
    170c:	c6 01       	movw	r24, r12
    170e:	be 01       	movw	r22, r28
    1710:	60 5f       	subi	r22, 0xF0	; 240
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	ae 01       	movw	r20, r28
    1716:	41 5f       	subi	r20, 0xF1	; 241
    1718:	5f 4f       	sbci	r21, 0xFF	; 255
    171a:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN7MCP25158writeRegERKhS1_>
    val = msg.extendedAdrsValue;
    171e:	f7 01       	movw	r30, r14
    1720:	83 81       	ldd	r24, Z+3	; 0x03
    writeReg(TXB0EID0,val);
    1722:	94 e3       	ldi	r25, 0x34	; 52
    1724:	9e 87       	std	Y+14, r25	; 0x0e
    1726:	8d 87       	std	Y+13, r24	; 0x0d
    1728:	c6 01       	movw	r24, r12
    172a:	be 01       	movw	r22, r28
    172c:	62 5f       	subi	r22, 0xF2	; 242
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	ae 01       	movw	r20, r28
    1732:	43 5f       	subi	r20, 0xF3	; 243
    1734:	5f 4f       	sbci	r21, 0xFF	; 255
    1736:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN7MCP25158writeRegERKhS1_>
  }
  
  // Set the DLC register with the value of the RTR
  val = msg.dataLength & 0x0f;
    173a:	f7 01       	movw	r30, r14
    173c:	80 85       	ldd	r24, Z+8	; 0x08
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	8f 70       	andi	r24, 0x0F	; 15
    1742:	90 70       	andi	r25, 0x00	; 0
  if(msg.rtr)
    1744:	27 81       	ldd	r18, Z+7	; 0x07
    1746:	21 11       	cpse	r18, r1
    bitWrite(val,TXRTR,1);
    1748:	80 68       	ori	r24, 0x80	; 128
  writeReg(TXB0DLC,val);
    174a:	95 e3       	ldi	r25, 0x35	; 53
    174c:	9c 87       	std	Y+12, r25	; 0x0c
    174e:	8b 87       	std	Y+11, r24	; 0x0b
    1750:	c6 01       	movw	r24, r12
    1752:	be 01       	movw	r22, r28
    1754:	64 5f       	subi	r22, 0xF4	; 244
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	ae 01       	movw	r20, r28
    175a:	45 5f       	subi	r20, 0xF5	; 245
    175c:	5f 4f       	sbci	r21, 0xFF	; 255
    175e:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN7MCP25158writeRegERKhS1_>
  
  // Set the message bytes
  digitalWrite(SLAVESELECT,LOW);
    1762:	f6 01       	movw	r30, r12
    1764:	80 81       	ld	r24, Z
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  SPI.transfer(WRITE); 
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  SPI.transfer(TXB0D0);
    1772:	86 e3       	ldi	r24, 0x36	; 54
    1774:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  for(int i = 0; i < msg.dataLength; i++)
    1778:	00 e0       	ldi	r16, 0x00	; 0
    177a:	10 e0       	ldi	r17, 0x00	; 0
    177c:	08 c0       	rjmp	.+16     	; 0x178e <_ZN7MCP251518transmitCANMessageER5FrameRKm+0x130>
 * Transmit a CAN message across the bus
 * @param	msg		The message structure to send
 * @param	timeout	Timeout for the message transmission
 * @return			True if message transmitted successfully
 */
boolean MCP2515::transmitCANMessage(Frame& msg, const unsigned long& timeout)
    177e:	f7 01       	movw	r30, r14
    1780:	e0 0f       	add	r30, r16
    1782:	f1 1f       	adc	r31, r17
  // Set the message bytes
  digitalWrite(SLAVESELECT,LOW);
  SPI.transfer(WRITE); 
  SPI.transfer(TXB0D0);
  for(int i = 0; i < msg.dataLength; i++)
    SPI.transfer(msg.data[i]);
    1784:	81 85       	ldd	r24, Z+9	; 0x09
    1786:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  
  // Set the message bytes
  digitalWrite(SLAVESELECT,LOW);
  SPI.transfer(WRITE); 
  SPI.transfer(TXB0D0);
  for(int i = 0; i < msg.dataLength; i++)
    178a:	0f 5f       	subi	r16, 0xFF	; 255
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	f7 01       	movw	r30, r14
    1790:	80 85       	ldd	r24, Z+8	; 0x08
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	08 17       	cp	r16, r24
    1796:	19 07       	cpc	r17, r25
    1798:	94 f3       	brlt	.-28     	; 0x177e <_ZN7MCP251518transmitCANMessageER5FrameRKm+0x120>
    SPI.transfer(msg.data[i]);
  digitalWrite(SLAVESELECT,HIGH);
    179a:	f6 01       	movw	r30, r12
    179c:	80 81       	ld	r24, Z
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>

  // Transmit the message
  writeRegBit(TXB0CTRL,TXREQ,1);
    17a4:	80 e3       	ldi	r24, 0x30	; 48
    17a6:	8a 87       	std	Y+10, r24	; 0x0a
    17a8:	83 e0       	ldi	r24, 0x03	; 3
    17aa:	89 87       	std	Y+9, r24	; 0x09
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	88 87       	std	Y+8, r24	; 0x08
    17b0:	c6 01       	movw	r24, r12
    17b2:	be 01       	movw	r22, r28
    17b4:	66 5f       	subi	r22, 0xF6	; 246
    17b6:	7f 4f       	sbci	r23, 0xFF	; 255
    17b8:	ae 01       	movw	r20, r28
    17ba:	47 5f       	subi	r20, 0xF7	; 247
    17bc:	5f 4f       	sbci	r21, 0xFF	; 255
    17be:	9e 01       	movw	r18, r28
    17c0:	28 5f       	subi	r18, 0xF8	; 248
    17c2:	3f 4f       	sbci	r19, 0xFF	; 255
    17c4:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN7MCP251511writeRegBitERKhS1_S1_>

  // As long as we haven't reached out timeout submit the
  // message and retry until the message is sent
  while(millis() < endTime)
  {
    val = readReg(CANINTF);
    17c8:	0c e2       	ldi	r16, 0x2C	; 44
  // Transmit the message
  writeRegBit(TXB0CTRL,TXREQ,1);

  // As long as we haven't reached out timeout submit the
  // message and retry until the message is sent
  while(millis() < endTime)
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <_ZN7MCP251518transmitCANMessageER5FrameRKm+0x180>
  {
    val = readReg(CANINTF);
    17cc:	0f 83       	std	Y+7, r16	; 0x07
    17ce:	c6 01       	movw	r24, r12
    17d0:	be 01       	movw	r22, r28
    17d2:	69 5f       	subi	r22, 0xF9	; 249
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MCP25157readRegERKh>
    if(bitRead(val,TX0IF) == 1)
    17da:	82 fd       	sbrc	r24, 2
    17dc:	0b c0       	rjmp	.+22     	; 0x17f4 <_ZN7MCP251518transmitCANMessageER5FrameRKm+0x196>
  // Transmit the message
  writeRegBit(TXB0CTRL,TXREQ,1);

  // As long as we haven't reached out timeout submit the
  // message and retry until the message is sent
  while(millis() < endTime)
    17de:	0e 94 61 20 	call	0x40c2	; 0x40c2 <millis>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	88 15       	cp	r24, r8
    17e8:	99 05       	cpc	r25, r9
    17ea:	aa 05       	cpc	r26, r10
    17ec:	bb 05       	cpc	r27, r11
    17ee:	70 f3       	brcs	.-36     	; 0x17cc <_ZN7MCP251518transmitCANMessageER5FrameRKm+0x16e>
 * @param	timeout	Timeout for the message transmission
 * @return			True if message transmitted successfully
 */
boolean MCP2515::transmitCANMessage(Frame& msg, const unsigned long& timeout)
{
  boolean sentMessage = false;
    17f0:	00 e0       	ldi	r16, 0x00	; 0
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <_ZN7MCP251518transmitCANMessageER5FrameRKm+0x198>
  while(millis() < endTime)
  {
    val = readReg(CANINTF);
    if(bitRead(val,TX0IF) == 1)
    {
      sentMessage = true;
    17f4:	01 e0       	ldi	r16, 0x01	; 1
      break;
    }
  }

  //Abort the send if failed
  writeRegBit(TXB0CTRL,TXREQ,0);
    17f6:	80 e3       	ldi	r24, 0x30	; 48
    17f8:	8e 83       	std	Y+6, r24	; 0x06
    17fa:	83 e0       	ldi	r24, 0x03	; 3
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	1c 82       	std	Y+4, r1	; 0x04
    1800:	c6 01       	movw	r24, r12
    1802:	be 01       	movw	r22, r28
    1804:	6a 5f       	subi	r22, 0xFA	; 250
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	ae 01       	movw	r20, r28
    180a:	4b 5f       	subi	r20, 0xFB	; 251
    180c:	5f 4f       	sbci	r21, 0xFF	; 255
    180e:	9e 01       	movw	r18, r28
    1810:	2c 5f       	subi	r18, 0xFC	; 252
    1812:	3f 4f       	sbci	r19, 0xFF	; 255
    1814:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN7MCP251511writeRegBitERKhS1_S1_>
  
  //And clear write interrupt
  writeRegBit(CANINTF,TX0IF,0);
    1818:	8c e2       	ldi	r24, 0x2C	; 44
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	8a 83       	std	Y+2, r24	; 0x02
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	c6 01       	movw	r24, r12
    1824:	be 01       	movw	r22, r28
    1826:	6d 5f       	subi	r22, 0xFD	; 253
    1828:	7f 4f       	sbci	r23, 0xFF	; 255
    182a:	ae 01       	movw	r20, r28
    182c:	4e 5f       	subi	r20, 0xFE	; 254
    182e:	5f 4f       	sbci	r21, 0xFF	; 255
    1830:	9e 01       	movw	r18, r28
    1832:	2f 5f       	subi	r18, 0xFF	; 255
    1834:	3f 4f       	sbci	r19, 0xFF	; 255
    1836:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN7MCP251511writeRegBitERKhS1_S1_>

  return sentMessage;
}
    183a:	80 2f       	mov	r24, r16
    183c:	64 96       	adiw	r28, 0x14	; 20
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	08 95       	ret

00001862 <_ZN7MCP251517receiveCANMessageER5FrameRKm>:
 * @param	msg		Structure to store the received data from
 * @param	timeout	Timeout for a response
 * @return			True if a message was read
 */
boolean MCP2515::receiveCANMessage(Frame& msg, const unsigned long& timeout)
{
    1862:	8f 92       	push	r8
    1864:	9f 92       	push	r9
    1866:	af 92       	push	r10
    1868:	bf 92       	push	r11
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	00 d0       	rcall	.+0      	; 0x187c <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x1a>
    187c:	0f 92       	push	r0
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	4c 01       	movw	r8, r24
    1884:	5b 01       	movw	r10, r22
    1886:	8a 01       	movw	r16, r20
    boolean msgRxd;
    byte readVal;
    int byteIndex;
    
	// Define our end time by adding our timeout to the current time  
    endTime = millis() + timeout;
    1888:	0e 94 61 20 	call	0x40c2	; 0x40c2 <millis>
    188c:	6b 01       	movw	r12, r22
    188e:	7c 01       	movw	r14, r24
    1890:	f8 01       	movw	r30, r16
    1892:	80 81       	ld	r24, Z
    1894:	91 81       	ldd	r25, Z+1	; 0x01
    1896:	a2 81       	ldd	r26, Z+2	; 0x02
    1898:	b3 81       	ldd	r27, Z+3	; 0x03
    189a:	c8 0e       	add	r12, r24
    189c:	d9 1e       	adc	r13, r25
    189e:	ea 1e       	adc	r14, r26
    18a0:	fb 1e       	adc	r15, r27
    msgRxd = true;
    msgInB0 = false;
    msgInB1 = false;
    
    //Wait for data to be received in either buffer
    while (millis() < endTime) {
    18a2:	0e 94 61 20 	call	0x40c2	; 0x40c2 <millis>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	8c 15       	cp	r24, r12
    18ac:	9d 05       	cpc	r25, r13
    18ae:	ae 05       	cpc	r26, r14
    18b0:	bf 05       	cpc	r27, r15
    18b2:	08 f0       	brcs	.+2      	; 0x18b6 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x54>
    18b4:	b9 c0       	rjmp	.+370    	; 0x1a28 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x1c6>
        readVal = readReg(CANINTF);
    18b6:	8c e2       	ldi	r24, 0x2C	; 44
    18b8:	8b 83       	std	Y+3, r24	; 0x03
    18ba:	c4 01       	movw	r24, r8
    18bc:	be 01       	movw	r22, r28
    18be:	6d 5f       	subi	r22, 0xFD	; 253
    18c0:	7f 4f       	sbci	r23, 0xFF	; 255
    18c2:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MCP25157readRegERKh>
        
		// Check what buffer we got the information from
        if (bitRead(readVal, RX0IF) == 1) {
    18c6:	80 fd       	sbrc	r24, 0
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x70>
            msgInB0 = true;
            break;
        } else if (bitRead(readVal, RX1IF) == 1) {
    18ca:	81 fd       	sbrc	r24, 1
    18cc:	af c0       	rjmp	.+350    	; 0x1a2c <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x1ca>
            msgInB1 = true;
            break;
        } else {
			msgRxd = false;
			return false;
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	9b c0       	rjmp	.+310    	; 0x1a08 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x1a6>
    }
    
    if (msgRxd) {
        //Was this data requested, is Remote Transmission Request (RTR) set?
        if (msgInB0) {
            readVal = readReg(RXB0CTRL);
    18d2:	80 e6       	ldi	r24, 0x60	; 96
    18d4:	8a 83       	std	Y+2, r24	; 0x02
    18d6:	c4 01       	movw	r24, r8
    18d8:	be 01       	movw	r22, r28
    18da:	6e 5f       	subi	r22, 0xFE	; 254
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MCP25157readRegERKh>
    endTime = millis() + timeout;
	
	// By default, we expect that we got a message
    msgRxd = true;
    msgInB0 = false;
    msgInB1 = false;
    18e2:	00 e0       	ldi	r16, 0x00	; 0
    while (millis() < endTime) {
        readVal = readReg(CANINTF);
        
		// Check what buffer we got the information from
        if (bitRead(readVal, RX0IF) == 1) {
            msgInB0 = true;
    18e4:	11 e0       	ldi	r17, 0x01	; 1
            readVal = readReg(RXB0CTRL);
        } else {
            readVal = readReg(RXB1CTRL);
        }
		
        msg.rtr = ((bitRead(readVal,3) == 1) ? true : false);
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	83 ff       	sbrs	r24, 3
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	f5 01       	movw	r30, r10
    18ee:	97 83       	std	Z+7, r25	; 0x07
        
        // Start receiving buffer 0 from the SID high byte if
		// a message came from there, if not, read from the RX 1
		// SID high byte
        digitalWrite(SLAVESELECT,LOW);
    18f0:	f4 01       	movw	r30, r8
    18f2:	80 81       	ld	r24, Z
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
        
        if (msgInB0) {
    18fa:	11 23       	and	r17, r17
    18fc:	11 f0       	breq	.+4      	; 0x1902 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0xa0>
            SPI.transfer(READ_RX_BUFFER | READ_RX_0_SIDH);
    18fe:	80 e9       	ldi	r24, 0x90	; 144
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0xa6>
        } else if (msgInB1) {
    1902:	00 23       	and	r16, r16
    1904:	19 f0       	breq	.+6      	; 0x190c <_ZN7MCP251517receiveCANMessageER5FrameRKm+0xaa>
            SPI.transfer(READ_RX_BUFFER | READ_RX_1_SIDH);
    1906:	84 e9       	ldi	r24, 0x94	; 148
    1908:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
        }
        
        // Read the response address from the bus
        msg.adrsValue = 0;
    190c:	f5 01       	movw	r30, r10
    190e:	11 82       	std	Z+1, r1	; 0x01
    1910:	10 82       	st	Z, r1
        readVal = SPI.transfer(0);
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
        msg.adrsValue = (readVal << 3);
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	43 e0       	ldi	r20, 0x03	; 3
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	4a 95       	dec	r20
    1922:	e1 f7       	brne	.-8      	; 0x191c <_ZN7MCP251517receiveCANMessageER5FrameRKm+0xba>
    1924:	f5 01       	movw	r30, r10
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	80 83       	st	Z, r24
        readVal = SPI.transfer(0);
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
        msg.adrsValue |= (readVal >> 5);
    1930:	48 2f       	mov	r20, r24
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	9a 01       	movw	r18, r20
    1936:	65 e0       	ldi	r22, 0x05	; 5
    1938:	35 95       	asr	r19
    193a:	27 95       	ror	r18
    193c:	6a 95       	dec	r22
    193e:	e1 f7       	brne	.-8      	; 0x1938 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0xd6>
    1940:	f5 01       	movw	r30, r10
    1942:	80 81       	ld	r24, Z
    1944:	91 81       	ldd	r25, Z+1	; 0x01
    1946:	82 2b       	or	r24, r18
    1948:	93 2b       	or	r25, r19
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	80 83       	st	Z, r24
        
        // Check if the message returned is an extended CAN message,
		// if so, read the rest of the message
        msg.isExtendedAdrs = ((bitRead(readVal,EXIDE) == 1) ? true : false);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	43 ff       	sbrs	r20, 3
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	f5 01       	movw	r30, r10
    1956:	82 83       	std	Z+2, r24	; 0x02
        msg.extendedAdrsValue = 0;
    1958:	13 82       	std	Z+3, r1	; 0x03
    195a:	14 82       	std	Z+4, r1	; 0x04
    195c:	15 82       	std	Z+5, r1	; 0x05
    195e:	16 82       	std	Z+6, r1	; 0x06
        if (msg.isExtendedAdrs) {
    1960:	88 23       	and	r24, r24
    1962:	51 f1       	breq	.+84     	; 0x19b8 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x156>
            msg.extendedAdrsValue = (readVal & 0x03) << 16;
            readVal = SPI.transfer(0);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
            msg.extendedAdrsValue |= (readVal << 8);
    196a:	58 2f       	mov	r21, r24
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	66 27       	eor	r22, r22
    1970:	57 fd       	sbrc	r21, 7
    1972:	60 95       	com	r22
    1974:	76 2f       	mov	r23, r22
    1976:	f5 01       	movw	r30, r10
    1978:	83 81       	ldd	r24, Z+3	; 0x03
    197a:	94 81       	ldd	r25, Z+4	; 0x04
    197c:	a5 81       	ldd	r26, Z+5	; 0x05
    197e:	b6 81       	ldd	r27, Z+6	; 0x06
    1980:	84 2b       	or	r24, r20
    1982:	95 2b       	or	r25, r21
    1984:	a6 2b       	or	r26, r22
    1986:	b7 2b       	or	r27, r23
    1988:	83 83       	std	Z+3, r24	; 0x03
    198a:	94 83       	std	Z+4, r25	; 0x04
    198c:	a5 83       	std	Z+5, r26	; 0x05
    198e:	b6 83       	std	Z+6, r27	; 0x06
			readVal = SPI.transfer(0);
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
			msg.extendedAdrsValue |= readVal;
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 e0       	ldi	r26, 0x00	; 0
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	f5 01       	movw	r30, r10
    199e:	43 81       	ldd	r20, Z+3	; 0x03
    19a0:	54 81       	ldd	r21, Z+4	; 0x04
    19a2:	65 81       	ldd	r22, Z+5	; 0x05
    19a4:	76 81       	ldd	r23, Z+6	; 0x06
    19a6:	48 2b       	or	r20, r24
    19a8:	59 2b       	or	r21, r25
    19aa:	6a 2b       	or	r22, r26
    19ac:	7b 2b       	or	r23, r27
    19ae:	43 83       	std	Z+3, r20	; 0x03
    19b0:	54 83       	std	Z+4, r21	; 0x04
    19b2:	65 83       	std	Z+5, r22	; 0x05
    19b4:	76 83       	std	Z+6, r23	; 0x06
    19b6:	06 c0       	rjmp	.+12     	; 0x19c4 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x162>
        } else {
            SPI.transfer(0);
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
            SPI.transfer(0);
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
        }
        
        //Get the number of bytes received        
        readVal = SPI.transfer(0);
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
        msg.dataLength = (readVal & 0x0F); 
    19ca:	8f 70       	andi	r24, 0x0F	; 15
    19cc:	f5 01       	movw	r30, r10
    19ce:	80 87       	std	Z+8, r24	; 0x08
        if (msg.dataLength > 8) {
    19d0:	89 30       	cpi	r24, 0x09	; 9
    19d2:	10 f0       	brcs	.+4      	; 0x19d8 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x176>
            msg.dataLength = 8;
    19d4:	88 e0       	ldi	r24, 0x08	; 8
    19d6:	80 87       	std	Z+8, r24	; 0x08
    if (msgRxd) {
        //Was this data requested, is Remote Transmission Request (RTR) set?
        if (msgInB0) {
            readVal = readReg(RXB0CTRL);
        } else {
            readVal = readReg(RXB1CTRL);
    19d8:	00 e0       	ldi	r16, 0x00	; 0
    19da:	10 e0       	ldi	r17, 0x00	; 0
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x18e>
            msg.dataLength = 8;
        }
        
        //Read the actual data
        for (byteIndex = 0; byteIndex < msg.dataLength; byteIndex++) {
            msg.data[byteIndex] = SPI.transfer(0);
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
 * Receive a message from the MCP2515
 * @param	msg		Structure to store the received data from
 * @param	timeout	Timeout for a response
 * @return			True if a message was read
 */
boolean MCP2515::receiveCANMessage(Frame& msg, const unsigned long& timeout)
    19e4:	f5 01       	movw	r30, r10
    19e6:	e0 0f       	add	r30, r16
    19e8:	f1 1f       	adc	r31, r17
            msg.dataLength = 8;
        }
        
        //Read the actual data
        for (byteIndex = 0; byteIndex < msg.dataLength; byteIndex++) {
            msg.data[byteIndex] = SPI.transfer(0);
    19ea:	81 87       	std	Z+9, r24	; 0x09
        if (msg.dataLength > 8) {
            msg.dataLength = 8;
        }
        
        //Read the actual data
        for (byteIndex = 0; byteIndex < msg.dataLength; byteIndex++) {
    19ec:	0f 5f       	subi	r16, 0xFF	; 255
    19ee:	1f 4f       	sbci	r17, 0xFF	; 255
    19f0:	f5 01       	movw	r30, r10
    19f2:	80 85       	ldd	r24, Z+8	; 0x08
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	08 17       	cp	r16, r24
    19f8:	19 07       	cpc	r17, r25
    19fa:	8c f3       	brlt	.-30     	; 0x19de <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x17c>
            msg.data[byteIndex] = SPI.transfer(0);
        }
        
        //End the communication with the chip. No need to reset the RXIF.
        digitalWrite(SLAVESELECT,HIGH);
    19fc:	f4 01       	movw	r30, r8
    19fe:	80 81       	ld	r24, Z
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
    }
    
    return msgRxd;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	df 90       	pop	r13
    1a1c:	cf 90       	pop	r12
    1a1e:	bf 90       	pop	r11
    1a20:	af 90       	pop	r10
    1a22:	9f 90       	pop	r9
    1a24:	8f 90       	pop	r8
    1a26:	08 95       	ret
    endTime = millis() + timeout;
	
	// By default, we expect that we got a message
    msgRxd = true;
    msgInB0 = false;
    msgInB1 = false;
    1a28:	00 e0       	ldi	r16, 0x00	; 0
    1a2a:	01 c0       	rjmp	.+2      	; 0x1a2e <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x1cc>
		// Check what buffer we got the information from
        if (bitRead(readVal, RX0IF) == 1) {
            msgInB0 = true;
            break;
        } else if (bitRead(readVal, RX1IF) == 1) {
            msgInB1 = true;
    1a2c:	01 e0       	ldi	r16, 0x01	; 1
    if (msgRxd) {
        //Was this data requested, is Remote Transmission Request (RTR) set?
        if (msgInB0) {
            readVal = readReg(RXB0CTRL);
        } else {
            readVal = readReg(RXB1CTRL);
    1a2e:	80 e7       	ldi	r24, 0x70	; 112
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	c4 01       	movw	r24, r8
    1a34:	be 01       	movw	r22, r28
    1a36:	6f 5f       	subi	r22, 0xFF	; 255
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MCP25157readRegERKh>
    1a3e:	10 e0       	ldi	r17, 0x00	; 0
    1a40:	52 cf       	rjmp	.-348    	; 0x18e6 <_ZN7MCP251517receiveCANMessageER5FrameRKm+0x84>

00001a42 <_ZN7MCP25157setModeERK7CanMode>:
/** 
 * Set the operation mode of the MCP2515
 * @param	canMode	Enumeration that defines the requested mode
 * @return			True if the mode was successfully set
 */
boolean MCP2515::setMode(const CanMode& canMode) {
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <_ZN7MCP25157setModeERK7CanMode+0xa>
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <_ZN7MCP25157setModeERK7CanMode+0xc>
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	8c 01       	movw	r16, r24
	//
	// In each of these settings, we want to make sure that
	// we disable the flag that will reset all pending buffers
	// and we allow the messages to re-transmit if required
	// The rest can retain their values, so retain the old value
	switch(canMode) {
    1a54:	fb 01       	movw	r30, r22
    1a56:	80 81       	ld	r24, Z
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	41 f0       	breq	.+16     	; 0x1a6c <_ZN7MCP25157setModeERK7CanMode+0x2a>
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	18 f0       	brcs	.+6      	; 0x1a66 <_ZN7MCP25157setModeERK7CanMode+0x24>
    1a60:	82 30       	cpi	r24, 0x02	; 2
    1a62:	61 f4       	brne	.+24     	; 0x1a7c <_ZN7MCP25157setModeERK7CanMode+0x3a>
    1a64:	07 c0       	rjmp	.+14     	; 0x1a74 <_ZN7MCP25157setModeERK7CanMode+0x32>
		case NORMAL:
			val = 0b00000111;
    1a66:	87 e0       	ldi	r24, 0x07	; 7
    1a68:	8b 83       	std	Y+3, r24	; 0x03
    1a6a:	09 c0       	rjmp	.+18     	; 0x1a7e <_ZN7MCP25157setModeERK7CanMode+0x3c>
			expected = 0;
			break;
			
		case CONFIGURATION:
			val = 0b10000111;
    1a6c:	87 e8       	ldi	r24, 0x87	; 135
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
			expected = 4;
    1a70:	24 e0       	ldi	r18, 0x04	; 4
			break;
    1a72:	06 c0       	rjmp	.+12     	; 0x1a80 <_ZN7MCP25157setModeERK7CanMode+0x3e>
			
		case LISTEN:
			val = 0b01100111;
    1a74:	87 e6       	ldi	r24, 0x67	; 103
    1a76:	8b 83       	std	Y+3, r24	; 0x03
			expected = 3;
    1a78:	23 e0       	ldi	r18, 0x03	; 3
			break;
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <_ZN7MCP25157setModeERK7CanMode+0x3e>
		
		default:
			val = 0;
    1a7c:	1b 82       	std	Y+3, r1	; 0x03
			expected = 0;
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
			break;		  
	};
	
	writeReg(CANCTRL, val);
    1a80:	8f e0       	ldi	r24, 0x0F	; 15
    1a82:	8a 83       	std	Y+2, r24	; 0x02
    1a84:	c8 01       	movw	r24, r16
    1a86:	be 01       	movw	r22, r28
    1a88:	6e 5f       	subi	r22, 0xFE	; 254
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	ae 01       	movw	r20, r28
    1a8e:	4d 5f       	subi	r20, 0xFD	; 253
    1a90:	5f 4f       	sbci	r21, 0xFF	; 255
    1a92:	2c 83       	std	Y+4, r18	; 0x04
    1a94:	0e 94 93 0a 	call	0x1526	; 0x1526 <_ZN7MCP25158writeRegERKhS1_>
	
	// Make sure we set the mode properly
	mode = readReg(CANSTAT) >> 5;
    1a98:	8e e0       	ldi	r24, 0x0E	; 14
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	c8 01       	movw	r24, r16
    1a9e:	be 01       	movw	r22, r28
    1aa0:	6f 5f       	subi	r22, 0xFF	; 255
    1aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa4:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MCP25157readRegERKh>
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	92 95       	swap	r25
    1aac:	96 95       	lsr	r25
    1aae:	97 70       	andi	r25, 0x07	; 7
	if(mode != expected)
		return false;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab4:	92 13       	cpse	r25, r18
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
		
	return true; 			
}	
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	08 95       	ret

00001aca <_ZN7MCP25157initCANERKiS1_>:
 * @param	baudConst	The baud rate of the MCP2515 object
 * @param	ss			The slave select pin
 * @return				True if MCP2515 configured properly
 */
boolean MCP2515::initCAN(const int& baudConst, const int& ss)
{
    1aca:	cf 92       	push	r12
    1acc:	df 92       	push	r13
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <_ZN7MCP25157initCANERKiS1_+0x12>
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	8c 01       	movw	r16, r24
    1ae2:	6b 01       	movw	r12, r22
  byte mode;
  SLAVESELECT = ss;
    1ae4:	fa 01       	movw	r30, r20
    1ae6:	80 81       	ld	r24, Z
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	f8 01       	movw	r30, r16
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
  
  Serial.print("Slave Select For Chipset ");
    1af0:	8a ec       	ldi	r24, 0xCA	; 202
    1af2:	96 e0       	ldi	r25, 0x06	; 6
    1af4:	6f ed       	ldi	r22, 0xDF	; 223
    1af6:	73 e0       	ldi	r23, 0x03	; 3
    1af8:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN5Print5printEPKc>
  Serial.println(SLAVESELECT);
    1afc:	f8 01       	movw	r30, r16
    1afe:	60 81       	ld	r22, Z
    1b00:	71 81       	ldd	r23, Z+1	; 0x01
    1b02:	8a ec       	ldi	r24, 0xCA	; 202
    1b04:	96 e0       	ldi	r25, 0x06	; 6
    1b06:	4a e0       	ldi	r20, 0x0A	; 10
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	0e 94 62 24 	call	0x48c4	; 0x48c4 <_ZN5Print7printlnEii>
  
  digitalWrite(SLAVESELECT,LOW);
    1b0e:	f8 01       	movw	r30, r16
    1b10:	80 81       	ld	r24, Z
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  delay(10);
    1b18:	6a e0       	ldi	r22, 0x0A	; 10
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 6f 20 	call	0x40de	; 0x40de <delay>
  
  // Perform an SPI Reset
  // Per section 10.1 of the reference this will automatically
  // place the device in configuration mode
  SPI.transfer(RESET);
    1b24:	80 ec       	ldi	r24, 0xC0	; 192
    1b26:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
  digitalWrite(SLAVESELECT,HIGH);
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	80 81       	ld	r24, Z
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  delay(10);
    1b34:	6a e0       	ldi	r22, 0x0A	; 10
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 6f 20 	call	0x40de	; 0x40de <delay>
  
  // Read mode and make sure it is config just to be
  // positive before we start sending configuration 
  // commands
  delay(100);
    1b40:	64 e6       	ldi	r22, 0x64	; 100
    1b42:	70 e0       	ldi	r23, 0x00	; 0
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 6f 20 	call	0x40de	; 0x40de <delay>
  mode = readReg(CANSTAT) >> 5;
    1b4c:	8e e0       	ldi	r24, 0x0E	; 14
    1b4e:	8a 83       	std	Y+2, r24	; 0x02
    1b50:	c8 01       	movw	r24, r16
    1b52:	be 01       	movw	r22, r28
    1b54:	6e 5f       	subi	r22, 0xFE	; 254
    1b56:	7f 4f       	sbci	r23, 0xFF	; 255
    1b58:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MCP25157readRegERKh>
    1b5c:	e8 2e       	mov	r14, r24
    1b5e:	ff 24       	eor	r15, r15
    1b60:	a5 e0       	ldi	r26, 0x05	; 5
    1b62:	f5 94       	asr	r15
    1b64:	e7 94       	ror	r14
    1b66:	aa 95       	dec	r26
    1b68:	e1 f7       	brne	.-8      	; 0x1b62 <_ZN7MCP25157initCANERKiS1_+0x98>
    1b6a:	8e 2d       	mov	r24, r14
  
  // If the mode doesn't equal configuration mode, try to force
  // the mode via SPI commands.
  if(mode != 0b100) {
    1b6c:	84 30       	cpi	r24, 0x04	; 4
    1b6e:	c9 f0       	breq	.+50     	; 0x1ba2 <_ZN7MCP25157initCANERKiS1_+0xd8>
	  
	  // If we still have trouble setting config mode, then we 
	  // have a problem with the device, and do not continue
	  if(!setMode(CONFIGURATION)) {
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	c8 01       	movw	r24, r16
    1b76:	be 01       	movw	r22, r28
    1b78:	6f 5f       	subi	r22, 0xFF	; 255
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN7MCP25157setModeERK7CanMode>
    1b80:	88 23       	and	r24, r24
    1b82:	79 f4       	brne	.+30     	; 0x1ba2 <_ZN7MCP25157initCANERKiS1_+0xd8>
		Serial.print("Failed to set chip mode.  Mode is ");
    1b84:	8a ec       	ldi	r24, 0xCA	; 202
    1b86:	96 e0       	ldi	r25, 0x06	; 6
    1b88:	69 ef       	ldi	r22, 0xF9	; 249
    1b8a:	73 e0       	ldi	r23, 0x03	; 3
    1b8c:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN5Print5printEPKc>
		Serial.println(mode,BIN);
    1b90:	8a ec       	ldi	r24, 0xCA	; 202
    1b92:	96 e0       	ldi	r25, 0x06	; 6
    1b94:	6e 2d       	mov	r22, r14
    1b96:	42 e0       	ldi	r20, 0x02	; 2
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	0e 94 04 24 	call	0x4808	; 0x4808 <_ZN5Print7printlnEhi>
		return false;
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	0a c0       	rjmp	.+20     	; 0x1bb6 <_ZN7MCP25157initCANERKiS1_+0xec>
	  }	
  }	  
  
  // Set the baud and return
  Serial.println("Setting Baud");
    1ba2:	8a ec       	ldi	r24, 0xCA	; 202
    1ba4:	96 e0       	ldi	r25, 0x06	; 6
    1ba6:	6c e1       	ldi	r22, 0x1C	; 28
    1ba8:	74 e0       	ldi	r23, 0x04	; 4
    1baa:	0e 94 84 24 	call	0x4908	; 0x4908 <_ZN5Print7printlnEPKc>
  return(setCANBaud(baudConst));
    1bae:	c8 01       	movw	r24, r16
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN7MCP251510setCANBaudERKi>
}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	08 95       	ret

00001bcc <_ZN7MCP25158queryOBDERKhR5FrameRbS1_>:
 * @param   readSuccess True if read was successful
 * @param	bits		The total bits in the message
 * @return				The value returned from the request
 */
long MCP2515::queryOBD(const byte& code, Frame& msg, bool& readSuccess, const byte& bits)
{
    1bcc:	2f 92       	push	r2
    1bce:	3f 92       	push	r3
    1bd0:	4f 92       	push	r4
    1bd2:	5f 92       	push	r5
    1bd4:	6f 92       	push	r6
    1bd6:	7f 92       	push	r7
    1bd8:	8f 92       	push	r8
    1bda:	9f 92       	push	r9
    1bdc:	af 92       	push	r10
    1bde:	bf 92       	push	r11
    1be0:	cf 92       	push	r12
    1be2:	df 92       	push	r13
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	2c 97       	sbiw	r28, 0x0c	; 12
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	6c 01       	movw	r12, r24
    1c02:	2b 01       	movw	r4, r22
    1c04:	7a 01       	movw	r14, r20
    1c06:	39 01       	movw	r6, r18
    1c08:	18 01       	movw	r2, r16
  long val = 0;

  // Construct our OBD message
  msg.adrsValue = 0x7DF;
    1c0a:	8f ed       	ldi	r24, 0xDF	; 223
    1c0c:	97 e0       	ldi	r25, 0x07	; 7
    1c0e:	fa 01       	movw	r30, r20
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	80 83       	st	Z, r24
  msg.isExtendedAdrs = false;
    1c14:	12 82       	std	Z+2, r1	; 0x02
  msg.extendedAdrsValue = 0;
    1c16:	13 82       	std	Z+3, r1	; 0x03
    1c18:	14 82       	std	Z+4, r1	; 0x04
    1c1a:	15 82       	std	Z+5, r1	; 0x05
    1c1c:	16 82       	std	Z+6, r1	; 0x06
  msg.rtr = false;
    1c1e:	17 82       	std	Z+7, r1	; 0x07
  msg.dataLength = 8;
    1c20:	88 e0       	ldi	r24, 0x08	; 8
    1c22:	80 87       	std	Z+8, r24	; 0x08
  msg.data[0] = 0x02;
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	81 87       	std	Z+9, r24	; 0x09
  msg.data[1] = 0x01;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	82 87       	std	Z+10, r24	; 0x0a
  msg.data[2] = code;
    1c2c:	fb 01       	movw	r30, r22
    1c2e:	80 81       	ld	r24, Z
    1c30:	fa 01       	movw	r30, r20
    1c32:	83 87       	std	Z+11, r24	; 0x0b
  msg.data[3] = 0;
    1c34:	14 86       	std	Z+12, r1	; 0x0c
  msg.data[4] = 0;
    1c36:	15 86       	std	Z+13, r1	; 0x0d
  msg.data[5] = 0;
    1c38:	16 86       	std	Z+14, r1	; 0x0e
  msg.data[6] = 0;
    1c3a:	17 86       	std	Z+15, r1	; 0x0f
  msg.data[7] = 0;
    1c3c:	10 8a       	std	Z+16, r1	; 0x10
  
  // Submit the message, if our transmit wasn't succesful, just return
  if(!transmitCANMessage(msg,250))
    1c3e:	8a ef       	ldi	r24, 0xFA	; 250
    1c40:	88 2e       	mov	r8, r24
    1c42:	91 2c       	mov	r9, r1
    1c44:	a1 2c       	mov	r10, r1
    1c46:	b1 2c       	mov	r11, r1
    1c48:	89 86       	std	Y+9, r8	; 0x09
    1c4a:	9a 86       	std	Y+10, r9	; 0x0a
    1c4c:	ab 86       	std	Y+11, r10	; 0x0b
    1c4e:	bc 86       	std	Y+12, r11	; 0x0c
    1c50:	c6 01       	movw	r24, r12
    1c52:	ba 01       	movw	r22, r20
    1c54:	ae 01       	movw	r20, r28
    1c56:	47 5f       	subi	r20, 0xF7	; 247
    1c58:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5a:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7MCP251518transmitCANMessageER5FrameRKm>
    1c5e:	88 23       	and	r24, r24
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0x98>
    1c62:	50 c0       	rjmp	.+160    	; 0x1d04 <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0x138>
    return 0;

  // Transmit was successful, now receive the response
  readSuccess = receiveCANMessage(msg,250);
    1c64:	8d 82       	std	Y+5, r8	; 0x05
    1c66:	9e 82       	std	Y+6, r9	; 0x06
    1c68:	af 82       	std	Y+7, r10	; 0x07
    1c6a:	b8 86       	std	Y+8, r11	; 0x08
    1c6c:	c6 01       	movw	r24, r12
    1c6e:	b7 01       	movw	r22, r14
    1c70:	ae 01       	movw	r20, r28
    1c72:	4b 5f       	subi	r20, 0xFB	; 251
    1c74:	5f 4f       	sbci	r21, 0xFF	; 255
    1c76:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN7MCP251517receiveCANMessageER5FrameRKm>
    1c7a:	91 e0       	ldi	r25, 0x01	; 1
    1c7c:	88 23       	and	r24, r24
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0xb6>
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	f3 01       	movw	r30, r6
    1c84:	90 83       	st	Z, r25
  if (readSuccess) 
    1c86:	99 23       	and	r25, r25
    1c88:	c1 f4       	brne	.+48     	; 0x1cba <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0xee>
    1c8a:	3c c0       	rjmp	.+120    	; 0x1d04 <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0x138>
	int noMatch = 0;
    while(msg.data[2] != code)
	{
		// If the PIDs didn't match, then retry until we get the response,
		// or until we have tried 5 times
        readSuccess = receiveCANMessage(msg,250);
    1c8c:	89 82       	std	Y+1, r8	; 0x01
    1c8e:	9a 82       	std	Y+2, r9	; 0x02
    1c90:	ab 82       	std	Y+3, r10	; 0x03
    1c92:	bc 82       	std	Y+4, r11	; 0x04
    1c94:	c6 01       	movw	r24, r12
    1c96:	b7 01       	movw	r22, r14
    1c98:	ae 01       	movw	r20, r28
    1c9a:	4f 5f       	subi	r20, 0xFF	; 255
    1c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9e:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN7MCP251517receiveCANMessageER5FrameRKm>
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	88 23       	and	r24, r24
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0xde>
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	f3 01       	movw	r30, r6
    1cac:	90 83       	st	Z, r25
        noMatch++;
        if (!readSuccess || noMatch >= 5) 
    1cae:	99 23       	and	r25, r25
    1cb0:	49 f1       	breq	.+82     	; 0x1d04 <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0x138>
    1cb2:	01 50       	subi	r16, 0x01	; 1
    1cb4:	10 40       	sbci	r17, 0x00	; 0
    1cb6:	41 f4       	brne	.+16     	; 0x1cc8 <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0xfc>
    1cb8:	25 c0       	rjmp	.+74     	; 0x1d04 <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0x138>
  if(!transmitCANMessage(msg,250))
    return 0;

  // Transmit was successful, now receive the response
  readSuccess = receiveCANMessage(msg,250);
  if (readSuccess) 
    1cba:	05 e0       	ldi	r16, 0x05	; 5
    1cbc:	10 e0       	ldi	r17, 0x00	; 0
	int noMatch = 0;
    while(msg.data[2] != code)
	{
		// If the PIDs didn't match, then retry until we get the response,
		// or until we have tried 5 times
        readSuccess = receiveCANMessage(msg,250);
    1cbe:	ba ef       	ldi	r27, 0xFA	; 250
    1cc0:	8b 2e       	mov	r8, r27
    1cc2:	91 2c       	mov	r9, r1
    1cc4:	a1 2c       	mov	r10, r1
    1cc6:	b1 2c       	mov	r11, r1
  readSuccess = receiveCANMessage(msg,250);
  if (readSuccess) 
  {
    //Check if the PIDs match (in case other messages are also on bus)
	int noMatch = 0;
    while(msg.data[2] != code)
    1cc8:	f7 01       	movw	r30, r14
    1cca:	93 85       	ldd	r25, Z+11	; 0x0b
    1ccc:	f2 01       	movw	r30, r4
    1cce:	80 81       	ld	r24, Z
    1cd0:	98 17       	cp	r25, r24
    1cd2:	e1 f6       	brne	.-72     	; 0x1c8c <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0xc0>
  else 
    return 0;
  
  // Depending on the bits we are expecting from the
  // message, we need to manipulate the return data
  if(bits == 0) {
    1cd4:	f1 01       	movw	r30, r2
    1cd6:	90 81       	ld	r25, Z
    1cd8:	99 23       	and	r25, r25
    1cda:	a1 f0       	breq	.+40     	; 0x1d04 <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0x138>
    1cdc:	f7 01       	movw	r30, r14
    1cde:	84 85       	ldd	r24, Z+12	; 0x0c
	// do nothing
  } else if(bits == 1) {
    1ce0:	91 30       	cpi	r25, 0x01	; 1
    1ce2:	29 f4       	brne	.+10     	; 0x1cee <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0x122>
    val = msg.data[3];
    1ce4:	08 2f       	mov	r16, r24
    1ce6:	10 e0       	ldi	r17, 0x00	; 0
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	0e c0       	rjmp	.+28     	; 0x1d0a <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0x13e>
  } else {
    val = 256 * msg.data[3] + msg.data[4];
    1cee:	18 2f       	mov	r17, r24
    1cf0:	00 e0       	ldi	r16, 0x00	; 0
    1cf2:	f7 01       	movw	r30, r14
    1cf4:	85 85       	ldd	r24, Z+13	; 0x0d
    1cf6:	08 0f       	add	r16, r24
    1cf8:	11 1d       	adc	r17, r1
    1cfa:	22 27       	eor	r18, r18
    1cfc:	17 fd       	sbrc	r17, 7
    1cfe:	20 95       	com	r18
    1d00:	32 2f       	mov	r19, r18
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <_ZN7MCP25158queryOBDERKhR5FrameRbS1_+0x13e>
 * @param	bits		The total bits in the message
 * @return				The value returned from the request
 */
long MCP2515::queryOBD(const byte& code, Frame& msg, bool& readSuccess, const byte& bits)
{
  long val = 0;
    1d04:	00 e0       	ldi	r16, 0x00	; 0
    1d06:	10 e0       	ldi	r17, 0x00	; 0
    1d08:	98 01       	movw	r18, r16
  } else {
    val = 256 * msg.data[3] + msg.data[4];
  }	
    
  return val;
}
    1d0a:	b8 01       	movw	r22, r16
    1d0c:	c9 01       	movw	r24, r18
    1d0e:	2c 96       	adiw	r28, 0x0c	; 12
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	ff 90       	pop	r15
    1d24:	ef 90       	pop	r14
    1d26:	df 90       	pop	r13
    1d28:	cf 90       	pop	r12
    1d2a:	bf 90       	pop	r11
    1d2c:	af 90       	pop	r10
    1d2e:	9f 90       	pop	r9
    1d30:	8f 90       	pop	r8
    1d32:	7f 90       	pop	r7
    1d34:	6f 90       	pop	r6
    1d36:	5f 90       	pop	r5
    1d38:	4f 90       	pop	r4
    1d3a:	3f 90       	pop	r3
    1d3c:	2f 90       	pop	r2
    1d3e:	08 95       	ret

00001d40 <_ZN7MCP251516queryOBDExtendedERKjR5Frame>:
 * Query the ECU for extended information about the codes that are passed in.  We can supply an expected
 * response address as well as check the PID if necessary
 * @param expectedResp	The expected ECU address
 * @param msg			The message object
 */
boolean MCP2515::queryOBDExtended(const unsigned int& expectedResp, Frame& msg) {
    1d40:	4f 92       	push	r4
    1d42:	5f 92       	push	r5
    1d44:	6f 92       	push	r6
    1d46:	7f 92       	push	r7
    1d48:	8f 92       	push	r8
    1d4a:	9f 92       	push	r9
    1d4c:	af 92       	push	r10
    1d4e:	bf 92       	push	r11
    1d50:	cf 92       	push	r12
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	2c 97       	sbiw	r28, 0x0c	; 12
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	5c 01       	movw	r10, r24
    1d72:	4b 01       	movw	r8, r22
    1d74:	8a 01       	movw	r16, r20

  if(!transmitCANMessage(msg,CANTIMEOUT))
    1d76:	34 e6       	ldi	r19, 0x64	; 100
    1d78:	c3 2e       	mov	r12, r19
    1d7a:	d1 2c       	mov	r13, r1
    1d7c:	e1 2c       	mov	r14, r1
    1d7e:	f1 2c       	mov	r15, r1
    1d80:	c9 86       	std	Y+9, r12	; 0x09
    1d82:	da 86       	std	Y+10, r13	; 0x0a
    1d84:	eb 86       	std	Y+11, r14	; 0x0b
    1d86:	fc 86       	std	Y+12, r15	; 0x0c
    1d88:	ba 01       	movw	r22, r20
    1d8a:	ae 01       	movw	r20, r28
    1d8c:	47 5f       	subi	r20, 0xF7	; 247
    1d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d90:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7MCP251518transmitCANMessageER5FrameRKm>
    1d94:	88 23       	and	r24, r24
    1d96:	99 f1       	breq	.+102    	; 0x1dfe <_ZN7MCP251516queryOBDExtendedERKjR5Frame+0xbe>
    return 0;

  boolean rxSuccess = receiveCANMessage(msg,CANTIMEOUT);
    1d98:	cd 82       	std	Y+5, r12	; 0x05
    1d9a:	de 82       	std	Y+6, r13	; 0x06
    1d9c:	ef 82       	std	Y+7, r14	; 0x07
    1d9e:	f8 86       	std	Y+8, r15	; 0x08
    1da0:	c5 01       	movw	r24, r10
    1da2:	b8 01       	movw	r22, r16
    1da4:	ae 01       	movw	r20, r28
    1da6:	4b 5f       	subi	r20, 0xFB	; 251
    1da8:	5f 4f       	sbci	r21, 0xFF	; 255
    1daa:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN7MCP251517receiveCANMessageER5FrameRKm>

  if (rxSuccess) {
    1dae:	88 23       	and	r24, r24
    1db0:	99 f4       	brne	.+38     	; 0x1dd8 <_ZN7MCP251516queryOBDExtendedERKjR5Frame+0x98>
    1db2:	26 c0       	rjmp	.+76     	; 0x1e00 <_ZN7MCP251516queryOBDExtendedERKjR5Frame+0xc0>
    //Check if the PIDs match (in case other messages are also on bus)
	int noMatch = 0;
	
	// If we didn't receive the correct return pid, keep checking
    while(msg.adrsValue != expectedResp) {
        rxSuccess = receiveCANMessage(msg, CANTIMEOUT);
    1db4:	49 82       	std	Y+1, r4	; 0x01
    1db6:	5a 82       	std	Y+2, r5	; 0x02
    1db8:	6b 82       	std	Y+3, r6	; 0x03
    1dba:	7c 82       	std	Y+4, r7	; 0x04
    1dbc:	c5 01       	movw	r24, r10
    1dbe:	b8 01       	movw	r22, r16
    1dc0:	ae 01       	movw	r20, r28
    1dc2:	4f 5f       	subi	r20, 0xFF	; 255
    1dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc6:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN7MCP251517receiveCANMessageER5FrameRKm>
    1dca:	08 94       	sec
    1dcc:	c1 08       	sbc	r12, r1
    1dce:	d1 08       	sbc	r13, r1
        noMatch++;
        if (noMatch >= 5) {
    1dd0:	c1 14       	cp	r12, r1
    1dd2:	d1 04       	cpc	r13, r1
    1dd4:	49 f4       	brne	.+18     	; 0x1de8 <_ZN7MCP251516queryOBDExtendedERKjR5Frame+0xa8>
    1dd6:	13 c0       	rjmp	.+38     	; 0x1dfe <_ZN7MCP251516queryOBDExtendedERKjR5Frame+0xbe>
  if(!transmitCANMessage(msg,CANTIMEOUT))
    return 0;

  boolean rxSuccess = receiveCANMessage(msg,CANTIMEOUT);

  if (rxSuccess) {
    1dd8:	95 e0       	ldi	r25, 0x05	; 5
    1dda:	c9 2e       	mov	r12, r25
    1ddc:	d1 2c       	mov	r13, r1
    //Check if the PIDs match (in case other messages are also on bus)
	int noMatch = 0;
	
	// If we didn't receive the correct return pid, keep checking
    while(msg.adrsValue != expectedResp) {
        rxSuccess = receiveCANMessage(msg, CANTIMEOUT);
    1dde:	24 e6       	ldi	r18, 0x64	; 100
    1de0:	42 2e       	mov	r4, r18
    1de2:	51 2c       	mov	r5, r1
    1de4:	61 2c       	mov	r6, r1
    1de6:	71 2c       	mov	r7, r1
  if (rxSuccess) {
    //Check if the PIDs match (in case other messages are also on bus)
	int noMatch = 0;
	
	// If we didn't receive the correct return pid, keep checking
    while(msg.adrsValue != expectedResp) {
    1de8:	f8 01       	movw	r30, r16
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	f4 01       	movw	r30, r8
    1df0:	20 81       	ld	r18, Z
    1df2:	31 81       	ldd	r19, Z+1	; 0x01
    1df4:	82 17       	cp	r24, r18
    1df6:	93 07       	cpc	r25, r19
    1df8:	e9 f6       	brne	.-70     	; 0x1db4 <_ZN7MCP251516queryOBDExtendedERKjR5Frame+0x74>
            return 0;
        }
    }
	
	// If we got here, we assume we matched
	return 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	01 c0       	rjmp	.+2      	; 0x1e00 <_ZN7MCP251516queryOBDExtendedERKjR5Frame+0xc0>
	// If we didn't receive the correct return pid, keep checking
    while(msg.adrsValue != expectedResp) {
        rxSuccess = receiveCANMessage(msg, CANTIMEOUT);
        noMatch++;
        if (noMatch >= 5) {
            return 0;
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
	// If we got here, we assume we matched
	return 1;
  } 
  else 
    return 0;
}
    1e00:	2c 96       	adiw	r28, 0x0c	; 12
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	df 90       	pop	r13
    1e1a:	cf 90       	pop	r12
    1e1c:	bf 90       	pop	r11
    1e1e:	af 90       	pop	r10
    1e20:	9f 90       	pop	r9
    1e22:	8f 90       	pop	r8
    1e24:	7f 90       	pop	r7
    1e26:	6f 90       	pop	r6
    1e28:	5f 90       	pop	r5
    1e2a:	4f 90       	pop	r4
    1e2c:	08 95       	ret

00001e2e <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1>:
* Added by Christopher Meyer July, 2011
* 
*/
boolean MCP2515::setReceiveFilter(unsigned int buffer, FILTER0 bufferFilter0,
	FILTER1 bufferFilter1)
{
    1e2e:	2f 92       	push	r2
    1e30:	3f 92       	push	r3
    1e32:	4f 92       	push	r4
    1e34:	5f 92       	push	r5
    1e36:	6f 92       	push	r6
    1e38:	7f 92       	push	r7
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	65 97       	sbiw	r28, 0x15	; 21
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	7c 01       	movw	r14, r24
    1e62:	2b 01       	movw	r4, r22
    1e64:	08 8b       	std	Y+16, r16	; 0x10
    1e66:	19 8b       	std	Y+17, r17	; 0x11
    1e68:	2a 8b       	std	Y+18, r18	; 0x12
    1e6a:	3b 8b       	std	Y+19, r19	; 0x13
    1e6c:	4c 8b       	std	Y+20, r20	; 0x14
    1e6e:	5d 8b       	std	Y+21, r21	; 0x15
    unsigned short activeFilters[4];
    byte bufferCtl;
    unsigned short addressOffset;
    unsigned short i;
    
    if (buffer == BUFFER_ALL) {
    1e70:	6f 3f       	cpi	r22, 0xFF	; 255
    1e72:	71 05       	cpc	r23, r1
    1e74:	61 f5       	brne	.+88     	; 0x1ece <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0xa0>
        if (!setReceiveFilter(BUFFER_0, bufferFilter0, bufferFilter1)) {
    1e76:	8d b7       	in	r24, 0x3d	; 61
    1e78:	9e b7       	in	r25, 0x3e	; 62
    1e7a:	0a 97       	sbiw	r24, 0x0a	; 10
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	9e bf       	out	0x3e, r25	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	8d bf       	out	0x3d, r24	; 61
    1e86:	ad b7       	in	r26, 0x3d	; 61
    1e88:	be b7       	in	r27, 0x3e	; 62
    1e8a:	11 96       	adiw	r26, 0x01	; 1
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	b9 96       	adiw	r30, 0x29	; 41
    1e90:	8a e0       	ldi	r24, 0x0A	; 10
    1e92:	01 90       	ld	r0, Z+
    1e94:	0d 92       	st	X+, r0
    1e96:	81 50       	subi	r24, 0x01	; 1
    1e98:	e1 f7       	brne	.-8      	; 0x1e92 <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x64>
    1e9a:	c7 01       	movw	r24, r14
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	08 89       	ldd	r16, Y+16	; 0x10
    1ea2:	19 89       	ldd	r17, Y+17	; 0x11
    1ea4:	2a 89       	ldd	r18, Y+18	; 0x12
    1ea6:	3b 89       	ldd	r19, Y+19	; 0x13
    1ea8:	4c 89       	ldd	r20, Y+20	; 0x14
    1eaa:	5d 89       	ldd	r21, Y+21	; 0x15
    1eac:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1>
    1eb0:	ed b7       	in	r30, 0x3d	; 61
    1eb2:	fe b7       	in	r31, 0x3e	; 62
    1eb4:	3a 96       	adiw	r30, 0x0a	; 10
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	fe bf       	out	0x3e, r31	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	ed bf       	out	0x3d, r30	; 61
    1ec0:	88 23       	and	r24, r24
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x98>
    1ec4:	01 c1       	rjmp	.+514    	; 0x20c8 <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x29a>
            return false;
        }
        buffer = BUFFER_1;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	48 2e       	mov	r4, r24
    1eca:	51 2c       	mov	r5, r1
    1ecc:	16 c0       	rjmp	.+44     	; 0x1efa <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0xcc>
    }

    if (buffer == BUFFER_0) {
    1ece:	61 15       	cp	r22, r1
    1ed0:	71 05       	cpc	r23, r1
    1ed2:	99 f4       	brne	.+38     	; 0x1efa <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0xcc>
        maskAddr = RXM0SIDH;
        mask = bufferFilter0.mask;
    1ed4:	88 88       	ldd	r8, Y+16	; 0x10
    1ed6:	99 88       	ldd	r9, Y+17	; 0x11
        filterAddr = RXF0SIDH;
        filterCnt = 2;
        activeFilters[0] = bufferFilter0.filters[0];
    1ed8:	8a 89       	ldd	r24, Y+18	; 0x12
    1eda:	9b 89       	ldd	r25, Y+19	; 0x13
    1edc:	99 87       	std	Y+9, r25	; 0x09
    1ede:	88 87       	std	Y+8, r24	; 0x08
        activeFilters[1] = bufferFilter0.filters[1];
    1ee0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ee2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ee4:	9b 87       	std	Y+11, r25	; 0x0b
    1ee6:	8a 87       	std	Y+10, r24	; 0x0a
        bufferCtl = RXB0CTRL;
    1ee8:	80 e6       	ldi	r24, 0x60	; 96
    1eea:	8f 83       	std	Y+7, r24	; 0x07

    if (buffer == BUFFER_0) {
        maskAddr = RXM0SIDH;
        mask = bufferFilter0.mask;
        filterAddr = RXF0SIDH;
        filterCnt = 2;
    1eec:	02 e0       	ldi	r16, 0x02	; 2
    1eee:	20 2e       	mov	r2, r16
    1ef0:	31 2c       	mov	r3, r1
    }

    if (buffer == BUFFER_0) {
        maskAddr = RXM0SIDH;
        mask = bufferFilter0.mask;
        filterAddr = RXF0SIDH;
    1ef2:	dd 24       	eor	r13, r13
        }
        buffer = BUFFER_1;
    }

    if (buffer == BUFFER_0) {
        maskAddr = RXM0SIDH;
    1ef4:	00 e2       	ldi	r16, 0x20	; 32
    1ef6:	10 e0       	ldi	r17, 0x00	; 0
    1ef8:	1b c0       	rjmp	.+54     	; 0x1f30 <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x102>
        activeFilters[1] = bufferFilter0.filters[1];
        bufferCtl = RXB0CTRL;
        
    } else {
        maskAddr = RXM1SIDH;
        mask = bufferFilter1.mask;
    1efa:	89 a4       	lds	r24, 0xa9
    1efc:	9a a4       	lds	r25, 0xaa
        filterAddr = RXF2SIDH;
        filterCnt = 4;
        activeFilters[0] = bufferFilter1.filters[0];
    1efe:	8b a5       	lds	r24, 0x6b
    1f00:	9c a5       	lds	r25, 0x6c
    1f02:	99 87       	std	Y+9, r25	; 0x09
    1f04:	88 87       	std	Y+8, r24	; 0x08
        activeFilters[1] = bufferFilter1.filters[1];
    1f06:	8d a5       	lds	r24, 0x6d
    1f08:	9e a5       	lds	r25, 0x6e
    1f0a:	9b 87       	std	Y+11, r25	; 0x0b
    1f0c:	8a 87       	std	Y+10, r24	; 0x0a
        activeFilters[2] = bufferFilter1.filters[2];
    1f0e:	8f a5       	lds	r24, 0x6f
    1f10:	98 a9       	sts	0x48, r25
    1f12:	9d 87       	std	Y+13, r25	; 0x0d
    1f14:	8c 87       	std	Y+12, r24	; 0x0c
        activeFilters[3] = bufferFilter1.filters[3];
    1f16:	89 a9       	sts	0x49, r24
    1f18:	9a a9       	sts	0x4a, r25
    1f1a:	9f 87       	std	Y+15, r25	; 0x0f
    1f1c:	8e 87       	std	Y+14, r24	; 0x0e
        bufferCtl = RXB1CTRL;
    1f1e:	80 e7       	ldi	r24, 0x70	; 112
    1f20:	8f 83       	std	Y+7, r24	; 0x07
        
    } else {
        maskAddr = RXM1SIDH;
        mask = bufferFilter1.mask;
        filterAddr = RXF2SIDH;
        filterCnt = 4;
    1f22:	b4 e0       	ldi	r27, 0x04	; 4
    1f24:	2b 2e       	mov	r2, r27
    1f26:	31 2c       	mov	r3, r1
        bufferCtl = RXB0CTRL;
        
    } else {
        maskAddr = RXM1SIDH;
        mask = bufferFilter1.mask;
        filterAddr = RXF2SIDH;
    1f28:	18 e0       	ldi	r17, 0x08	; 8
    1f2a:	d1 2e       	mov	r13, r17
        activeFilters[0] = bufferFilter0.filters[0];
        activeFilters[1] = bufferFilter0.filters[1];
        bufferCtl = RXB0CTRL;
        
    } else {
        maskAddr = RXM1SIDH;
    1f2c:	04 e2       	ldi	r16, 0x24	; 36
    1f2e:	10 e0       	ldi	r17, 0x00	; 0
        activeFilters[3] = bufferFilter1.filters[3];
        bufferCtl = RXB1CTRL;
    }

    //Set the mask RXM0
	digitalWrite(SLAVESELECT,LOW);
    1f30:	f7 01       	movw	r30, r14
    1f32:	80 81       	ld	r24, Z
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
	SPI.transfer(WRITE); 
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
	SPI.transfer(maskAddr);
    1f40:	80 2f       	mov	r24, r16
    1f42:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
	SPI.transfer(mask >> 3);
    1f46:	54 01       	movw	r10, r8
    1f48:	a3 e0       	ldi	r26, 0x03	; 3
    1f4a:	b6 94       	lsr	r11
    1f4c:	a7 94       	ror	r10
    1f4e:	aa 95       	dec	r26
    1f50:	e1 f7       	brne	.-8      	; 0x1f4a <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x11c>
    1f52:	8a 2d       	mov	r24, r10
    1f54:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
	SPI.transfer((mask & 0xFF) << 5);
    1f58:	88 2d       	mov	r24, r8
    1f5a:	82 95       	swap	r24
    1f5c:	88 0f       	add	r24, r24
    1f5e:	80 7e       	andi	r24, 0xE0	; 224
    1f60:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
	digitalWrite(SLAVESELECT,HIGH);
    1f64:	f7 01       	movw	r30, r14
    1f66:	80 81       	ld	r24, Z
    1f68:	61 e0       	ldi	r22, 0x01	; 1
    1f6a:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
    
	//Verify mask was set
	if (readReg(maskAddr) != (mask >> 3)) {
    1f6e:	0e 83       	std	Y+6, r16	; 0x06
    1f70:	c7 01       	movw	r24, r14
    1f72:	be 01       	movw	r22, r28
    1f74:	6a 5f       	subi	r22, 0xFA	; 250
    1f76:	7f 4f       	sbci	r23, 0xFF	; 255
    1f78:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MCP25157readRegERKh>
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	8a 15       	cp	r24, r10
    1f80:	9b 05       	cpc	r25, r11
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x158>
    1f84:	a1 c0       	rjmp	.+322    	; 0x20c8 <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x29a>
		return false;
	}

	//Set filters
    digitalWrite(SLAVESELECT,LOW);
    1f86:	f7 01       	movw	r30, r14
    1f88:	80 81       	ld	r24, Z
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
    SPI.transfer(WRITE); 
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
    SPI.transfer(filterAddr);
    1f96:	8d 2d       	mov	r24, r13
    1f98:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
    1f9c:	78 e0       	ldi	r23, 0x08	; 8
    1f9e:	67 2e       	mov	r6, r23
    1fa0:	71 2c       	mov	r7, r1
    1fa2:	6c 0e       	add	r6, r28
    1fa4:	7d 1e       	adc	r7, r29
    1fa6:	53 01       	movw	r10, r6
    for (i = 0; i < filterCnt; i++) {
    1fa8:	00 e0       	ldi	r16, 0x00	; 0
    1faa:	10 e0       	ldi	r17, 0x00	; 0
        if ((buffer == BUFFER_1) && (i == 1)) {
    1fac:	f1 e0       	ldi	r31, 0x01	; 1
    1fae:	4f 16       	cp	r4, r31
    1fb0:	51 04       	cpc	r5, r1
    1fb2:	99 f4       	brne	.+38     	; 0x1fda <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x1ac>
    1fb4:	01 30       	cpi	r16, 0x01	; 1
    1fb6:	11 05       	cpc	r17, r1
    1fb8:	81 f4       	brne	.+32     	; 0x1fda <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x1ac>
            //The filters for buffer 1 are not contiguous
            digitalWrite(SLAVESELECT,HIGH);
    1fba:	f7 01       	movw	r30, r14
    1fbc:	80 81       	ld	r24, Z
    1fbe:	61 e0       	ldi	r22, 0x01	; 1
    1fc0:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
            digitalWrite(SLAVESELECT,LOW);
    1fc4:	f7 01       	movw	r30, r14
    1fc6:	80 81       	ld	r24, Z
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
            SPI.transfer(WRITE); 
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
            SPI.transfer(RXF3SIDH);
    1fd4:	80 e1       	ldi	r24, 0x10	; 16
    1fd6:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
        }
        SPI.transfer(activeFilters[i] >> 3);
    1fda:	f5 01       	movw	r30, r10
    1fdc:	81 90       	ld	r8, Z+
    1fde:	91 90       	ld	r9, Z+
    1fe0:	5f 01       	movw	r10, r30
    1fe2:	c4 01       	movw	r24, r8
    1fe4:	63 e0       	ldi	r22, 0x03	; 3
    1fe6:	96 95       	lsr	r25
    1fe8:	87 95       	ror	r24
    1fea:	6a 95       	dec	r22
    1fec:	e1 f7       	brne	.-8      	; 0x1fe6 <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x1b8>
    1fee:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
        SPI.transfer((activeFilters[i] & 0xFF) << 5);
    1ff2:	88 2d       	mov	r24, r8
    1ff4:	82 95       	swap	r24
    1ff6:	88 0f       	add	r24, r24
    1ff8:	80 7e       	andi	r24, 0xE0	; 224
    1ffa:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
        // The EID filters are unused so just set them to zero
        SPI.transfer(0);
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>
        SPI.transfer(0);
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN8SPIClass8transferEh>

	//Set filters
    digitalWrite(SLAVESELECT,LOW);
    SPI.transfer(WRITE); 
    SPI.transfer(filterAddr);
    for (i = 0; i < filterCnt; i++) {
    200a:	0f 5f       	subi	r16, 0xFF	; 255
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	02 15       	cp	r16, r2
    2010:	13 05       	cpc	r17, r3
    2012:	60 f2       	brcs	.-104    	; 0x1fac <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x17e>
        SPI.transfer((activeFilters[i] & 0xFF) << 5);
        // The EID filters are unused so just set them to zero
        SPI.transfer(0);
        SPI.transfer(0);
    }
    digitalWrite(SLAVESELECT,HIGH);
    2014:	f7 01       	movw	r30, r14
    2016:	80 81       	ld	r24, Z
    2018:	61 e0       	ldi	r22, 0x01	; 1
    201a:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>

	// Verify the filters were set
    addressOffset = 0;
	for (i = 0; i < filterCnt; i++) {
    201e:	00 e0       	ldi	r16, 0x00	; 0
    2020:	10 e0       	ldi	r17, 0x00	; 0
        SPI.transfer(0);
    }
    digitalWrite(SLAVESELECT,HIGH);

	// Verify the filters were set
    addressOffset = 0;
    2022:	aa 24       	eor	r10, r10
    2024:	bb 24       	eor	r11, r11
	for (i = 0; i < filterCnt; i++) {
        if ((buffer == BUFFER_1) && i == 1) {
    2026:	f1 e0       	ldi	r31, 0x01	; 1
    2028:	4f 16       	cp	r4, r31
    202a:	51 04       	cpc	r5, r1
    202c:	31 f4       	brne	.+12     	; 0x203a <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x20c>
    202e:	01 30       	cpi	r16, 0x01	; 1
    2030:	11 05       	cpc	r17, r1
    2032:	19 f4       	brne	.+6      	; 0x203a <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x20c>
            //Add an offset for filters RXF3 and up (buffer 1 filters 1 and up)
            addressOffset = 4;
    2034:	54 e0       	ldi	r21, 0x04	; 4
    2036:	a5 2e       	mov	r10, r21
    2038:	b1 2c       	mov	r11, r1
        }
        
        if (readReg(filterAddr + 4 * i + addressOffset) != 
    203a:	8d 2d       	mov	r24, r13
    203c:	8a 0d       	add	r24, r10
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	c7 01       	movw	r24, r14
    2042:	be 01       	movw	r22, r28
    2044:	6b 5f       	subi	r22, 0xFB	; 251
    2046:	7f 4f       	sbci	r23, 0xFF	; 255
    2048:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MCP25157readRegERKh>
            (activeFilters[i] >> 3)) {
    204c:	f3 01       	movw	r30, r6
    204e:	21 91       	ld	r18, Z+
    2050:	31 91       	ld	r19, Z+
    2052:	3f 01       	movw	r6, r30
        if ((buffer == BUFFER_1) && i == 1) {
            //Add an offset for filters RXF3 and up (buffer 1 filters 1 and up)
            addressOffset = 4;
        }
        
        if (readReg(filterAddr + 4 * i + addressOffset) != 
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	43 e0       	ldi	r20, 0x03	; 3
    2058:	36 95       	lsr	r19
    205a:	27 95       	ror	r18
    205c:	4a 95       	dec	r20
    205e:	e1 f7       	brne	.-8      	; 0x2058 <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x22a>
    2060:	82 17       	cp	r24, r18
    2062:	93 07       	cpc	r25, r19
    2064:	89 f5       	brne	.+98     	; 0x20c8 <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x29a>
    }
    digitalWrite(SLAVESELECT,HIGH);

	// Verify the filters were set
    addressOffset = 0;
	for (i = 0; i < filterCnt; i++) {
    2066:	0f 5f       	subi	r16, 0xFF	; 255
    2068:	1f 4f       	sbci	r17, 0xFF	; 255
    206a:	f4 e0       	ldi	r31, 0x04	; 4
    206c:	df 0e       	add	r13, r31
    206e:	02 15       	cp	r16, r2
    2070:	13 05       	cpc	r17, r3
    2072:	c8 f2       	brcs	.-78     	; 0x2026 <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x1f8>
            return false;
        }
    }

	//Set receive operating mode to SID filter mode
	writeRegBit(bufferCtl, RXM1, 0);
    2074:	86 e0       	ldi	r24, 0x06	; 6
    2076:	8c 83       	std	Y+4, r24	; 0x04
    2078:	1b 82       	std	Y+3, r1	; 0x03
    207a:	c7 01       	movw	r24, r14
    207c:	be 01       	movw	r22, r28
    207e:	69 5f       	subi	r22, 0xF9	; 249
    2080:	7f 4f       	sbci	r23, 0xFF	; 255
    2082:	ae 01       	movw	r20, r28
    2084:	4c 5f       	subi	r20, 0xFC	; 252
    2086:	5f 4f       	sbci	r21, 0xFF	; 255
    2088:	9e 01       	movw	r18, r28
    208a:	2d 5f       	subi	r18, 0xFD	; 253
    208c:	3f 4f       	sbci	r19, 0xFF	; 255
    208e:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN7MCP251511writeRegBitERKhS1_S1_>
	writeRegBit(bufferCtl, RXM0, 1);
    2092:	85 e0       	ldi	r24, 0x05	; 5
    2094:	8a 83       	std	Y+2, r24	; 0x02
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	c7 01       	movw	r24, r14
    209c:	be 01       	movw	r22, r28
    209e:	69 5f       	subi	r22, 0xF9	; 249
    20a0:	7f 4f       	sbci	r23, 0xFF	; 255
    20a2:	ae 01       	movw	r20, r28
    20a4:	4e 5f       	subi	r20, 0xFE	; 254
    20a6:	5f 4f       	sbci	r21, 0xFF	; 255
    20a8:	9e 01       	movw	r18, r28
    20aa:	2f 5f       	subi	r18, 0xFF	; 255
    20ac:	3f 4f       	sbci	r19, 0xFF	; 255
    20ae:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN7MCP251511writeRegBitERKhS1_S1_>

	//Verify that RXM in the buffer control register was set to filter SIDs
	if ((readReg(bufferCtl) & 0x60) != 0x20) {
    20b2:	c7 01       	movw	r24, r14
    20b4:	be 01       	movw	r22, r28
    20b6:	69 5f       	subi	r22, 0xF9	; 249
    20b8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ba:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7MCP25157readRegERKh>
    20be:	98 2f       	mov	r25, r24
    20c0:	90 76       	andi	r25, 0x60	; 96
    unsigned short addressOffset;
    unsigned short i;
    
    if (buffer == BUFFER_ALL) {
        if (!setReceiveFilter(BUFFER_0, bufferFilter0, bufferFilter1)) {
            return false;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 32       	cpi	r25, 0x20	; 32
    20c6:	09 f0       	breq	.+2      	; 0x20ca <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1+0x29c>
            addressOffset = 4;
        }
        
        if (readReg(filterAddr + 4 * i + addressOffset) != 
            (activeFilters[i] >> 3)) {
            return false;
    20c8:	80 e0       	ldi	r24, 0x00	; 0
	if ((readReg(bufferCtl) & 0x60) != 0x20) {
		return false;
	}

	return true;
}
    20ca:	65 96       	adiw	r28, 0x15	; 21
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	bf 90       	pop	r11
    20e6:	af 90       	pop	r10
    20e8:	9f 90       	pop	r9
    20ea:	8f 90       	pop	r8
    20ec:	7f 90       	pop	r7
    20ee:	6f 90       	pop	r6
    20f0:	5f 90       	pop	r5
    20f2:	4f 90       	pop	r4
    20f4:	3f 90       	pop	r3
    20f6:	2f 90       	pop	r2
    20f8:	08 95       	ret

000020fa <_ZN7MCP251513setOBDFiltersEv>:
 * Set the receive filters to only accept data from a specific range
 * of addresses
 * @return	True if the filters were properly set
 */
boolean MCP2515::setOBDFilters()
{
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	60 97       	sbiw	r28, 0x10	; 16
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	9c 01       	movw	r18, r24
    FILTER0 obdFilter0;
    FILTER1 obdFilter1;
	
    obdFilter0.mask = 0x650;
    2114:	80 e5       	ldi	r24, 0x50	; 80
    2116:	96 e0       	ldi	r25, 0x06	; 6
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
    obdFilter0.filters[0] = 0x650;
    211c:	9c 83       	std	Y+4, r25	; 0x04
    211e:	8b 83       	std	Y+3, r24	; 0x03
    obdFilter0.filters[1] = 0x650;
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    
    obdFilter1.mask = 0x7FF;       // 111 1111 1111
    2124:	4f ef       	ldi	r20, 0xFF	; 255
    2126:	57 e0       	ldi	r21, 0x07	; 7
    2128:	58 87       	std	Y+8, r21	; 0x08
    212a:	4f 83       	std	Y+7, r20	; 0x07
    obdFilter1.filters[0] = 0x7E8; // 111 1110 1000
    212c:	48 ee       	ldi	r20, 0xE8	; 232
    212e:	57 e0       	ldi	r21, 0x07	; 7
    2130:	5a 87       	std	Y+10, r21	; 0x0a
    2132:	49 87       	std	Y+9, r20	; 0x09
    obdFilter1.filters[1] = 0x759; // 111 0101 1001
    2134:	49 e5       	ldi	r20, 0x59	; 89
    2136:	57 e0       	ldi	r21, 0x07	; 7
    2138:	5c 87       	std	Y+12, r21	; 0x0c
    213a:	4b 87       	std	Y+11, r20	; 0x0b
    obdFilter1.filters[2] = 0x650; // 110 0101 0000
    213c:	9e 87       	std	Y+14, r25	; 0x0e
    213e:	8d 87       	std	Y+13, r24	; 0x0d
    obdFilter1.filters[3] = 0x4B0; // 100 1011 0000
    2140:	80 eb       	ldi	r24, 0xB0	; 176
    2142:	94 e0       	ldi	r25, 0x04	; 4
    2144:	98 8b       	std	Y+16, r25	; 0x10
    2146:	8f 87       	std	Y+15, r24	; 0x0f
    
	return (setReceiveFilter(BUFFER_ALL, obdFilter0, obdFilter1));
    2148:	8d b7       	in	r24, 0x3d	; 61
    214a:	9e b7       	in	r25, 0x3e	; 62
    214c:	0a 97       	sbiw	r24, 0x0a	; 10
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	9e bf       	out	0x3e, r25	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	8d bf       	out	0x3d, r24	; 61
    2158:	ad b7       	in	r26, 0x3d	; 61
    215a:	be b7       	in	r27, 0x3e	; 62
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	fe 01       	movw	r30, r28
    2160:	37 96       	adiw	r30, 0x07	; 7
    2162:	8a e0       	ldi	r24, 0x0A	; 10
    2164:	01 90       	ld	r0, Z+
    2166:	0d 92       	st	X+, r0
    2168:	81 50       	subi	r24, 0x01	; 1
    216a:	e1 f7       	brne	.-8      	; 0x2164 <_ZN7MCP251513setOBDFiltersEv+0x6a>
    216c:	c9 01       	movw	r24, r18
    216e:	6f ef       	ldi	r22, 0xFF	; 255
    2170:	70 e0       	ldi	r23, 0x00	; 0
    2172:	09 81       	ldd	r16, Y+1	; 0x01
    2174:	1a 81       	ldd	r17, Y+2	; 0x02
    2176:	2b 81       	ldd	r18, Y+3	; 0x03
    2178:	3c 81       	ldd	r19, Y+4	; 0x04
    217a:	4d 81       	ldd	r20, Y+5	; 0x05
    217c:	5e 81       	ldd	r21, Y+6	; 0x06
    217e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_ZN7MCP251516setReceiveFilterEj7FILTER07FILTER1>
    2182:	2d b7       	in	r18, 0x3d	; 61
    2184:	3e b7       	in	r19, 0x3e	; 62
    2186:	26 5f       	subi	r18, 0xF6	; 246
    2188:	3f 4f       	sbci	r19, 0xFF	; 255
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	3e bf       	out	0x3e, r19	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	2d bf       	out	0x3d, r18	; 61
    2194:	60 96       	adiw	r28, 0x10	; 16
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	08 95       	ret

000021aa <_ZN13CanbusMessage12getByteCountERKj>:
 * @param pid	The pid that was requested
 * @return		The byte count
 */
int CanbusMessage::getByteCount(const unsigned int& pid) {	
	int byteCount = 0;
	switch(pid) {
    21aa:	fc 01       	movw	r30, r24
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	05 97       	sbiw	r24, 0x05	; 5
    21b2:	80 34       	cpi	r24, 0x40	; 64
    21b4:	91 05       	cpc	r25, r1
    21b6:	40 f4       	brcc	.+16     	; 0x21c8 <_ZN13CanbusMessage12getByteCountERKj+0x1e>
		  }
	  }
  }
  
  return true;
    21b8:	8b 54       	subi	r24, 0x4B	; 75
    21ba:	9b 4f       	sbci	r25, 0xFB	; 251
    21bc:	fc 01       	movw	r30, r24
    21be:	80 81       	ld	r24, Z
    21c0:	99 27       	eor	r25, r25
    21c2:	87 fd       	sbrc	r24, 7
    21c4:	90 95       	com	r25
    21c6:	08 95       	ret
 * @param pid	The pid that was requested
 * @return		The byte count
 */
int CanbusMessage::getByteCount(const unsigned int& pid) {	
	int byteCount = 0;
	switch(pid) {
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
		byteCount = 2;
		break;
	}
	
	return byteCount;
}
    21cc:	08 95       	ret

000021ce <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String>:
 *
 * @param  responsePid  The message response pid
 * @param  value        The value from the response
 * @param  engineData   The response from the engine
 */
boolean CanbusMessage::getGenericMessage(const byte& responsePid, const float& value, String& engineData) {
    21ce:	cf 92       	push	r12
    21d0:	df 92       	push	r13
    21d2:	ef 92       	push	r14
    21d4:	ff 92       	push	r15
    21d6:	0f 93       	push	r16
    21d8:	1f 93       	push	r17
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	6f 97       	sbiw	r28, 0x1f	; 31
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	6c 01       	movw	r12, r24
    21f0:	8b 01       	movw	r16, r22
    21f2:	7a 01       	movw	r14, r20
  float engine_data;
  boolean updated = false;
  String unit;
    21f4:	ce 01       	movw	r24, r28
    21f6:	0f 96       	adiw	r24, 0x0f	; 15
    21f8:	69 e2       	ldi	r22, 0x29	; 41
    21fa:	74 e0       	ldi	r23, 0x04	; 4
    21fc:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
  int decimal = 0;
  
  // Some DEBUG methods
  DebugMethods::serialDebug("GetGenericMessage::responsePid %d\n", responsePid);
    2200:	00 d0       	rcall	.+0      	; 0x2202 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x34>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x36>
    2204:	ed b7       	in	r30, 0x3d	; 61
    2206:	fe b7       	in	r31, 0x3e	; 62
    2208:	31 96       	adiw	r30, 0x01	; 1
    220a:	8a e2       	ldi	r24, 0x2A	; 42
    220c:	94 e0       	ldi	r25, 0x04	; 4
    220e:	ad b7       	in	r26, 0x3d	; 61
    2210:	be b7       	in	r27, 0x3e	; 62
    2212:	12 96       	adiw	r26, 0x02	; 2
    2214:	9c 93       	st	X, r25
    2216:	8e 93       	st	-X, r24
    2218:	11 97       	sbiw	r26, 0x01	; 1
    221a:	d6 01       	movw	r26, r12
    221c:	8c 91       	ld	r24, X
    221e:	82 83       	std	Z+2, r24	; 0x02
    2220:	13 82       	std	Z+3, r1	; 0x03
    2222:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
  DebugMethods::serialDebug("GetGenericMessage::value %d\n", value);
    2226:	00 d0       	rcall	.+0      	; 0x2228 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x5a>
    2228:	8d e4       	ldi	r24, 0x4D	; 77
    222a:	94 e0       	ldi	r25, 0x04	; 4
    222c:	ed b7       	in	r30, 0x3d	; 61
    222e:	fe b7       	in	r31, 0x3e	; 62
    2230:	92 83       	std	Z+2, r25	; 0x02
    2232:	81 83       	std	Z+1, r24	; 0x01
    2234:	f8 01       	movw	r30, r16
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
    223a:	a2 81       	ldd	r26, Z+2	; 0x02
    223c:	b3 81       	ldd	r27, Z+3	; 0x03
    223e:	ed b7       	in	r30, 0x3d	; 61
    2240:	fe b7       	in	r31, 0x3e	; 62
    2242:	83 83       	std	Z+3, r24	; 0x03
    2244:	94 83       	std	Z+4, r25	; 0x04
    2246:	a5 83       	std	Z+5, r26	; 0x05
    2248:	b6 83       	std	Z+6, r27	; 0x06
    224a:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
  
  switch(responsePid) {
    224e:	8d b7       	in	r24, 0x3d	; 61
    2250:	9e b7       	in	r25, 0x3e	; 62
    2252:	06 96       	adiw	r24, 0x06	; 6
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	9e bf       	out	0x3e, r25	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	8d bf       	out	0x3d, r24	; 61
    225e:	d6 01       	movw	r26, r12
    2260:	8c 91       	ld	r24, X
    2262:	81 31       	cpi	r24, 0x11	; 17
    2264:	09 f4       	brne	.+2      	; 0x2268 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x9a>
    2266:	0a c1       	rjmp	.+532    	; 0x247c <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2ae>
    2268:	82 31       	cpi	r24, 0x12	; 18
    226a:	b8 f4       	brcc	.+46     	; 0x229a <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xcc>
    226c:	8c 30       	cpi	r24, 0x0C	; 12
    226e:	a1 f1       	breq	.+104    	; 0x22d8 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x10a>
    2270:	8d 30       	cpi	r24, 0x0D	; 13
    2272:	50 f4       	brcc	.+20     	; 0x2288 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xba>
    2274:	85 30       	cpi	r24, 0x05	; 5
    2276:	09 f4       	brne	.+2      	; 0x227a <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xac>
    2278:	cf c0       	rjmp	.+414    	; 0x2418 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x24a>
    227a:	85 30       	cpi	r24, 0x05	; 5
    227c:	08 f4       	brcc	.+2      	; 0x2280 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xb2>
    227e:	1c c1       	rjmp	.+568    	; 0x24b8 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2ea>
    2280:	88 30       	cpi	r24, 0x08	; 8
    2282:	08 f0       	brcs	.+2      	; 0x2286 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xb8>
    2284:	19 c1       	rjmp	.+562    	; 0x24b8 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2ea>
    2286:	e2 c0       	rjmp	.+452    	; 0x244c <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x27e>
    2288:	8f 30       	cpi	r24, 0x0F	; 15
    228a:	09 f4       	brne	.+2      	; 0x228e <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xc0>
    228c:	c5 c0       	rjmp	.+394    	; 0x2418 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x24a>
    228e:	80 31       	cpi	r24, 0x10	; 16
    2290:	b8 f5       	brcc	.+110    	; 0x2300 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x132>
    2292:	8d 30       	cpi	r24, 0x0D	; 13
    2294:	09 f0       	breq	.+2      	; 0x2298 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xca>
    2296:	10 c1       	rjmp	.+544    	; 0x24b8 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2ea>
    2298:	ab c0       	rjmp	.+342    	; 0x23f0 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x222>
    229a:	8c 33       	cpi	r24, 0x3C	; 60
    229c:	09 f4       	brne	.+2      	; 0x22a0 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xd2>
    229e:	76 c0       	rjmp	.+236    	; 0x238c <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x1be>
    22a0:	8d 33       	cpi	r24, 0x3D	; 61
    22a2:	50 f4       	brcc	.+20     	; 0x22b8 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xea>
    22a4:	8f 32       	cpi	r24, 0x2F	; 47
    22a6:	09 f4       	brne	.+2      	; 0x22aa <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xdc>
    22a8:	e9 c0       	rjmp	.+466    	; 0x247c <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2ae>
    22aa:	84 33       	cpi	r24, 0x34	; 52
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xe2>
    22ae:	50 c0       	rjmp	.+160    	; 0x2350 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x182>
    22b0:	8f 31       	cpi	r24, 0x1F	; 31
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xe8>
    22b4:	01 c1       	rjmp	.+514    	; 0x24b8 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2ea>
    22b6:	88 c0       	rjmp	.+272    	; 0x23c8 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x1fa>
    22b8:	83 34       	cpi	r24, 0x43	; 67
    22ba:	09 f4       	brne	.+2      	; 0x22be <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xf0>
    22bc:	61 c0       	rjmp	.+194    	; 0x2380 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x1b2>
    22be:	84 34       	cpi	r24, 0x44	; 68
    22c0:	20 f4       	brcc	.+8      	; 0x22ca <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xfc>
    22c2:	82 34       	cpi	r24, 0x42	; 66
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0xfa>
    22c6:	f8 c0       	rjmp	.+496    	; 0x24b8 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2ea>
    22c8:	2f c0       	rjmp	.+94     	; 0x2328 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x15a>
    22ca:	84 34       	cpi	r24, 0x44	; 68
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x102>
    22ce:	40 c0       	rjmp	.+128    	; 0x2350 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x182>
    22d0:	86 34       	cpi	r24, 0x46	; 70
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x108>
    22d4:	f1 c0       	rjmp	.+482    	; 0x24b8 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2ea>
    22d6:	a0 c0       	rjmp	.+320    	; 0x2418 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x24a>
    ////////////////////////////////////////////////////////////////////
    /// Two Byte Messages
    ////////////////////////////////////////////////////////////////////
    case ENGINE_RPM: 
    engine_data =  value/4;
    22d8:	f8 01       	movw	r30, r16
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e8       	ldi	r20, 0x80	; 128
    22e8:	5e e3       	ldi	r21, 0x3E	; 62
    22ea:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    22ee:	d6 2e       	mov	r13, r22
    22f0:	17 2f       	mov	r17, r23
    22f2:	c8 2e       	mov	r12, r24
    22f4:	09 2f       	mov	r16, r25
	unit = "";
    22f6:	ce 01       	movw	r24, r28
    22f8:	0f 96       	adiw	r24, 0x0f	; 15
    22fa:	69 e2       	ldi	r22, 0x29	; 41
    22fc:	74 e0       	ldi	r23, 0x04	; 4
    22fe:	d7 c0       	rjmp	.+430    	; 0x24ae <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2e0>
    updated = true;
    break;
    
    case MAF_SENSOR:
    engine_data =  value/100;
    2300:	d8 01       	movw	r26, r16
    2302:	6d 91       	ld	r22, X+
    2304:	7d 91       	ld	r23, X+
    2306:	8d 91       	ld	r24, X+
    2308:	9c 91       	ld	r25, X
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	48 ec       	ldi	r20, 0xC8	; 200
    2310:	52 e4       	ldi	r21, 0x42	; 66
    2312:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__divsf3>
    2316:	d6 2e       	mov	r13, r22
    2318:	17 2f       	mov	r17, r23
    231a:	c8 2e       	mov	r12, r24
    231c:	09 2f       	mov	r16, r25
	unit = "G";
    231e:	ce 01       	movw	r24, r28
    2320:	0f 96       	adiw	r24, 0x0f	; 15
    2322:	6a e6       	ldi	r22, 0x6A	; 106
    2324:	74 e0       	ldi	r23, 0x04	; 4
    2326:	c3 c0       	rjmp	.+390    	; 0x24ae <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2e0>
    updated = true;							
    break;
    
    case CONTROL_MODULE:
    engine_data = value/1000;
    2328:	f8 01       	movw	r30, r16
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	4a e7       	ldi	r20, 0x7A	; 122
    2338:	54 e4       	ldi	r21, 0x44	; 68
    233a:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__divsf3>
    233e:	d6 2e       	mov	r13, r22
    2340:	17 2f       	mov	r17, r23
    2342:	c8 2e       	mov	r12, r24
    2344:	09 2f       	mov	r16, r25
	unit = "v";
    2346:	ce 01       	movw	r24, r28
    2348:	0f 96       	adiw	r24, 0x0f	; 15
    234a:	6c e6       	ldi	r22, 0x6C	; 108
    234c:	74 e0       	ldi	r23, 0x04	; 4
    234e:	af c0       	rjmp	.+350    	; 0x24ae <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2e0>
    updated = true;
    break;
    
    case WB_AFR:
    case OL_AFR:
    engine_data = (value/32768.0) * 14.7;
    2350:	d8 01       	movw	r26, r16
    2352:	6d 91       	ld	r22, X+
    2354:	7d 91       	ld	r23, X+
    2356:	8d 91       	ld	r24, X+
    2358:	9c 91       	ld	r25, X
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	58 e3       	ldi	r21, 0x38	; 56
    2362:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    2366:	23 e3       	ldi	r18, 0x33	; 51
    2368:	33 e3       	ldi	r19, 0x33	; 51
    236a:	4b e6       	ldi	r20, 0x6B	; 107
    236c:	51 e4       	ldi	r21, 0x41	; 65
    236e:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    2372:	d6 2e       	mov	r13, r22
    2374:	17 2f       	mov	r17, r23
    2376:	c8 2e       	mov	r12, r24
    2378:	09 2f       	mov	r16, r25
	decimal = 1;
    237a:	21 e0       	ldi	r18, 0x01	; 1
    237c:	30 e0       	ldi	r19, 0x00	; 0
    updated = true;
    break;
    237e:	b1 c0       	rjmp	.+354    	; 0x24e2 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x314>

    case LOAD:
    engine_data = (value*100)/255;
    2380:	f8 01       	movw	r30, r16
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	7d c0       	rjmp	.+250    	; 0x2486 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2b8>
    updated = true;
    break;

    case CAT_TEMP:
#ifndef _INTERNATIONAL	
    engine_data = ((value/10) - 40)*1.8;
    238c:	d8 01       	movw	r26, r16
    238e:	6d 91       	ld	r22, X+
    2390:	7d 91       	ld	r23, X+
    2392:	8d 91       	ld	r24, X+
    2394:	9c 91       	ld	r25, X
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__divsf3>
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e2       	ldi	r20, 0x20	; 32
    23a8:	52 e4       	ldi	r21, 0x42	; 66
    23aa:	0e 94 6e 28 	call	0x50dc	; 0x50dc <__subsf3>
    23ae:	26 e6       	ldi	r18, 0x66	; 102
    23b0:	36 e6       	ldi	r19, 0x66	; 102
    23b2:	46 ee       	ldi	r20, 0xE6	; 230
    23b4:	5f e3       	ldi	r21, 0x3F	; 63
    23b6:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    engine_data = engine_data + 32;
    23ba:	46 2f       	mov	r20, r22
    23bc:	57 2f       	mov	r21, r23
    23be:	68 2f       	mov	r22, r24
    23c0:	79 2f       	mov	r23, r25
    23c2:	cb 01       	movw	r24, r22
    23c4:	ba 01       	movw	r22, r20
    23c6:	33 c0       	rjmp	.+102    	; 0x242e <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x260>
#endif
    updated = true;
    break;
        
    case RUNTIME:
    engine_data = value / 60;
    23c8:	f8 01       	movw	r30, r16
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e7       	ldi	r20, 0x70	; 112
    23d8:	52 e4       	ldi	r21, 0x42	; 66
    23da:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__divsf3>
    23de:	d6 2e       	mov	r13, r22
    23e0:	17 2f       	mov	r17, r23
    23e2:	c8 2e       	mov	r12, r24
    23e4:	09 2f       	mov	r16, r25
	unit = "m";
    23e6:	ce 01       	movw	r24, r28
    23e8:	0f 96       	adiw	r24, 0x0f	; 15
    23ea:	63 e7       	ldi	r22, 0x73	; 115
    23ec:	74 e0       	ldi	r23, 0x04	; 4
    23ee:	5f c0       	rjmp	.+190    	; 0x24ae <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2e0>
    ////////////////////////////////////////////////////////////////////
    /// One Byte Messages
    ////////////////////////////////////////////////////////////////////     
    case VEHICLE_SPEED: 
#ifndef _INTERNATIONAL
    engine_data =  (value / 1.609344);					
    23f0:	d8 01       	movw	r26, r16
    23f2:	6d 91       	ld	r22, X+
    23f4:	7d 91       	ld	r23, X+
    23f6:	8d 91       	ld	r24, X+
    23f8:	9c 91       	ld	r25, X
    23fa:	2c ef       	ldi	r18, 0xFC	; 252
    23fc:	3e ef       	ldi	r19, 0xFE	; 254
    23fe:	4d ec       	ldi	r20, 0xCD	; 205
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__divsf3>
    2406:	d6 2e       	mov	r13, r22
    2408:	17 2f       	mov	r17, r23
    240a:	c8 2e       	mov	r12, r24
    240c:	09 2f       	mov	r16, r25
	unit = "mph";
    240e:	ce 01       	movw	r24, r28
    2410:	0f 96       	adiw	r24, 0x0f	; 15
    2412:	65 e7       	ldi	r22, 0x75	; 117
    2414:	74 e0       	ldi	r23, 0x04	; 4
    2416:	4b c0       	rjmp	.+150    	; 0x24ae <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2e0>
        
    case IAT:
    case ENGINE_COOLANT_TEMP: 
    case AMBIENT_TEMP:
#ifndef _INTERNATIONAL	
    engine_data =  ((9/5) * (value - 40)) + 32; 
    2418:	f8 01       	movw	r30, r16
    241a:	60 81       	ld	r22, Z
    241c:	71 81       	ldd	r23, Z+1	; 0x01
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	93 81       	ldd	r25, Z+3	; 0x03
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e2       	ldi	r20, 0x20	; 32
    2428:	52 e4       	ldi	r21, 0x42	; 66
    242a:	0e 94 6e 28 	call	0x50dc	; 0x50dc <__subsf3>
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	52 e4       	ldi	r21, 0x42	; 66
    2436:	0e 94 6f 28 	call	0x50de	; 0x50de <__addsf3>
    243a:	d6 2e       	mov	r13, r22
    243c:	17 2f       	mov	r17, r23
    243e:	c8 2e       	mov	r12, r24
    2440:	09 2f       	mov	r16, r25
	unit = "*F";
    2442:	ce 01       	movw	r24, r28
    2444:	0f 96       	adiw	r24, 0x0f	; 15
    2446:	60 e7       	ldi	r22, 0x70	; 112
    2448:	74 e0       	ldi	r23, 0x04	; 4
    244a:	31 c0       	rjmp	.+98     	; 0x24ae <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2e0>
    updated = true;
    break;
    
    case STFT:
    case LTFT:
    engine_data = ((value - 128) * 100/128);
    244c:	f8 01       	movw	r30, r16
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	53 e4       	ldi	r21, 0x43	; 67
    245e:	0e 94 6e 28 	call	0x50dc	; 0x50dc <__subsf3>
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	48 ec       	ldi	r20, 0xC8	; 200
    2468:	52 e4       	ldi	r21, 0x42	; 66
    246a:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	5c e3       	ldi	r21, 0x3C	; 60
    2476:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    247a:	11 c0       	rjmp	.+34     	; 0x249e <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2d0>
	unit = "%";
    updated = true;
    break;
    
    case FUELLEVEL:
    engine_data = ((value * 100)/255);
    247c:	d8 01       	movw	r26, r16
    247e:	6d 91       	ld	r22, X+
    2480:	7d 91       	ld	r23, X+
    2482:	8d 91       	ld	r24, X+
    2484:	9c 91       	ld	r25, X
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	48 ec       	ldi	r20, 0xC8	; 200
    248c:	52 e4       	ldi	r21, 0x42	; 66
    248e:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	53 e4       	ldi	r21, 0x43	; 67
    249a:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__divsf3>
    249e:	d6 2e       	mov	r13, r22
    24a0:	17 2f       	mov	r17, r23
    24a2:	c8 2e       	mov	r12, r24
    24a4:	09 2f       	mov	r16, r25
	unit = "%";
    24a6:	ce 01       	movw	r24, r28
    24a8:	0f 96       	adiw	r24, 0x0f	; 15
    24aa:	6e e6       	ldi	r22, 0x6E	; 110
    24ac:	74 e0       	ldi	r23, 0x04	; 4
    24ae:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <_ZN6StringaSEPKc>
 */
boolean CanbusMessage::getGenericMessage(const byte& responsePid, const float& value, String& engineData) {
  float engine_data;
  boolean updated = false;
  String unit;
  int decimal = 0;
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    
    case FUELLEVEL:
    engine_data = ((value * 100)/255);
	unit = "%";
    updated = true;
    break;
    24b6:	15 c0       	rjmp	.+42     	; 0x24e2 <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x314>
 * @param  value        The value from the response
 * @param  engineData   The response from the engine
 */
boolean CanbusMessage::getGenericMessage(const byte& responsePid, const float& value, String& engineData) {
  float engine_data;
  boolean updated = false;
    24b8:	10 e0       	ldi	r17, 0x00	; 0
  String unit;
    24ba:	ce 01       	movw	r24, r28
    24bc:	0f 96       	adiw	r24, 0x0f	; 15
    24be:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
	Serial.println(engineData);
  }	
  
  // return
  return updated;
}
    24c2:	81 2f       	mov	r24, r17
    24c4:	6f 96       	adiw	r28, 0x1f	; 31
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	1f 91       	pop	r17
    24d6:	0f 91       	pop	r16
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	df 90       	pop	r13
    24de:	cf 90       	pop	r12
    24e0:	08 95       	ret
    break;
  }
  
  if(updated) {  
	char temp[10];
	dtostrf(engine_data, SCREEN2MAX - 1, decimal, temp);
    24e2:	8d 2d       	mov	r24, r13
    24e4:	91 2f       	mov	r25, r17
    24e6:	ac 2d       	mov	r26, r12
    24e8:	b0 2f       	mov	r27, r16
    24ea:	bc 01       	movw	r22, r24
    24ec:	cd 01       	movw	r24, r26
    24ee:	45 e0       	ldi	r20, 0x05	; 5
    24f0:	8e 01       	movw	r16, r28
    24f2:	0a 5e       	subi	r16, 0xEA	; 234
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
    24f6:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <dtostrf>
	engineData = String(temp) + unit;
    24fa:	ce 01       	movw	r24, r28
    24fc:	08 96       	adiw	r24, 0x08	; 8
    24fe:	b8 01       	movw	r22, r16
    2500:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2504:	ce 01       	movw	r24, r28
    2506:	01 96       	adiw	r24, 0x01	; 1
    2508:	be 01       	movw	r22, r28
    250a:	68 5f       	subi	r22, 0xF8	; 248
    250c:	7f 4f       	sbci	r23, 0xFF	; 255
    250e:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <_ZN6StringC2ERKS_>
    2512:	ce 01       	movw	r24, r28
    2514:	01 96       	adiw	r24, 0x01	; 1
    2516:	be 01       	movw	r22, r28
    2518:	61 5f       	subi	r22, 0xF1	; 241
    251a:	7f 4f       	sbci	r23, 0xFF	; 255
    251c:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZplRK15StringSumHelperRK6String>
    2520:	bc 01       	movw	r22, r24
    2522:	c7 01       	movw	r24, r14
    2524:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN6StringaSERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2528:	ce 01       	movw	r24, r28
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <_ZN6StringD2Ev>
    2530:	ce 01       	movw	r24, r28
    2532:	08 96       	adiw	r24, 0x08	; 8
    2534:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
	engineData.trim();
    2538:	c7 01       	movw	r24, r14
    253a:	0e 94 ef 24 	call	0x49de	; 0x49de <_ZN6String4trimEv>
	Serial.println(engineData);
    253e:	8a ec       	ldi	r24, 0xCA	; 202
    2540:	96 e0       	ldi	r25, 0x06	; 6
    2542:	b7 01       	movw	r22, r14
    2544:	0e 94 ca 24 	call	0x4994	; 0x4994 <_ZN5Print7printlnERK6String>
    2548:	11 e0       	ldi	r17, 0x01	; 1
    254a:	b7 cf       	rjmp	.-146    	; 0x24ba <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String+0x2ec>

0000254c <_ZN13CanbusMessage15getMazdaMessageERKjRK5FrameR6String>:
 * @param    pid      The pid that we are looking for
 * @param    message  The message frame to analyze
 * @param    engineData The data from the engine
 * @return   True if successful reading
 */
boolean CanbusMessage::getMazdaMessage(const unsigned int& pid, const Frame& message, String& engineData) {
    254c:	8f 92       	push	r8
    254e:	9f 92       	push	r9
    2550:	af 92       	push	r10
    2552:	bf 92       	push	r11
    2554:	cf 92       	push	r12
    2556:	df 92       	push	r13
    2558:	ef 92       	push	r14
    255a:	ff 92       	push	r15
    255c:	0f 93       	push	r16
    255e:	1f 93       	push	r17
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	67 97       	sbiw	r28, 0x17	; 23
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	6b 01       	movw	r12, r22
    2576:	4a 01       	movw	r8, r20
  boolean updated = false;
  char buffer[8];

  switch(message.adrsValue) {
    2578:	db 01       	movw	r26, r22
    257a:	2d 91       	ld	r18, X+
    257c:	3c 91       	ld	r19, X
    257e:	11 97       	sbiw	r26, 0x01	; 1
    2580:	b4 e0       	ldi	r27, 0x04	; 4
    2582:	20 3b       	cpi	r18, 0xB0	; 176
    2584:	3b 07       	cpc	r19, r27
    2586:	09 f0       	breq	.+2      	; 0x258a <_ZN13CanbusMessage15getMazdaMessageERKjRK5FrameR6String+0x3e>
    2588:	7c c0       	rjmp	.+248    	; 0x2682 <_ZN13CanbusMessage15getMazdaMessageERKjRK5FrameR6String+0x136>
    case ID_4B0:
    if(pid == ID_4B0) {
    258a:	fc 01       	movw	r30, r24
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	f4 e0       	ldi	r31, 0x04	; 4
    2592:	80 3b       	cpi	r24, 0xB0	; 176
    2594:	9f 07       	cpc	r25, r31
    2596:	09 f0       	breq	.+2      	; 0x259a <_ZN13CanbusMessage15getMazdaMessageERKjRK5FrameR6String+0x4e>
    2598:	74 c0       	rjmp	.+232    	; 0x2682 <_ZN13CanbusMessage15getMazdaMessageERKjRK5FrameR6String+0x136>
    259a:	98 e0       	ldi	r25, 0x08	; 8
    259c:	e9 2e       	mov	r14, r25
    259e:	f1 2c       	mov	r15, r1
    25a0:	ec 0e       	add	r14, r28
    25a2:	fd 1e       	adc	r15, r29
    25a4:	00 e0       	ldi	r16, 0x00	; 0
    25a6:	10 e0       	ldi	r17, 0x00	; 0
      int val[4], j = 0;
      for(int i = 0; i < 4; i++) {
        val[i] = (message.data[j++] << 0x08) + message.data[j++];
#ifndef _INTERNATIONAL
        val[i] = ((val[i] - 10000)/100) / 1.609344;
    25a8:	24 e6       	ldi	r18, 0x64	; 100
    25aa:	a2 2e       	mov	r10, r18
    25ac:	b1 2c       	mov	r11, r1
 * @param    pid      The pid that we are looking for
 * @param    message  The message frame to analyze
 * @param    engineData The data from the engine
 * @return   True if successful reading
 */
boolean CanbusMessage::getMazdaMessage(const unsigned int& pid, const Frame& message, String& engineData) {
    25ae:	f6 01       	movw	r30, r12
    25b0:	e0 0f       	add	r30, r16
    25b2:	f1 1f       	adc	r31, r17
  switch(message.adrsValue) {
    case ID_4B0:
    if(pid == ID_4B0) {
      int val[4], j = 0;
      for(int i = 0; i < 4; i++) {
        val[i] = (message.data[j++] << 0x08) + message.data[j++];
    25b4:	21 85       	ldd	r18, Z+9	; 0x09
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	0e 5f       	subi	r16, 0xFE	; 254
    25ba:	1f 4f       	sbci	r17, 0xFF	; 255
    25bc:	92 2f       	mov	r25, r18
    25be:	88 27       	eor	r24, r24
    25c0:	82 0f       	add	r24, r18
    25c2:	93 1f       	adc	r25, r19
#ifndef _INTERNATIONAL
        val[i] = ((val[i] - 10000)/100) / 1.609344;
    25c4:	80 51       	subi	r24, 0x10	; 16
    25c6:	97 42       	sbci	r25, 0x27	; 39
    25c8:	b5 01       	movw	r22, r10
    25ca:	0e 94 ac 2a 	call	0x5558	; 0x5558 <__divmodhi4>
    25ce:	88 27       	eor	r24, r24
    25d0:	77 fd       	sbrc	r23, 7
    25d2:	80 95       	com	r24
    25d4:	98 2f       	mov	r25, r24
    25d6:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__floatsisf>
    25da:	2c ef       	ldi	r18, 0xFC	; 252
    25dc:	3e ef       	ldi	r19, 0xFE	; 254
    25de:	4d ec       	ldi	r20, 0xCD	; 205
    25e0:	5f e3       	ldi	r21, 0x3F	; 63
    25e2:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__divsf3>
    25e6:	0e 94 3f 29 	call	0x527e	; 0x527e <__fixsfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	f7 01       	movw	r30, r14
    25f0:	81 93       	st	Z+, r24
    25f2:	91 93       	st	Z+, r25
    25f4:	7f 01       	movw	r14, r30

  switch(message.adrsValue) {
    case ID_4B0:
    if(pid == ID_4B0) {
      int val[4], j = 0;
      for(int i = 0; i < 4; i++) {
    25f6:	08 30       	cpi	r16, 0x08	; 8
    25f8:	11 05       	cpc	r17, r1
    25fa:	c9 f6       	brne	.-78     	; 0x25ae <_ZN13CanbusMessage15getMazdaMessageERKjRK5FrameR6String+0x62>
        val[i] = ((val[i] - 10000)/100) / 1.609344;
#else
		val[i] = (val[i] - 10000)/100;
#endif
      }
      sprintf(buffer, "%d/%d %d/%d", val[0], val[1], val[2], val[3]);
    25fc:	8d b7       	in	r24, 0x3d	; 61
    25fe:	9e b7       	in	r25, 0x3e	; 62
    2600:	0c 97       	sbiw	r24, 0x0c	; 12
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	9e bf       	out	0x3e, r25	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	8d bf       	out	0x3d, r24	; 61
    260c:	ed b7       	in	r30, 0x3d	; 61
    260e:	fe b7       	in	r31, 0x3e	; 62
    2610:	31 96       	adiw	r30, 0x01	; 1
    2612:	8e 01       	movw	r16, r28
    2614:	00 5f       	subi	r16, 0xF0	; 240
    2616:	1f 4f       	sbci	r17, 0xFF	; 255
    2618:	ad b7       	in	r26, 0x3d	; 61
    261a:	be b7       	in	r27, 0x3e	; 62
    261c:	12 96       	adiw	r26, 0x02	; 2
    261e:	1c 93       	st	X, r17
    2620:	0e 93       	st	-X, r16
    2622:	11 97       	sbiw	r26, 0x01	; 1
    2624:	89 e7       	ldi	r24, 0x79	; 121
    2626:	94 e0       	ldi	r25, 0x04	; 4
    2628:	93 83       	std	Z+3, r25	; 0x03
    262a:	82 83       	std	Z+2, r24	; 0x02
    262c:	88 85       	ldd	r24, Y+8	; 0x08
    262e:	99 85       	ldd	r25, Y+9	; 0x09
    2630:	95 83       	std	Z+5, r25	; 0x05
    2632:	84 83       	std	Z+4, r24	; 0x04
    2634:	8a 85       	ldd	r24, Y+10	; 0x0a
    2636:	9b 85       	ldd	r25, Y+11	; 0x0b
    2638:	97 83       	std	Z+7, r25	; 0x07
    263a:	86 83       	std	Z+6, r24	; 0x06
    263c:	8c 85       	ldd	r24, Y+12	; 0x0c
    263e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2640:	91 87       	std	Z+9, r25	; 0x09
    2642:	80 87       	std	Z+8, r24	; 0x08
    2644:	8e 85       	ldd	r24, Y+14	; 0x0e
    2646:	9f 85       	ldd	r25, Y+15	; 0x0f
    2648:	93 87       	std	Z+11, r25	; 0x0b
    264a:	82 87       	std	Z+10, r24	; 0x0a
    264c:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <sprintf>
    }
    break;
  }
  
  if(updated)
    engineData = String(buffer);  
    2650:	ed b7       	in	r30, 0x3d	; 61
    2652:	fe b7       	in	r31, 0x3e	; 62
    2654:	3c 96       	adiw	r30, 0x0c	; 12
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	fe bf       	out	0x3e, r31	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	ed bf       	out	0x3d, r30	; 61
    2660:	ce 01       	movw	r24, r28
    2662:	01 96       	adiw	r24, 0x01	; 1
    2664:	b8 01       	movw	r22, r16
    2666:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
    266a:	c4 01       	movw	r24, r8
    266c:	be 01       	movw	r22, r28
    266e:	6f 5f       	subi	r22, 0xFF	; 255
    2670:	7f 4f       	sbci	r23, 0xFF	; 255
    2672:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN6StringaSERKS_>
    2676:	ce 01       	movw	r24, r28
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
#else
		val[i] = (val[i] - 10000)/100;
#endif
      }
      sprintf(buffer, "%d/%d %d/%d", val[0], val[1], val[2], val[3]);
      updated = true;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <_ZN13CanbusMessage15getMazdaMessageERKjRK5FrameR6String+0x138>
  boolean updated = false;
  char buffer[8];

  switch(message.adrsValue) {
    case ID_4B0:
    if(pid == ID_4B0) {
    2682:	80 e0       	ldi	r24, 0x00	; 0
  if(updated)
    engineData = String(buffer);  
	
  // return
  return updated;
}
    2684:	67 96       	adiw	r28, 0x17	; 23
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	ff 90       	pop	r15
    269a:	ef 90       	pop	r14
    269c:	df 90       	pop	r13
    269e:	cf 90       	pop	r12
    26a0:	bf 90       	pop	r11
    26a2:	af 90       	pop	r10
    26a4:	9f 90       	pop	r9
    26a6:	8f 90       	pop	r8
    26a8:	08 95       	ret

000026aa <_ZN13CanbusMessage12parseMessageERK5FrameRKi>:
 *
 * @param message  The message to parse
 * @param bytes    The number of bytes in the message
 * @return		   The parsed message as a float
 */
float CanbusMessage::parseMessage(const Frame& message, const int& bytes) {
    26aa:	cf 92       	push	r12
    26ac:	df 92       	push	r13
    26ae:	ef 92       	push	r14
    26b0:	ff 92       	push	r15
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	8c 01       	movw	r16, r24
    26bc:	eb 01       	movw	r28, r22
  DebugMethods::serialDebug("Parsing Message", true);
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <_ZN13CanbusMessage12parseMessageERK5FrameRKi+0x16>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <_ZN13CanbusMessage12parseMessageERK5FrameRKi+0x18>
    26c2:	85 e8       	ldi	r24, 0x85	; 133
    26c4:	94 e0       	ldi	r25, 0x04	; 4
    26c6:	ed b7       	in	r30, 0x3d	; 61
    26c8:	fe b7       	in	r31, 0x3e	; 62
    26ca:	92 83       	std	Z+2, r25	; 0x02
    26cc:	81 83       	std	Z+1, r24	; 0x01
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	94 83       	std	Z+4, r25	; 0x04
    26d4:	83 83       	std	Z+3, r24	; 0x03
    26d6:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
  float value = PARSEFAILURE;
  if(bytes == 1) {
    26da:	88 81       	ld	r24, Y
    26dc:	99 81       	ldd	r25, Y+1	; 0x01
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	81 30       	cpi	r24, 0x01	; 1
    26e8:	91 05       	cpc	r25, r1
    26ea:	41 f4       	brne	.+16     	; 0x26fc <_ZN13CanbusMessage12parseMessageERK5FrameRKi+0x52>
    value = (float)message.data[3];
    26ec:	f8 01       	movw	r30, r16
    26ee:	64 85       	ldd	r22, Z+12	; 0x0c
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 70 29 	call	0x52e0	; 0x52e0 <__floatunsisf>
    26fa:	24 c0       	rjmp	.+72     	; 0x2744 <_ZN13CanbusMessage12parseMessageERK5FrameRKi+0x9a>
  } else if (bytes == 2) {
    26fc:	82 30       	cpi	r24, 0x02	; 2
    26fe:	91 05       	cpc	r25, r1
    2700:	e9 f4       	brne	.+58     	; 0x273c <_ZN13CanbusMessage12parseMessageERK5FrameRKi+0x92>
    value = ((float)message.data[3] * 256.0) + ((float)message.data[4]);
    2702:	f8 01       	movw	r30, r16
    2704:	64 85       	ldd	r22, Z+12	; 0x0c
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 70 29 	call	0x52e0	; 0x52e0 <__floatunsisf>
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e8       	ldi	r20, 0x80	; 128
    2716:	53 e4       	ldi	r21, 0x43	; 67
    2718:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    271c:	6b 01       	movw	r12, r22
    271e:	7c 01       	movw	r14, r24
    2720:	f8 01       	movw	r30, r16
    2722:	65 85       	ldd	r22, Z+13	; 0x0d
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 70 29 	call	0x52e0	; 0x52e0 <__floatunsisf>
    272e:	9b 01       	movw	r18, r22
    2730:	ac 01       	movw	r20, r24
    2732:	c7 01       	movw	r24, r14
    2734:	b6 01       	movw	r22, r12
    2736:	0e 94 6f 28 	call	0x50de	; 0x50de <__addsf3>
    273a:	04 c0       	rjmp	.+8      	; 0x2744 <_ZN13CanbusMessage12parseMessageERK5FrameRKi+0x9a>
 * @param bytes    The number of bytes in the message
 * @return		   The parsed message as a float
 */
float CanbusMessage::parseMessage(const Frame& message, const int& bytes) {
  DebugMethods::serialDebug("Parsing Message", true);
  float value = PARSEFAILURE;
    273c:	60 e0       	ldi	r22, 0x00	; 0
    273e:	7c e3       	ldi	r23, 0x3C	; 60
    2740:	8c e1       	ldi	r24, 0x1C	; 28
    2742:	96 ec       	ldi	r25, 0xC6	; 198
    value = (float)message.data[3];
  } else if (bytes == 2) {
    value = ((float)message.data[3] * 256.0) + ((float)message.data[4]);
  }
  return value;  
}
    2744:	38 2f       	mov	r19, r24
    2746:	29 2f       	mov	r18, r25
    2748:	86 2f       	mov	r24, r22
    274a:	97 2f       	mov	r25, r23
    274c:	a3 2f       	mov	r26, r19
    274e:	b2 2f       	mov	r27, r18
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	1f 91       	pop	r17
    275a:	0f 91       	pop	r16
    275c:	ff 90       	pop	r15
    275e:	ef 90       	pop	r14
    2760:	df 90       	pop	r13
    2762:	cf 90       	pop	r12
    2764:	08 95       	ret

00002766 <_ZN13CanbusMessage13createMessageERKjR5Frame>:
/** 
 * Create a standard CANBUS message with the supplied PID
 * @param	pid	    The PID to request
 * @param	message The message object to modify
 */
void CanbusMessage::createMessage(const unsigned int& pid, Frame& message) {
    2766:	fb 01       	movw	r30, r22
  message.adrsValue = PID_REQUEST;
    2768:	2f ed       	ldi	r18, 0xDF	; 223
    276a:	37 e0       	ldi	r19, 0x07	; 7
    276c:	31 83       	std	Z+1, r19	; 0x01
    276e:	20 83       	st	Z, r18
  message.isExtendedAdrs = false;
    2770:	12 82       	std	Z+2, r1	; 0x02
  message.extendedAdrsValue = 0;
    2772:	13 82       	std	Z+3, r1	; 0x03
    2774:	14 82       	std	Z+4, r1	; 0x04
    2776:	15 82       	std	Z+5, r1	; 0x05
    2778:	16 82       	std	Z+6, r1	; 0x06
  message.rtr = false;
    277a:	17 82       	std	Z+7, r1	; 0x07
  message.dataLength = 8;
    277c:	28 e0       	ldi	r18, 0x08	; 8
    277e:	20 87       	std	Z+8, r18	; 0x08
  message.data[0] = 0x02;
    2780:	22 e0       	ldi	r18, 0x02	; 2
    2782:	21 87       	std	Z+9, r18	; 0x09
  message.data[1] = 0x01;
    2784:	21 e0       	ldi	r18, 0x01	; 1
    2786:	22 87       	std	Z+10, r18	; 0x0a
  message.data[2] = pid;
    2788:	dc 01       	movw	r26, r24
    278a:	8c 91       	ld	r24, X
    278c:	83 87       	std	Z+11, r24	; 0x0b
  for(int i = 3; i < 8; i++) {
    message.data[i] = 0x00;
    278e:	14 86       	std	Z+12, r1	; 0x0c
    2790:	15 86       	std	Z+13, r1	; 0x0d
    2792:	16 86       	std	Z+14, r1	; 0x0e
    2794:	17 86       	std	Z+15, r1	; 0x0f
    2796:	10 8a       	std	Z+16, r1	; 0x10
  }
}
    2798:	08 95       	ret

0000279a <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi>:
 * @param  HSCAN		The HSCAN object
 * @param  byteOverride If set, used instead of 'byteCount'
 * @return              True if we were able to read data
 */
boolean CanbusMessage::getEngineData(const unsigned int& pid, String& engineData, 
									 MCP2515& HSCAN, const int& byteOverride) {
    279a:	af 92       	push	r10
    279c:	bf 92       	push	r11
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	6f 97       	sbiw	r28, 0x1f	; 31
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	7c 01       	movw	r14, r24
    27c0:	5b 01       	movw	r10, r22
    27c2:	6a 01       	movw	r12, r20
    27c4:	89 01       	movw	r16, r18
  RxduinoMethods::enableHSCAN();
    27c6:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <_ZN14RxduinoMethods11enableHSCANEv>

  // CAN Structure
  Frame message;
  bool messageRead = false;
    27ca:	1b 82       	std	Y+3, r1	; 0x03
  boolean getEngineDataSuccess = false;
  
  // Byte count
  int bc = 0;
    27cc:	1d 82       	std	Y+5, r1	; 0x05
    27ce:	1c 82       	std	Y+4, r1	; 0x04
  if(byteOverride == 0)
    27d0:	f8 01       	movw	r30, r16
    27d2:	80 81       	ld	r24, Z
    27d4:	91 81       	ldd	r25, Z+1	; 0x01
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	19 f4       	brne	.+6      	; 0x27e0 <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0x46>
	bc = getByteCount(pid);  
    27da:	c7 01       	movw	r24, r14
    27dc:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN13CanbusMessage12getByteCountERKj>
  else
    bc = byteOverride;
    27e0:	9d 83       	std	Y+5, r25	; 0x05
    27e2:	8c 83       	std	Y+4, r24	; 0x04
  
#ifndef _DEBUGDATA     
  if(pid != ID_4B0 && pid != LISTENONLY) {
    27e4:	f7 01       	movw	r30, r14
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	f4 e0       	ldi	r31, 0x04	; 4
    27ec:	80 3b       	cpi	r24, 0xB0	; 176
    27ee:	9f 07       	cpc	r25, r31
    27f0:	b1 f0       	breq	.+44     	; 0x281e <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0x84>
    27f2:	27 e2       	ldi	r18, 0x27	; 39
    27f4:	8f 30       	cpi	r24, 0x0F	; 15
    27f6:	92 07       	cpc	r25, r18
    27f8:	91 f0       	breq	.+36     	; 0x281e <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0x84>
     HSCAN.queryOBD(pid, message, messageRead);
    27fa:	8a 83       	std	Y+2, r24	; 0x02
    27fc:	19 82       	std	Y+1, r1	; 0x01
    27fe:	c6 01       	movw	r24, r12
    2800:	be 01       	movw	r22, r28
    2802:	6e 5f       	subi	r22, 0xFE	; 254
    2804:	7f 4f       	sbci	r23, 0xFF	; 255
    2806:	ae 01       	movw	r20, r28
    2808:	42 5f       	subi	r20, 0xF2	; 242
    280a:	5f 4f       	sbci	r21, 0xFF	; 255
    280c:	9e 01       	movw	r18, r28
    280e:	2d 5f       	subi	r18, 0xFD	; 253
    2810:	3f 4f       	sbci	r19, 0xFF	; 255
    2812:	8e 01       	movw	r16, r28
    2814:	0f 5f       	subi	r16, 0xFF	; 255
    2816:	1f 4f       	sbci	r17, 0xFF	; 255
    2818:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <_ZN7MCP25158queryOBDERKhR5FrameRbS1_>
    281c:	1c c0       	rjmp	.+56     	; 0x2856 <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0xbc>
  } else {
	 // Create the canbus message
	 createMessage(pid, message);
    281e:	c7 01       	movw	r24, r14
    2820:	be 01       	movw	r22, r28
    2822:	62 5f       	subi	r22, 0xF2	; 242
    2824:	7f 4f       	sbci	r23, 0xFF	; 255
    2826:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN13CanbusMessage13createMessageERKjR5Frame>
	 
     messageRead = HSCAN.receiveCANMessage(message, 25);
    282a:	89 e1       	ldi	r24, 0x19	; 25
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	a0 e0       	ldi	r26, 0x00	; 0
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	8a 87       	std	Y+10, r24	; 0x0a
    2834:	9b 87       	std	Y+11, r25	; 0x0b
    2836:	ac 87       	std	Y+12, r26	; 0x0c
    2838:	bd 87       	std	Y+13, r27	; 0x0d
    283a:	c6 01       	movw	r24, r12
    283c:	be 01       	movw	r22, r28
    283e:	62 5f       	subi	r22, 0xF2	; 242
    2840:	7f 4f       	sbci	r23, 0xFF	; 255
    2842:	ae 01       	movw	r20, r28
    2844:	46 5f       	subi	r20, 0xF6	; 246
    2846:	5f 4f       	sbci	r21, 0xFF	; 255
    2848:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN7MCP251517receiveCANMessageER5FrameRKm>
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	88 23       	and	r24, r24
    2850:	09 f4       	brne	.+2      	; 0x2854 <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0xba>
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9b 83       	std	Y+3, r25	; 0x03
   } 
   messageRead = true;
#endif

  // Get The Response
  if(messageRead) {
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	88 23       	and	r24, r24
    285a:	c1 f1       	breq	.+112    	; 0x28cc <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0x132>
    if(pid != LISTENONLY) {
    285c:	f7 01       	movw	r30, r14
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	f7 e2       	ldi	r31, 0x27	; 39
    2864:	8f 30       	cpi	r24, 0x0F	; 15
    2866:	9f 07       	cpc	r25, r31
    2868:	59 f1       	breq	.+86     	; 0x28c0 <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0x126>
	  // No need, dumping in the MCP lib
      if (pid != ID_4B0 && message.dataLength != byte(1)) {
    286a:	24 e0       	ldi	r18, 0x04	; 4
    286c:	80 3b       	cpi	r24, 0xB0	; 176
    286e:	92 07       	cpc	r25, r18
    2870:	f9 f0       	breq	.+62     	; 0x28b0 <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0x116>
    2872:	8e 89       	ldd	r24, Y+22	; 0x16
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	e1 f0       	breq	.+56     	; 0x28b0 <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0x116>
        float value = parseMessage(message, bc);
    2878:	ce 01       	movw	r24, r28
    287a:	0e 96       	adiw	r24, 0x0e	; 14
    287c:	be 01       	movw	r22, r28
    287e:	6c 5f       	subi	r22, 0xFC	; 252
    2880:	7f 4f       	sbci	r23, 0xFF	; 255
    2882:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN13CanbusMessage12parseMessageERK5FrameRKi>
    2886:	6e 83       	std	Y+6, r22	; 0x06
    2888:	7f 83       	std	Y+7, r23	; 0x07
    288a:	88 87       	std	Y+8, r24	; 0x08
    288c:	99 87       	std	Y+9, r25	; 0x09
		if(value != PARSEFAILURE)
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3c e3       	ldi	r19, 0x3C	; 60
    2892:	4c e1       	ldi	r20, 0x1C	; 28
    2894:	56 ec       	ldi	r21, 0xC6	; 198
    2896:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <__cmpsf2>
    289a:	88 23       	and	r24, r24
    289c:	b9 f0       	breq	.+46     	; 0x28cc <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0x132>
			getEngineDataSuccess = getGenericMessage(message.data[2], value, engineData);
    289e:	ce 01       	movw	r24, r28
    28a0:	49 96       	adiw	r24, 0x19	; 25
    28a2:	be 01       	movw	r22, r28
    28a4:	6a 5f       	subi	r22, 0xFA	; 250
    28a6:	7f 4f       	sbci	r23, 0xFF	; 255
    28a8:	a5 01       	movw	r20, r10
    28aa:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN13CanbusMessage17getGenericMessageERKhRKfR6String>
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0x134>
      } else {
        getEngineDataSuccess = getMazdaMessage(pid, message, engineData);
    28b0:	c7 01       	movw	r24, r14
    28b2:	be 01       	movw	r22, r28
    28b4:	62 5f       	subi	r22, 0xF2	; 242
    28b6:	7f 4f       	sbci	r23, 0xFF	; 255
    28b8:	a5 01       	movw	r20, r10
    28ba:	0e 94 a6 12 	call	0x254c	; 0x254c <_ZN13CanbusMessage15getMazdaMessageERKjRK5FrameR6String>
    28be:	07 c0       	rjmp	.+14     	; 0x28ce <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi+0x134>
      }
    } else {
      // We are in sniffer mode
      DebugMethods::dumpMessage(message, "HSCAN"); 
    28c0:	ce 01       	movw	r24, r28
    28c2:	0e 96       	adiw	r24, 0x0e	; 14
    28c4:	65 e9       	ldi	r22, 0x95	; 149
    28c6:	74 e0       	ldi	r23, 0x04	; 4
    28c8:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN12DebugMethods11dumpMessageERK5FramePKc>
  RxduinoMethods::enableHSCAN();

  // CAN Structure
  Frame message;
  bool messageRead = false;
  boolean getEngineDataSuccess = false;
    28cc:	80 e0       	ldi	r24, 0x00	; 0
      // We are in sniffer mode
      DebugMethods::dumpMessage(message, "HSCAN"); 
    }
  }

  RxduinoMethods::disableCAN();
    28ce:	8f 8f       	std	Y+31, r24	; 0x1f
    28d0:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN14RxduinoMethods10disableCANEv>
  
  return getEngineDataSuccess;
}
    28d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28d6:	6f 96       	adiw	r28, 0x1f	; 31
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	ff 90       	pop	r15
    28ec:	ef 90       	pop	r14
    28ee:	df 90       	pop	r13
    28f0:	cf 90       	pop	r12
    28f2:	bf 90       	pop	r11
    28f4:	af 90       	pop	r10
    28f6:	08 95       	ret

000028f8 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_>:
/**
 * Estimate and display the current miles per gallon, or
 * display a running average of the current drive cycle
 * @param avg	Display running average if true
 */
bool CanbusMessage::getMilesPerGallon(String& engineData, float& avgMpg, const int& currentMode, MCP2515& HSCAN, MCP2515& MSCAN) {
    28f8:	2f 92       	push	r2
    28fa:	3f 92       	push	r3
    28fc:	4f 92       	push	r4
    28fe:	5f 92       	push	r5
    2900:	6f 92       	push	r6
    2902:	7f 92       	push	r7
    2904:	8f 92       	push	r8
    2906:	9f 92       	push	r9
    2908:	af 92       	push	r10
    290a:	bf 92       	push	r11
    290c:	cf 92       	push	r12
    290e:	df 92       	push	r13
    2910:	ef 92       	push	r14
    2912:	ff 92       	push	r15
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	c1 55       	subi	r28, 0x51	; 81
    2922:	d0 40       	sbci	r29, 0x00	; 0
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	3c 01       	movw	r6, r24
    2930:	28 96       	adiw	r28, 0x08	; 8
    2932:	7f af       	sts	0x7f, r23
    2934:	6e af       	sts	0x7e, r22
    2936:	28 97       	sbiw	r28, 0x08	; 8
    2938:	69 01       	movw	r12, r18
		  }
	  }
  }
  
  return true;
    293a:	2d b7       	in	r18, 0x3d	; 61
    293c:	3e b7       	in	r19, 0x3e	; 62
    293e:	2c 96       	adiw	r28, 0x0c	; 12
    2940:	3f af       	sts	0x7f, r19
    2942:	2e af       	sts	0x7e, r18
    2944:	2c 97       	sbiw	r28, 0x0c	; 12
 */
bool CanbusMessage::getMilesPerGallon(String& engineData, float& avgMpg, const int& currentMode, MCP2515& HSCAN, MCP2515& MSCAN) {
  // The equation for MPG is
  // MPG = 710.7 * (VSS * 0.621371) / (MAF * 100)
  
  boolean avg = (currentMode == AVG_MPG);
    2946:	fa 01       	movw	r30, r20
    2948:	01 90       	ld	r0, Z+
    294a:	f0 81       	ld	r31, Z
    294c:	e0 2d       	mov	r30, r0
    294e:	2a 96       	adiw	r28, 0x0a	; 10
    2950:	ff af       	sts	0x7f, r31
    2952:	ee af       	sts	0x7e, r30
    2954:	2a 97       	sbiw	r28, 0x0a	; 10
  // First get our VSS
#ifdef _DEBUGDATA  
  if(true) {
	  String vspeed = "82mph";
#else	  
  if(CanbusMessage::getEngineData(VEHICLE_SPEED, engineData, HSCAN, 1)) { 
    2956:	8d e0       	ldi	r24, 0x0D	; 13
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	98 87       	std	Y+8, r25	; 0x08
    295c:	8f 83       	std	Y+7, r24	; 0x07
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	9e 83       	std	Y+6, r25	; 0x06
    2964:	8d 83       	std	Y+5, r24	; 0x05
    2966:	ce 01       	movw	r24, r28
    2968:	07 96       	adiw	r24, 0x07	; 7
    296a:	b3 01       	movw	r22, r6
    296c:	a6 01       	movw	r20, r12
    296e:	9e 01       	movw	r18, r28
    2970:	2b 5f       	subi	r18, 0xFB	; 251
    2972:	3f 4f       	sbci	r19, 0xFF	; 255
    2974:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi>
    2978:	88 23       	and	r24, r24
    297a:	09 f4       	brne	.+2      	; 0x297e <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x86>
    297c:	c1 c1       	rjmp	.+898    	; 0x2d00 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x408>
	  String vspeed = engineData;
    297e:	ce 01       	movw	r24, r28
    2980:	cf 96       	adiw	r24, 0x3f	; 63
    2982:	b3 01       	movw	r22, r6
    2984:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <_ZN6StringC1ERKS_>
#endif	  
	  delay(50);
    2988:	62 e3       	ldi	r22, 0x32	; 50
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 6f 20 	call	0x40de	; 0x40de <delay>
	  
	  if(vspeed.length() > 3) {
    2994:	25 96       	adiw	r28, 0x05	; 5
    2996:	8e ad       	sts	0x6e, r24
    2998:	9f ad       	sts	0x6f, r25
    299a:	25 97       	sbiw	r28, 0x05	; 5
    299c:	84 30       	cpi	r24, 0x04	; 4
    299e:	91 05       	cpc	r25, r1
    29a0:	08 f4       	brcc	.+2      	; 0x29a4 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0xac>
    29a2:	aa c1       	rjmp	.+852    	; 0x2cf8 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x400>
		  // Remember vspeed ends with mph
		  vspeed = vspeed.substring(0, vspeed.length() - 3);
    29a4:	9c 01       	movw	r18, r24
    29a6:	23 50       	subi	r18, 0x03	; 3
    29a8:	30 40       	sbci	r19, 0x00	; 0
    29aa:	ce 01       	movw	r24, r28
    29ac:	c8 96       	adiw	r24, 0x38	; 56
    29ae:	be 01       	movw	r22, r28
    29b0:	61 5c       	subi	r22, 0xC1	; 193
    29b2:	7f 4f       	sbci	r23, 0xFF	; 255
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <_ZNK6String9substringEjj>
    29bc:	ce 01       	movw	r24, r28
    29be:	cf 96       	adiw	r24, 0x3f	; 63
    29c0:	be 01       	movw	r22, r28
    29c2:	68 5c       	subi	r22, 0xC8	; 200
    29c4:	7f 4f       	sbci	r23, 0xFF	; 255
    29c6:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN6StringaSERKS_>
    29ca:	ce 01       	movw	r24, r28
    29cc:	c8 96       	adiw	r24, 0x38	; 56
    29ce:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
		  // Now get our MAF
#ifdef _DEBUGDATA
		  if(true) {
			  String maf = "200G";
#else
		  if(CanbusMessage::getEngineData(MAF_SENSOR, engineData, HSCAN, 2)) {	  
    29d2:	80 e1       	ldi	r24, 0x10	; 16
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9c 83       	std	Y+4, r25	; 0x04
    29d8:	8b 83       	std	Y+3, r24	; 0x03
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	ce 01       	movw	r24, r28
    29e4:	03 96       	adiw	r24, 0x03	; 3
    29e6:	b3 01       	movw	r22, r6
    29e8:	a6 01       	movw	r20, r12
    29ea:	9e 01       	movw	r18, r28
    29ec:	2f 5f       	subi	r18, 0xFF	; 255
    29ee:	3f 4f       	sbci	r19, 0xFF	; 255
    29f0:	0e 94 cd 13 	call	0x279a	; 0x279a <_ZN13CanbusMessage13getEngineDataERKjR6StringR7MCP2515RKi>
    29f4:	88 23       	and	r24, r24
    29f6:	09 f4       	brne	.+2      	; 0x29fa <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x102>
    29f8:	7f c1       	rjmp	.+766    	; 0x2cf8 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x400>
			  String maf = engineData;
    29fa:	ce 01       	movw	r24, r28
    29fc:	c1 96       	adiw	r24, 0x31	; 49
    29fe:	b3 01       	movw	r22, r6
    2a00:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <_ZN6StringC1ERKS_>
#endif				  
			  delay(50);
    2a04:	62 e3       	ldi	r22, 0x32	; 50
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 6f 20 	call	0x40de	; 0x40de <delay>
			  
			  if(maf.length() > 1) {
    2a10:	2d a9       	sts	0x4d, r18
    2a12:	3e a9       	sts	0x4e, r19
    2a14:	22 30       	cpi	r18, 0x02	; 2
    2a16:	31 05       	cpc	r19, r1
    2a18:	08 f4       	brcc	.+2      	; 0x2a1c <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x124>
    2a1a:	6a c1       	rjmp	.+724    	; 0x2cf0 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x3f8>
    2a1c:	fd b7       	in	r31, 0x3d	; 61
    2a1e:	2d 96       	adiw	r28, 0x0d	; 13
    2a20:	ff af       	sts	0x7f, r31
    2a22:	2d 97       	sbiw	r28, 0x0d	; 13
    2a24:	8e b7       	in	r24, 0x3e	; 62
    2a26:	2e 96       	adiw	r28, 0x0e	; 14
    2a28:	8f af       	sts	0x7f, r24
    2a2a:	2e 97       	sbiw	r28, 0x0e	; 14
				  // Remember maf ends with G
				  maf = maf.substring(0, maf.length() - 1);
    2a2c:	21 50       	subi	r18, 0x01	; 1
    2a2e:	30 40       	sbci	r19, 0x00	; 0
    2a30:	ce 01       	movw	r24, r28
    2a32:	8a 96       	adiw	r24, 0x2a	; 42
    2a34:	be 01       	movw	r22, r28
    2a36:	6f 5c       	subi	r22, 0xCF	; 207
    2a38:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3a:	40 e0       	ldi	r20, 0x00	; 0
    2a3c:	50 e0       	ldi	r21, 0x00	; 0
    2a3e:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <_ZNK6String9substringEjj>
    2a42:	ce 01       	movw	r24, r28
    2a44:	c1 96       	adiw	r24, 0x31	; 49
    2a46:	be 01       	movw	r22, r28
    2a48:	66 5d       	subi	r22, 0xD6	; 214
    2a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4c:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN6StringaSERKS_>
    2a50:	ce 01       	movw	r24, r28
    2a52:	8a 96       	adiw	r24, 0x2a	; 42
    2a54:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
				  
				  char cVs[vspeed.length() + 1];
    2a58:	25 96       	adiw	r28, 0x05	; 5
    2a5a:	4e ac       	sts	0xae, r20
    2a5c:	5f ac       	sts	0xaf, r21
    2a5e:	25 97       	sbiw	r28, 0x05	; 5
    2a60:	08 94       	sec
    2a62:	41 1c       	adc	r4, r1
    2a64:	51 1c       	adc	r5, r1
    2a66:	ed b7       	in	r30, 0x3d	; 61
    2a68:	fe b7       	in	r31, 0x3e	; 62
    2a6a:	e4 19       	sub	r30, r4
    2a6c:	f5 09       	sbc	r31, r5
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	fe bf       	out	0x3e, r31	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	ed bf       	out	0x3d, r30	; 61
    2a78:	cd b6       	in	r12, 0x3d	; 61
    2a7a:	de b6       	in	r13, 0x3e	; 62
    2a7c:	08 94       	sec
    2a7e:	c1 1c       	adc	r12, r1
    2a80:	d1 1c       	adc	r13, r1
				  vspeed.toCharArray(cVs, vspeed.length() + 1);
    2a82:	2f 96       	adiw	r28, 0x0f	; 15
    2a84:	cf ae       	sts	0xbf, r28
    2a86:	2f 97       	sbiw	r28, 0x0f	; 15
    2a88:	60 96       	adiw	r28, 0x10	; 16
    2a8a:	df ae       	sts	0xbf, r29
    2a8c:	60 97       	sbiw	r28, 0x10	; 16
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    2a8e:	ce 01       	movw	r24, r28
    2a90:	cf 96       	adiw	r24, 0x3f	; 63
    2a92:	b6 01       	movw	r22, r12
    2a94:	a2 01       	movw	r20, r4
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZNK6String8getBytesEPhjj>
				  int intSpeed = atoi(cVs);
    2a9e:	c6 01       	movw	r24, r12
    2aa0:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <atoi>
    2aa4:	4c 01       	movw	r8, r24
				  
				  char cMaf[maf.length() + 1];
    2aa6:	2d a8       	sts	0x8d, r18
    2aa8:	3e a8       	sts	0x8e, r19
    2aaa:	08 94       	sec
    2aac:	21 1c       	adc	r2, r1
    2aae:	31 1c       	adc	r3, r1
    2ab0:	2d b7       	in	r18, 0x3d	; 61
    2ab2:	3e b7       	in	r19, 0x3e	; 62
    2ab4:	22 19       	sub	r18, r2
    2ab6:	33 09       	sbc	r19, r3
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	3e bf       	out	0x3e, r19	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	2d bf       	out	0x3d, r18	; 61
    2ac2:	cd b6       	in	r12, 0x3d	; 61
    2ac4:	de b6       	in	r13, 0x3e	; 62
    2ac6:	08 94       	sec
    2ac8:	c1 1c       	adc	r12, r1
    2aca:	d1 1c       	adc	r13, r1
				  maf.toCharArray(cMaf, vspeed.length() + 1);
    2acc:	61 96       	adiw	r28, 0x11	; 17
    2ace:	cf ae       	sts	0xbf, r28
    2ad0:	61 97       	sbiw	r28, 0x11	; 17
    2ad2:	62 96       	adiw	r28, 0x12	; 18
    2ad4:	df ae       	sts	0xbf, r29
    2ad6:	62 97       	sbiw	r28, 0x12	; 18
    2ad8:	25 96       	adiw	r28, 0x05	; 5
    2ada:	4e ad       	sts	0x6e, r20
    2adc:	5f ad       	sts	0x6f, r21
    2ade:	25 97       	sbiw	r28, 0x05	; 5
    2ae0:	4f 5f       	subi	r20, 0xFF	; 255
    2ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	c1 96       	adiw	r24, 0x31	; 49
    2ae8:	b6 01       	movw	r22, r12
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZNK6String8getBytesEPhjj>
				  int intMaf   = atoi(cMaf);
    2af2:	c6 01       	movw	r24, r12
    2af4:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <atoi>
    2af8:	8c 01       	movw	r16, r24
				  
				  float mpg = 11.438 * (((float)intSpeed) / ((float)intMaf * 100.0));
    2afa:	b4 01       	movw	r22, r8
    2afc:	88 27       	eor	r24, r24
    2afe:	77 fd       	sbrc	r23, 7
    2b00:	80 95       	com	r24
    2b02:	98 2f       	mov	r25, r24
    2b04:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__floatsisf>
    2b08:	6b 01       	movw	r12, r22
    2b0a:	7c 01       	movw	r14, r24
    2b0c:	b8 01       	movw	r22, r16
    2b0e:	88 27       	eor	r24, r24
    2b10:	77 fd       	sbrc	r23, 7
    2b12:	80 95       	com	r24
    2b14:	98 2f       	mov	r25, r24
    2b16:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__floatsisf>
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	48 ec       	ldi	r20, 0xC8	; 200
    2b20:	52 e4       	ldi	r21, 0x42	; 66
    2b22:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    2b26:	9b 01       	movw	r18, r22
    2b28:	ac 01       	movw	r20, r24
    2b2a:	c7 01       	movw	r24, r14
    2b2c:	b6 01       	movw	r22, r12
    2b2e:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__divsf3>
    2b32:	2c e0       	ldi	r18, 0x0C	; 12
    2b34:	32 e0       	ldi	r19, 0x02	; 2
    2b36:	47 e3       	ldi	r20, 0x37	; 55
    2b38:	51 e4       	ldi	r21, 0x41	; 65
    2b3a:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    2b3e:	56 2f       	mov	r21, r22
    2b40:	47 2f       	mov	r20, r23
    2b42:	38 2f       	mov	r19, r24
    2b44:	29 2f       	mov	r18, r25
    2b46:	86 2e       	mov	r8, r22
    2b48:	97 2e       	mov	r9, r23
    2b4a:	a8 2e       	mov	r10, r24
    2b4c:	b9 2e       	mov	r11, r25
				  
				  if(!isnan(mpg) && !isinf(mpg)) {
    2b4e:	86 2f       	mov	r24, r22
    2b50:	94 2f       	mov	r25, r20
    2b52:	a3 2f       	mov	r26, r19
    2b54:	b2 2f       	mov	r27, r18
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	c5 2e       	mov	r12, r21
    2b5c:	d4 2e       	mov	r13, r20
    2b5e:	e3 2e       	mov	r14, r19
    2b60:	f2 2e       	mov	r15, r18
    2b62:	a7 01       	movw	r20, r14
    2b64:	96 01       	movw	r18, r12
    2b66:	0e 94 89 2a 	call	0x5512	; 0x5512 <__unordsf2>
    2b6a:	88 23       	and	r24, r24
    2b6c:	09 f0       	breq	.+2      	; 0x2b70 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x278>
    2b6e:	ec c0       	rjmp	.+472    	; 0x2d48 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x450>
    2b70:	75 01       	movw	r14, r10
    2b72:	64 01       	movw	r12, r8
    2b74:	e8 94       	clt
    2b76:	f7 f8       	bld	r15, 7
    2b78:	c7 01       	movw	r24, r14
    2b7a:	b6 01       	movw	r22, r12
    2b7c:	2f ef       	ldi	r18, 0xFF	; 255
    2b7e:	3f ef       	ldi	r19, 0xFF	; 255
    2b80:	4f e7       	ldi	r20, 0x7F	; 127
    2b82:	5f e7       	ldi	r21, 0x7F	; 127
    2b84:	0e 94 89 2a 	call	0x5512	; 0x5512 <__unordsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	59 f4       	brne	.+22     	; 0x2ba2 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x2aa>
    2b8c:	c7 01       	movw	r24, r14
    2b8e:	b6 01       	movw	r22, r12
    2b90:	2f ef       	ldi	r18, 0xFF	; 255
    2b92:	3f ef       	ldi	r19, 0xFF	; 255
    2b94:	4f e7       	ldi	r20, 0x7F	; 127
    2b96:	5f e7       	ldi	r21, 0x7F	; 127
    2b98:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <__cmpsf2>
    2b9c:	18 16       	cp	r1, r24
    2b9e:	0c f4       	brge	.+2      	; 0x2ba2 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x2aa>
    2ba0:	d3 c0       	rjmp	.+422    	; 0x2d48 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x450>
					  if(mpg > 0 && mpg < 50) {
    2ba2:	c5 01       	movw	r24, r10
    2ba4:	b4 01       	movw	r22, r8
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	a9 01       	movw	r20, r18
    2bac:	0e 94 22 2a 	call	0x5444	; 0x5444 <__gesf2>
    2bb0:	18 16       	cp	r1, r24
    2bb2:	0c f0       	brlt	.+2      	; 0x2bb6 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x2be>
    2bb4:	83 c0       	rjmp	.+262    	; 0x2cbc <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x3c4>
    2bb6:	c5 01       	movw	r24, r10
    2bb8:	b4 01       	movw	r22, r8
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	48 e4       	ldi	r20, 0x48	; 72
    2bc0:	52 e4       	ldi	r21, 0x42	; 66
    2bc2:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <__cmpsf2>
    2bc6:	87 ff       	sbrs	r24, 7
    2bc8:	79 c0       	rjmp	.+242    	; 0x2cbc <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x3c4>
						  if(!avg) {
    2bca:	2a 96       	adiw	r28, 0x0a	; 10
    2bcc:	8e ad       	sts	0x6e, r24
    2bce:	9f ad       	sts	0x6f, r25
    2bd0:	2a 97       	sbiw	r28, 0x0a	; 10
    2bd2:	89 30       	cpi	r24, 0x09	; 9
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	31 f1       	breq	.+76     	; 0x2c24 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x32c>
							  char fstring[SCREEN2MAX - 1];
							  dtostrf(mpg, SCREEN2MAX - 1, 1, fstring);
    2bd8:	c5 01       	movw	r24, r10
    2bda:	b4 01       	movw	r22, r8
    2bdc:	45 e0       	ldi	r20, 0x05	; 5
    2bde:	21 e0       	ldi	r18, 0x01	; 1
    2be0:	8e 01       	movw	r16, r28
    2be2:	07 5f       	subi	r16, 0xF7	; 247
    2be4:	1f 4f       	sbci	r17, 0xFF	; 255
    2be6:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <dtostrf>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2bea:	ce 01       	movw	r24, r28
    2bec:	4c 96       	adiw	r24, 0x1c	; 28
    2bee:	6b e9       	ldi	r22, 0x9B	; 155
    2bf0:	74 e0       	ldi	r23, 0x04	; 4
    2bf2:	0e 94 ed 26 	call	0x4dda	; 0x4dda <_ZN6StringC2EPKc>
							  //sprintf(buffer, "Mi/Gal:%s", fstring);
							  engineData = "Mi/Gal:" + String(fstring);
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	83 96       	adiw	r24, 0x23	; 35
    2bfa:	b8 01       	movw	r22, r16
    2bfc:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
    2c00:	ce 01       	movw	r24, r28
    2c02:	4c 96       	adiw	r24, 0x1c	; 28
    2c04:	be 01       	movw	r22, r28
    2c06:	6d 5d       	subi	r22, 0xDD	; 221
    2c08:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0a:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZplRK15StringSumHelperRK6String>
    2c0e:	bc 01       	movw	r22, r24
    2c10:	c3 01       	movw	r24, r6
    2c12:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN6StringaSERKS_>
    2c16:	ce 01       	movw	r24, r28
    2c18:	83 96       	adiw	r24, 0x23	; 35
    2c1a:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2c1e:	ce 01       	movw	r24, r28
    2c20:	4c 96       	adiw	r24, 0x1c	; 28
    2c22:	4a c0       	rjmp	.+148    	; 0x2cb8 <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x3c0>
						  } else {
							  avgMpg = (avgMpg + mpg)/2;
    2c24:	c5 01       	movw	r24, r10
    2c26:	b4 01       	movw	r22, r8
    2c28:	28 96       	adiw	r28, 0x08	; 8
    2c2a:	ee ad       	sts	0x6e, r30
    2c2c:	ff ad       	sts	0x6f, r31
    2c2e:	28 97       	sbiw	r28, 0x08	; 8
    2c30:	20 81       	ld	r18, Z
    2c32:	31 81       	ldd	r19, Z+1	; 0x01
    2c34:	42 81       	ldd	r20, Z+2	; 0x02
    2c36:	53 81       	ldd	r21, Z+3	; 0x03
    2c38:	0e 94 6f 28 	call	0x50de	; 0x50de <__addsf3>
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e0       	ldi	r20, 0x00	; 0
    2c42:	5f e3       	ldi	r21, 0x3F	; 63
    2c44:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    2c48:	9b 01       	movw	r18, r22
    2c4a:	46 2f       	mov	r20, r22
    2c4c:	53 2f       	mov	r21, r19
    2c4e:	68 2f       	mov	r22, r24
    2c50:	79 2f       	mov	r23, r25
    2c52:	28 96       	adiw	r28, 0x08	; 8
    2c54:	ee ad       	sts	0x6e, r30
    2c56:	ff ad       	sts	0x6f, r31
    2c58:	28 97       	sbiw	r28, 0x08	; 8
    2c5a:	40 83       	st	Z, r20
    2c5c:	51 83       	std	Z+1, r21	; 0x01
    2c5e:	62 83       	std	Z+2, r22	; 0x02
    2c60:	73 83       	std	Z+3, r23	; 0x03
							  char fstring[SCREEN2MAX - 1];
							  dtostrf(avgMpg, SCREEN2MAX - 1, 2, fstring);
    2c62:	58 2f       	mov	r21, r24
    2c64:	49 2f       	mov	r20, r25
    2c66:	82 2f       	mov	r24, r18
    2c68:	93 2f       	mov	r25, r19
    2c6a:	a5 2f       	mov	r26, r21
    2c6c:	b4 2f       	mov	r27, r20
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	45 e0       	ldi	r20, 0x05	; 5
    2c74:	22 e0       	ldi	r18, 0x02	; 2
    2c76:	8e 01       	movw	r16, r28
    2c78:	07 5f       	subi	r16, 0xF7	; 247
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7c:	0e 94 fb 2a 	call	0x55f6	; 0x55f6 <dtostrf>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2c80:	ce 01       	movw	r24, r28
    2c82:	0e 96       	adiw	r24, 0x0e	; 14
    2c84:	63 ea       	ldi	r22, 0xA3	; 163
    2c86:	74 e0       	ldi	r23, 0x04	; 4
    2c88:	0e 94 ed 26 	call	0x4dda	; 0x4dda <_ZN6StringC2EPKc>
							  //sprintf(buffer, "AvgMPG:%s", fstring);
							  engineData = "AvgMPG:" + String(fstring);
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	45 96       	adiw	r24, 0x15	; 21
    2c90:	b8 01       	movw	r22, r16
    2c92:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
    2c96:	ce 01       	movw	r24, r28
    2c98:	0e 96       	adiw	r24, 0x0e	; 14
    2c9a:	be 01       	movw	r22, r28
    2c9c:	6b 5e       	subi	r22, 0xEB	; 235
    2c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca0:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZplRK15StringSumHelperRK6String>
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	c3 01       	movw	r24, r6
    2ca8:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN6StringaSERKS_>
    2cac:	ce 01       	movw	r24, r28
    2cae:	45 96       	adiw	r24, 0x15	; 21
    2cb0:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	0e 96       	adiw	r24, 0x0e	; 14
    2cb8:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <_ZN6StringD2Ev>
				  } else {
					  engineData = "Mi/Gal:--";
				  }
				  
				  // Cleanup
				  memset(cVs, 0, sizeof(cVs));
    2cbc:	2f 96       	adiw	r28, 0x0f	; 15
    2cbe:	8f ad       	sts	0x6f, r24
    2cc0:	2f 97       	sbiw	r28, 0x0f	; 15
    2cc2:	60 96       	adiw	r28, 0x10	; 16
    2cc4:	9f ad       	sts	0x6f, r25
    2cc6:	60 97       	sbiw	r28, 0x10	; 16
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	a2 01       	movw	r20, r4
    2cce:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <memset>
				  memset(cMaf, 0, sizeof(cMaf));
    2cd2:	61 96       	adiw	r28, 0x11	; 17
    2cd4:	8f ad       	sts	0x6f, r24
    2cd6:	61 97       	sbiw	r28, 0x11	; 17
    2cd8:	62 96       	adiw	r28, 0x12	; 18
    2cda:	9f ad       	sts	0x6f, r25
    2cdc:	62 97       	sbiw	r28, 0x12	; 18
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	70 e0       	ldi	r23, 0x00	; 0
    2ce2:	a1 01       	movw	r20, r2
    2ce4:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <memset>
    2ce8:	2d 96       	adiw	r28, 0x0d	; 13
    2cea:	ff ad       	sts	0x6f, r31
    2cec:	2d 97       	sbiw	r28, 0x0d	; 13
    2cee:	fd bf       	out	0x3d, r31	; 61
#ifdef _DEBUGDATA
		  if(true) {
			  String maf = "200G";
#else
		  if(CanbusMessage::getEngineData(MAF_SENSOR, engineData, HSCAN, 2)) {	  
			  String maf = engineData;
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	c1 96       	adiw	r24, 0x31	; 49
    2cf4:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
#ifdef _DEBUGDATA  
  if(true) {
	  String vspeed = "82mph";
#else	  
  if(CanbusMessage::getEngineData(VEHICLE_SPEED, engineData, HSCAN, 1)) { 
	  String vspeed = engineData;
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	cf 96       	adiw	r24, 0x3f	; 63
    2cfc:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
		  }
	  }
  }
  
  return true;
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	2c 96       	adiw	r28, 0x0c	; 12
    2d04:	ee ad       	sts	0x6e, r30
    2d06:	ff ad       	sts	0x6f, r31
    2d08:	2c 97       	sbiw	r28, 0x0c	; 12
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	fe bf       	out	0x3e, r31	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	ed bf       	out	0x3d, r30	; 61
    2d14:	cf 5a       	subi	r28, 0xAF	; 175
    2d16:	df 4f       	sbci	r29, 0xFF	; 255
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	df 91       	pop	r29
    2d24:	cf 91       	pop	r28
    2d26:	1f 91       	pop	r17
    2d28:	0f 91       	pop	r16
    2d2a:	ff 90       	pop	r15
    2d2c:	ef 90       	pop	r14
    2d2e:	df 90       	pop	r13
    2d30:	cf 90       	pop	r12
    2d32:	bf 90       	pop	r11
    2d34:	af 90       	pop	r10
    2d36:	9f 90       	pop	r9
    2d38:	8f 90       	pop	r8
    2d3a:	7f 90       	pop	r7
    2d3c:	6f 90       	pop	r6
    2d3e:	5f 90       	pop	r5
    2d40:	4f 90       	pop	r4
    2d42:	3f 90       	pop	r3
    2d44:	2f 90       	pop	r2
    2d46:	08 95       	ret
						  }
						  //LCDMethods::setLcdMessage(buffer, MSCAN, currentMode);
						  //memset(buffer, 0, sizeof(buffer));
					  }					  
				  } else {
					  engineData = "Mi/Gal:--";
    2d48:	c3 01       	movw	r24, r6
    2d4a:	6b ea       	ldi	r22, 0xAB	; 171
    2d4c:	74 e0       	ldi	r23, 0x04	; 4
    2d4e:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <_ZN6StringaSEPKc>
    2d52:	b4 cf       	rjmp	.-152    	; 0x2cbc <_ZN13CanbusMessage17getMilesPerGallonER6StringRfRKiR7MCP2515S6_+0x3c4>

00002d54 <_Z41__static_initialization_and_destruction_0ii.constprop.2>:
		message.data[i] = 0x00;
	}
	
	DebugMethods::dumpMessage(message, "Clock:");
	MSCAN.transmitCANMessage(message, 100);
}
    2d54:	81 30       	cpi	r24, 0x01	; 1
    2d56:	91 05       	cpc	r25, r1
    2d58:	69 f4       	brne	.+26     	; 0x2d74 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x20>
#include "lcd_methods.h"

#include "rxduino_defines.h"
#include "rxduino_methods.h"

String ClockMethods::clockH = "12";
    2d5a:	82 e3       	ldi	r24, 0x32	; 50
    2d5c:	96 e0       	ldi	r25, 0x06	; 6
    2d5e:	65 ef       	ldi	r22, 0xF5	; 245
    2d60:	74 e0       	ldi	r23, 0x04	; 4
    2d62:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
String ClockMethods::clockM = "00";
    2d66:	8b e2       	ldi	r24, 0x2B	; 43
    2d68:	96 e0       	ldi	r25, 0x06	; 6
    2d6a:	68 ef       	ldi	r22, 0xF8	; 248
    2d6c:	74 e0       	ldi	r23, 0x04	; 4
    2d6e:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
    2d72:	08 95       	ret
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	41 f4       	brne	.+16     	; 0x2d88 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x34>
    2d78:	8b e2       	ldi	r24, 0x2B	; 43
    2d7a:	96 e0       	ldi	r25, 0x06	; 6
    2d7c:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
#include "lcd_methods.h"

#include "rxduino_defines.h"
#include "rxduino_methods.h"

String ClockMethods::clockH = "12";
    2d80:	82 e3       	ldi	r24, 0x32	; 50
    2d82:	96 e0       	ldi	r25, 0x06	; 6
    2d84:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
    2d88:	08 95       	ret

00002d8a <_ZN12ClockMethods13initClockVarsEv>:
/** 
 * Initialize the clock variables by setting the time to
 * 12:00.
 */
void ClockMethods::initClockVars() {
	clockH = "12";
    2d8a:	82 e3       	ldi	r24, 0x32	; 50
    2d8c:	96 e0       	ldi	r25, 0x06	; 6
    2d8e:	65 ef       	ldi	r22, 0xF5	; 245
    2d90:	74 e0       	ldi	r23, 0x04	; 4
    2d92:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <_ZN6StringaSEPKc>
	clockM = "00";
    2d96:	8b e2       	ldi	r24, 0x2B	; 43
    2d98:	96 e0       	ldi	r25, 0x06	; 6
    2d9a:	68 ef       	ldi	r22, 0xF8	; 248
    2d9c:	74 e0       	ldi	r23, 0x04	; 4
    2d9e:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <_ZN6StringaSEPKc>
}
    2da2:	08 95       	ret

00002da4 <_ZN12ClockMethods15getInitialClockER7MCP2515>:
/** 
 * Get the user defined clock time.  This is what he/she is 
 * going to see before they commit the change
 * @param	MSCAN	The MSCAN object
 */
void ClockMethods::getInitialClock(MCP2515& MSCAN) {
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	60 97       	sbiw	r28, 0x10	; 16
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	8c 01       	movw	r16, r24
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	03 96       	adiw	r24, 0x03	; 3
    2dc2:	6b ef       	ldi	r22, 0xFB	; 251
    2dc4:	74 e0       	ldi	r23, 0x04	; 4
    2dc6:	0e 94 ed 26 	call	0x4dda	; 0x4dda <_ZN6StringC2EPKc>
	String time = "Set:" + clockH + ":" + clockM;
    2dca:	ce 01       	movw	r24, r28
    2dcc:	03 96       	adiw	r24, 0x03	; 3
    2dce:	62 e3       	ldi	r22, 0x32	; 50
    2dd0:	76 e0       	ldi	r23, 0x06	; 6
    2dd2:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZplRK15StringSumHelperRK6String>
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
    2dd8:	75 e0       	ldi	r23, 0x05	; 5
    2dda:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_ZplRK15StringSumHelperPKc>
    2dde:	6b e2       	ldi	r22, 0x2B	; 43
    2de0:	76 e0       	ldi	r23, 0x06	; 6
    2de2:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZplRK15StringSumHelperRK6String>
    2de6:	bc 01       	movw	r22, r24
    2de8:	ce 01       	movw	r24, r28
    2dea:	0a 96       	adiw	r24, 0x0a	; 10
    2dec:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <_ZN6StringC1ERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2df0:	ce 01       	movw	r24, r28
    2df2:	03 96       	adiw	r24, 0x03	; 3
    2df4:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <_ZN6StringD2Ev>
	LCDMethods::setLcdMessage(time, MSCAN, ASK_CLOCK);
    2df8:	85 e0       	ldi	r24, 0x05	; 5
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	ce 01       	movw	r24, r28
    2e02:	0a 96       	adiw	r24, 0x0a	; 10
    2e04:	b8 01       	movw	r22, r16
    2e06:	ae 01       	movw	r20, r28
    2e08:	4f 5f       	subi	r20, 0xFF	; 255
    2e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e0c:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN10LCDMethods13setLcdMessageER6StringR7MCP2515RKi>
 * Get the user defined clock time.  This is what he/she is 
 * going to see before they commit the change
 * @param	MSCAN	The MSCAN object
 */
void ClockMethods::getInitialClock(MCP2515& MSCAN) {
	String time = "Set:" + clockH + ":" + clockM;
    2e10:	ce 01       	movw	r24, r28
    2e12:	0a 96       	adiw	r24, 0x0a	; 10
    2e14:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
	LCDMethods::setLcdMessage(time, MSCAN, ASK_CLOCK);
}
    2e18:	60 96       	adiw	r28, 0x10	; 16
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	cd bf       	out	0x3d, r28	; 61
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	1f 91       	pop	r17
    2e2a:	0f 91       	pop	r16
    2e2c:	08 95       	ret

00002e2e <_ZN12ClockMethods13incrementHourEv>:

/** 
 * Increment the hour, or rollover if greater than 12
 */
void ClockMethods::incrementHour() {
    2e2e:	0f 93       	push	r16
    2e30:	1f 93       	push	r17
    2e32:	cf 93       	push	r28
    2e34:	df 93       	push	r29
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	68 97       	sbiw	r28, 0x18	; 24
    2e3c:	0f b6       	in	r0, 0x3f	; 63
    2e3e:	f8 94       	cli
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	0f be       	out	0x3f, r0	; 63
    2e44:	cd bf       	out	0x3d, r28	; 61
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    2e46:	82 e3       	ldi	r24, 0x32	; 50
    2e48:	96 e0       	ldi	r25, 0x06	; 6
    2e4a:	be 01       	movw	r22, r28
    2e4c:	6f 5f       	subi	r22, 0xFF	; 255
    2e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e50:	43 e0       	ldi	r20, 0x03	; 3
    2e52:	50 e0       	ldi	r21, 0x00	; 0
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZNK6String8getBytesEPhjj>
	char chr[3]; clockH.toCharArray(chr, sizeof(chr));
	int hr = atoi(chr);
    2e5c:	ce 01       	movw	r24, r28
    2e5e:	01 96       	adiw	r24, 0x01	; 1
    2e60:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <atoi>
	if(hr >= 12)
    2e64:	8c 30       	cpi	r24, 0x0C	; 12
    2e66:	91 05       	cpc	r25, r1
    2e68:	74 f4       	brge	.+28     	; 0x2e86 <_ZN12ClockMethods13incrementHourEv+0x58>
		hr = 1;
	else
		hr++;
    2e6a:	8c 01       	movw	r16, r24
    2e6c:	0f 5f       	subi	r16, 0xFF	; 255
    2e6e:	1f 4f       	sbci	r17, 0xFF	; 255
	clockH = hr >= 10? String(hr) : String("0" + String(hr));
    2e70:	0a 30       	cpi	r16, 0x0A	; 10
    2e72:	11 05       	cpc	r17, r1
    2e74:	54 f0       	brlt	.+20     	; 0x2e8a <_ZN12ClockMethods13incrementHourEv+0x5c>
    2e76:	ce 01       	movw	r24, r28
    2e78:	04 96       	adiw	r24, 0x04	; 4
    2e7a:	b8 01       	movw	r22, r16
    2e7c:	4a e0       	ldi	r20, 0x0A	; 10
    2e7e:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN6StringC1Eih>
    2e82:	00 e0       	ldi	r16, 0x00	; 0
    2e84:	1b c0       	rjmp	.+54     	; 0x2ebc <_ZN12ClockMethods13incrementHourEv+0x8e>
 */
void ClockMethods::incrementHour() {
	char chr[3]; clockH.toCharArray(chr, sizeof(chr));
	int hr = atoi(chr);
	if(hr >= 12)
		hr = 1;
    2e86:	01 e0       	ldi	r16, 0x01	; 1
    2e88:	10 e0       	ldi	r17, 0x00	; 0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	0b 96       	adiw	r24, 0x0b	; 11
    2e8e:	62 e0       	ldi	r22, 0x02	; 2
    2e90:	75 e0       	ldi	r23, 0x05	; 5
    2e92:	0e 94 ed 26 	call	0x4dda	; 0x4dda <_ZN6StringC2EPKc>
	else
		hr++;
	clockH = hr >= 10? String(hr) : String("0" + String(hr));
    2e96:	ce 01       	movw	r24, r28
    2e98:	42 96       	adiw	r24, 0x12	; 18
    2e9a:	b8 01       	movw	r22, r16
    2e9c:	4a e0       	ldi	r20, 0x0A	; 10
    2e9e:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN6StringC1Eih>
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	0b 96       	adiw	r24, 0x0b	; 11
    2ea6:	be 01       	movw	r22, r28
    2ea8:	6e 5e       	subi	r22, 0xEE	; 238
    2eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    2eac:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZplRK15StringSumHelperRK6String>
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	04 96       	adiw	r24, 0x04	; 4
    2eb6:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <_ZN6StringC1ERKS_>
    2eba:	01 e0       	ldi	r16, 0x01	; 1
    2ebc:	82 e3       	ldi	r24, 0x32	; 50
    2ebe:	96 e0       	ldi	r25, 0x06	; 6
    2ec0:	be 01       	movw	r22, r28
    2ec2:	6c 5f       	subi	r22, 0xFC	; 252
    2ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec6:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN6StringaSERKS_>
    2eca:	ce 01       	movw	r24, r28
    2ecc:	04 96       	adiw	r24, 0x04	; 4
    2ece:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
    2ed2:	00 23       	and	r16, r16
    2ed4:	41 f0       	breq	.+16     	; 0x2ee6 <_ZN12ClockMethods13incrementHourEv+0xb8>
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	42 96       	adiw	r24, 0x12	; 18
    2eda:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2ede:	ce 01       	movw	r24, r28
    2ee0:	0b 96       	adiw	r24, 0x0b	; 11
    2ee2:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <_ZN6StringD2Ev>
}
    2ee6:	68 96       	adiw	r28, 0x18	; 24
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	08 95       	ret

00002efc <_ZN12ClockMethods12incrementMinEv>:

/** 
 * Increment the minutes, or rollover if greater than 59
 */
void ClockMethods::incrementMin(){
    2efc:	0f 93       	push	r16
    2efe:	1f 93       	push	r17
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	68 97       	sbiw	r28, 0x18	; 24
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    2f14:	8b e2       	ldi	r24, 0x2B	; 43
    2f16:	96 e0       	ldi	r25, 0x06	; 6
    2f18:	be 01       	movw	r22, r28
    2f1a:	6f 5f       	subi	r22, 0xFF	; 255
    2f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1e:	43 e0       	ldi	r20, 0x03	; 3
    2f20:	50 e0       	ldi	r21, 0x00	; 0
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZNK6String8getBytesEPhjj>
	char cmin[3]; clockM.toCharArray(cmin, sizeof(cmin));
	int min = atoi(cmin);
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	01 96       	adiw	r24, 0x01	; 1
    2f2e:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <atoi>
	if(min >= 59)
    2f32:	8b 33       	cpi	r24, 0x3B	; 59
    2f34:	91 05       	cpc	r25, r1
    2f36:	74 f4       	brge	.+28     	; 0x2f54 <_ZN12ClockMethods12incrementMinEv+0x58>
		min = 00;
	else
		min++;
    2f38:	8c 01       	movw	r16, r24
    2f3a:	0f 5f       	subi	r16, 0xFF	; 255
    2f3c:	1f 4f       	sbci	r17, 0xFF	; 255
	clockM = min >= 10? String(min) : String("0" + String(min));
    2f3e:	0a 30       	cpi	r16, 0x0A	; 10
    2f40:	11 05       	cpc	r17, r1
    2f42:	54 f0       	brlt	.+20     	; 0x2f58 <_ZN12ClockMethods12incrementMinEv+0x5c>
    2f44:	ce 01       	movw	r24, r28
    2f46:	04 96       	adiw	r24, 0x04	; 4
    2f48:	b8 01       	movw	r22, r16
    2f4a:	4a e0       	ldi	r20, 0x0A	; 10
    2f4c:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN6StringC1Eih>
    2f50:	00 e0       	ldi	r16, 0x00	; 0
    2f52:	1b c0       	rjmp	.+54     	; 0x2f8a <_ZN12ClockMethods12incrementMinEv+0x8e>
 */
void ClockMethods::incrementMin(){
	char cmin[3]; clockM.toCharArray(cmin, sizeof(cmin));
	int min = atoi(cmin);
	if(min >= 59)
		min = 00;
    2f54:	00 e0       	ldi	r16, 0x00	; 0
    2f56:	10 e0       	ldi	r17, 0x00	; 0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    2f58:	ce 01       	movw	r24, r28
    2f5a:	0b 96       	adiw	r24, 0x0b	; 11
    2f5c:	62 e0       	ldi	r22, 0x02	; 2
    2f5e:	75 e0       	ldi	r23, 0x05	; 5
    2f60:	0e 94 ed 26 	call	0x4dda	; 0x4dda <_ZN6StringC2EPKc>
	else
		min++;
	clockM = min >= 10? String(min) : String("0" + String(min));
    2f64:	ce 01       	movw	r24, r28
    2f66:	42 96       	adiw	r24, 0x12	; 18
    2f68:	b8 01       	movw	r22, r16
    2f6a:	4a e0       	ldi	r20, 0x0A	; 10
    2f6c:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN6StringC1Eih>
    2f70:	ce 01       	movw	r24, r28
    2f72:	0b 96       	adiw	r24, 0x0b	; 11
    2f74:	be 01       	movw	r22, r28
    2f76:	6e 5e       	subi	r22, 0xEE	; 238
    2f78:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7a:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZplRK15StringSumHelperRK6String>
    2f7e:	bc 01       	movw	r22, r24
    2f80:	ce 01       	movw	r24, r28
    2f82:	04 96       	adiw	r24, 0x04	; 4
    2f84:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <_ZN6StringC1ERKS_>
    2f88:	01 e0       	ldi	r16, 0x01	; 1
    2f8a:	8b e2       	ldi	r24, 0x2B	; 43
    2f8c:	96 e0       	ldi	r25, 0x06	; 6
    2f8e:	be 01       	movw	r22, r28
    2f90:	6c 5f       	subi	r22, 0xFC	; 252
    2f92:	7f 4f       	sbci	r23, 0xFF	; 255
    2f94:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN6StringaSERKS_>
    2f98:	ce 01       	movw	r24, r28
    2f9a:	04 96       	adiw	r24, 0x04	; 4
    2f9c:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
    2fa0:	00 23       	and	r16, r16
    2fa2:	41 f0       	breq	.+16     	; 0x2fb4 <_ZN12ClockMethods12incrementMinEv+0xb8>
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	42 96       	adiw	r24, 0x12	; 18
    2fa8:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2fac:	ce 01       	movw	r24, r28
    2fae:	0b 96       	adiw	r24, 0x0b	; 11
    2fb0:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <_ZN6StringD2Ev>
}
    2fb4:	68 96       	adiw	r28, 0x18	; 24
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	08 95       	ret

00002fca <_ZN12ClockMethods8setClockER7MCP2515>:

/** 
 * Set the clock
 * @param	MSCAN	The MSCAN object
 */
void ClockMethods::setClock(MCP2515& MSCAN){
    2fca:	2f 92       	push	r2
    2fcc:	3f 92       	push	r3
    2fce:	4f 92       	push	r4
    2fd0:	5f 92       	push	r5
    2fd2:	6f 92       	push	r6
    2fd4:	7f 92       	push	r7
    2fd6:	8f 92       	push	r8
    2fd8:	9f 92       	push	r9
    2fda:	af 92       	push	r10
    2fdc:	bf 92       	push	r11
    2fde:	cf 92       	push	r12
    2fe0:	df 92       	push	r13
    2fe2:	ef 92       	push	r14
    2fe4:	ff 92       	push	r15
    2fe6:	0f 93       	push	r16
    2fe8:	1f 93       	push	r17
    2fea:	cf 93       	push	r28
    2fec:	df 93       	push	r29
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	67 97       	sbiw	r28, 0x17	; 23
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	1c 01       	movw	r2, r24
		message.data[i] = 0x00;
	}
	
	DebugMethods::dumpMessage(message, "Clock:");
	MSCAN.transmitCANMessage(message, 100);
}
    3000:	8d b7       	in	r24, 0x3d	; 61
    3002:	9e b7       	in	r25, 0x3e	; 62
    3004:	9f 8b       	std	Y+23, r25	; 0x17
    3006:	8e 8b       	std	Y+22, r24	; 0x16
 * Set the clock
 * @param	MSCAN	The MSCAN object
 */
void ClockMethods::setClock(MCP2515& MSCAN){
	// Hours are found by doing hour * 0x08
	char this_char[clockH.length() + 1];
    3008:	40 91 36 06 	lds	r20, 0x0636
    300c:	50 91 37 06 	lds	r21, 0x0637
    3010:	4f 5f       	subi	r20, 0xFF	; 255
    3012:	5f 4f       	sbci	r21, 0xFF	; 255
    3014:	ed b7       	in	r30, 0x3d	; 61
    3016:	fe b7       	in	r31, 0x3e	; 62
    3018:	e4 1b       	sub	r30, r20
    301a:	f5 0b       	sbc	r31, r21
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	fe bf       	out	0x3e, r31	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	ed bf       	out	0x3d, r30	; 61
    3026:	0d b7       	in	r16, 0x3d	; 61
    3028:	1e b7       	in	r17, 0x3e	; 62
    302a:	0f 5f       	subi	r16, 0xFF	; 255
    302c:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    302e:	82 e3       	ldi	r24, 0x32	; 50
    3030:	96 e0       	ldi	r25, 0x06	; 6
    3032:	b8 01       	movw	r22, r16
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZNK6String8getBytesEPhjj>
	clockH.toCharArray(this_char, sizeof(this_char));
	uint32_t bhour = atoi(this_char) * 0x800;
    303c:	c8 01       	movw	r24, r16
    303e:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <atoi>
    3042:	38 2f       	mov	r19, r24
    3044:	33 0f       	add	r19, r19
    3046:	33 0f       	add	r19, r19
    3048:	33 0f       	add	r19, r19
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	29 01       	movw	r4, r18
    304e:	66 24       	eor	r6, r6
    3050:	57 fc       	sbrc	r5, 7
    3052:	60 94       	com	r6
    3054:	76 2c       	mov	r7, r6
	
	// Minutes are min * 0x20
	char this_charm[clockM.length() + 1];
    3056:	40 91 2f 06 	lds	r20, 0x062F
    305a:	50 91 30 06 	lds	r21, 0x0630
    305e:	4f 5f       	subi	r20, 0xFF	; 255
    3060:	5f 4f       	sbci	r21, 0xFF	; 255
    3062:	8d b7       	in	r24, 0x3d	; 61
    3064:	9e b7       	in	r25, 0x3e	; 62
    3066:	84 1b       	sub	r24, r20
    3068:	95 0b       	sbc	r25, r21
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	9e bf       	out	0x3e, r25	; 62
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	8d bf       	out	0x3d, r24	; 61
    3074:	0d b7       	in	r16, 0x3d	; 61
    3076:	1e b7       	in	r17, 0x3e	; 62
    3078:	0f 5f       	subi	r16, 0xFF	; 255
    307a:	1f 4f       	sbci	r17, 0xFF	; 255
    307c:	8b e2       	ldi	r24, 0x2B	; 43
    307e:	96 e0       	ldi	r25, 0x06	; 6
    3080:	b8 01       	movw	r22, r16
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZNK6String8getBytesEPhjj>
	clockM.toCharArray(this_charm, sizeof(this_charm));
	uint32_t bmin = atoi(this_charm) * 0x20;
    308a:	c8 01       	movw	r24, r16
    308c:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <atoi>
    3090:	6c 01       	movw	r12, r24
    3092:	a5 e0       	ldi	r26, 0x05	; 5
    3094:	cc 0c       	add	r12, r12
    3096:	dd 1c       	adc	r13, r13
    3098:	aa 95       	dec	r26
    309a:	e1 f7       	brne	.-8      	; 0x3094 <_ZN12ClockMethods8setClockER7MCP2515+0xca>
    309c:	ee 24       	eor	r14, r14
    309e:	d7 fc       	sbrc	r13, 7
    30a0:	e0 94       	com	r14
    30a2:	fe 2c       	mov	r15, r14
	
	// combine them!
	uint32_t hourandmin = bhour + bmin;
    30a4:	46 01       	movw	r8, r12
    30a6:	57 01       	movw	r10, r14
    30a8:	84 0c       	add	r8, r4
    30aa:	95 1c       	adc	r9, r5
    30ac:	a6 1c       	adc	r10, r6
    30ae:	b7 1c       	adc	r11, r7
	
	DebugMethods::serialDebug("Hour: %d\n", bhour);
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <_ZN12ClockMethods8setClockER7MCP2515+0xe8>
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <_ZN12ClockMethods8setClockER7MCP2515+0xea>
    30b4:	00 d0       	rcall	.+0      	; 0x30b6 <_ZN12ClockMethods8setClockER7MCP2515+0xec>
    30b6:	84 e0       	ldi	r24, 0x04	; 4
    30b8:	95 e0       	ldi	r25, 0x05	; 5
    30ba:	ed b7       	in	r30, 0x3d	; 61
    30bc:	fe b7       	in	r31, 0x3e	; 62
    30be:	92 83       	std	Z+2, r25	; 0x02
    30c0:	81 83       	std	Z+1, r24	; 0x01
    30c2:	43 82       	std	Z+3, r4	; 0x03
    30c4:	54 82       	std	Z+4, r5	; 0x04
    30c6:	65 82       	std	Z+5, r6	; 0x05
    30c8:	76 82       	std	Z+6, r7	; 0x06
    30ca:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
	DebugMethods::serialDebug("Minute: %d\n", bmin);
    30ce:	8e e0       	ldi	r24, 0x0E	; 14
    30d0:	95 e0       	ldi	r25, 0x05	; 5
    30d2:	ed b7       	in	r30, 0x3d	; 61
    30d4:	fe b7       	in	r31, 0x3e	; 62
    30d6:	92 83       	std	Z+2, r25	; 0x02
    30d8:	81 83       	std	Z+1, r24	; 0x01
    30da:	c3 82       	std	Z+3, r12	; 0x03
    30dc:	d4 82       	std	Z+4, r13	; 0x04
    30de:	e5 82       	std	Z+5, r14	; 0x05
    30e0:	f6 82       	std	Z+6, r15	; 0x06
    30e2:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
	DebugMethods::serialDebug("Total: %d\n", hourandmin);
    30e6:	8a e1       	ldi	r24, 0x1A	; 26
    30e8:	95 e0       	ldi	r25, 0x05	; 5
    30ea:	ed b7       	in	r30, 0x3d	; 61
    30ec:	fe b7       	in	r31, 0x3e	; 62
    30ee:	92 83       	std	Z+2, r25	; 0x02
    30f0:	81 83       	std	Z+1, r24	; 0x01
    30f2:	83 82       	std	Z+3, r8	; 0x03
    30f4:	94 82       	std	Z+4, r9	; 0x04
    30f6:	a5 82       	std	Z+5, r10	; 0x05
    30f8:	b6 82       	std	Z+6, r11	; 0x06
    30fa:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
	
	// 0x292 message
	// 292	18	FE	9C	59	C0	0	0	0
	Frame message;
	message.adrsValue = 0x292;
    30fe:	82 e9       	ldi	r24, 0x92	; 146
    3100:	92 e0       	ldi	r25, 0x02	; 2
    3102:	9e 83       	std	Y+6, r25	; 0x06
    3104:	8d 83       	std	Y+5, r24	; 0x05
	message.isExtendedAdrs = false;
    3106:	1f 82       	std	Y+7, r1	; 0x07
	message.rtr = false;
    3108:	1c 86       	std	Y+12, r1	; 0x0c
	message.dataLength = 8;
    310a:	88 e0       	ldi	r24, 0x08	; 8
    310c:	8d 87       	std	Y+13, r24	; 0x0d
	message.data[0] = 0x18;
    310e:	88 e1       	ldi	r24, 0x18	; 24
    3110:	8e 87       	std	Y+14, r24	; 0x0e
	message.data[1] = 0xFE;
    3112:	8e ef       	ldi	r24, 0xFE	; 254
    3114:	8f 87       	std	Y+15, r24	; 0x0f
	message.data[2] = hourandmin / 0x100;
    3116:	98 8a       	std	Y+16, r9	; 0x10
	message.data[3] = hourandmin - bhour;
    3118:	89 8a       	std	Y+17, r8	; 0x11
	message.data[4] = 0x40;
    311a:	80 e4       	ldi	r24, 0x40	; 64
    311c:	8a 8b       	std	Y+18, r24	; 0x12
	for(int i = 5; i < 8; i++) {
		message.data[i] = 0x00;
    311e:	1b 8a       	std	Y+19, r1	; 0x13
    3120:	1c 8a       	std	Y+20, r1	; 0x14
    3122:	1d 8a       	std	Y+21, r1	; 0x15
	}
	
	DebugMethods::dumpMessage(message, "Clock:");
    3124:	8d b7       	in	r24, 0x3d	; 61
    3126:	9e b7       	in	r25, 0x3e	; 62
    3128:	06 96       	adiw	r24, 0x06	; 6
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	9e bf       	out	0x3e, r25	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	8d bf       	out	0x3d, r24	; 61
    3134:	ce 01       	movw	r24, r28
    3136:	05 96       	adiw	r24, 0x05	; 5
    3138:	65 e2       	ldi	r22, 0x25	; 37
    313a:	75 e0       	ldi	r23, 0x05	; 5
    313c:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN12DebugMethods11dumpMessageERK5FramePKc>
	MSCAN.transmitCANMessage(message, 100);
    3140:	84 e6       	ldi	r24, 0x64	; 100
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	a0 e0       	ldi	r26, 0x00	; 0
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	89 83       	std	Y+1, r24	; 0x01
    314a:	9a 83       	std	Y+2, r25	; 0x02
    314c:	ab 83       	std	Y+3, r26	; 0x03
    314e:	bc 83       	std	Y+4, r27	; 0x04
    3150:	c1 01       	movw	r24, r2
    3152:	be 01       	movw	r22, r28
    3154:	6b 5f       	subi	r22, 0xFB	; 251
    3156:	7f 4f       	sbci	r23, 0xFF	; 255
    3158:	ae 01       	movw	r20, r28
    315a:	4f 5f       	subi	r20, 0xFF	; 255
    315c:	5f 4f       	sbci	r21, 0xFF	; 255
    315e:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7MCP251518transmitCANMessageER5FrameRKm>
}
    3162:	ee 89       	ldd	r30, Y+22	; 0x16
    3164:	ff 89       	ldd	r31, Y+23	; 0x17
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	fe bf       	out	0x3e, r31	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	ed bf       	out	0x3d, r30	; 61
    3170:	67 96       	adiw	r28, 0x17	; 23
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	0f 91       	pop	r16
    3184:	ff 90       	pop	r15
    3186:	ef 90       	pop	r14
    3188:	df 90       	pop	r13
    318a:	cf 90       	pop	r12
    318c:	bf 90       	pop	r11
    318e:	af 90       	pop	r10
    3190:	9f 90       	pop	r9
    3192:	8f 90       	pop	r8
    3194:	7f 90       	pop	r7
    3196:	6f 90       	pop	r6
    3198:	5f 90       	pop	r5
    319a:	4f 90       	pop	r4
    319c:	3f 90       	pop	r3
    319e:	2f 90       	pop	r2
    31a0:	08 95       	ret

000031a2 <_ZN20CruiseControlMethods11getCCButtonER5FrameR7MCP2515>:
 * Get the current CC button that is pressed
 * @param message  The message object to be manipulated
 * @param HSCAN    The HSCAN class
 * @return		   True if the CC button was properly read
 */
boolean CruiseControlMethods::getCCButton(Frame& message, MCP2515& HSCAN) {
    31a2:	ef 92       	push	r14
    31a4:	ff 92       	push	r15
    31a6:	0f 93       	push	r16
    31a8:	1f 93       	push	r17
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <_ZN20CruiseControlMethods11getCCButtonER5FrameR7MCP2515+0xe>
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	8c 01       	movw	r16, r24
    31b6:	7b 01       	movw	r14, r22
  
  message.adrsValue = CC_REQUEST;
    31b8:	80 ee       	ldi	r24, 0xE0	; 224
    31ba:	97 e0       	ldi	r25, 0x07	; 7
    31bc:	f8 01       	movw	r30, r16
    31be:	91 83       	std	Z+1, r25	; 0x01
    31c0:	80 83       	st	Z, r24
  message.isExtendedAdrs = false;
    31c2:	12 82       	std	Z+2, r1	; 0x02
  message.rtr = false;
    31c4:	17 82       	std	Z+7, r1	; 0x07
  message.dataLength = 8;
    31c6:	88 e0       	ldi	r24, 0x08	; 8
    31c8:	80 87       	std	Z+8, r24	; 0x08
  message.data[0] = 3;
    31ca:	83 e0       	ldi	r24, 0x03	; 3
    31cc:	81 87       	std	Z+9, r24	; 0x09
  message.data[1] = 0x22;
    31ce:	82 e2       	ldi	r24, 0x22	; 34
    31d0:	82 87       	std	Z+10, r24	; 0x0a
  message.data[2] = 0xA2;
    31d2:	82 ea       	ldi	r24, 0xA2	; 162
    31d4:	83 87       	std	Z+11, r24	; 0x0b
  message.data[3] = 0x16;
    31d6:	86 e1       	ldi	r24, 0x16	; 22
    31d8:	84 87       	std	Z+12, r24	; 0x0c
  for(int i = 4; i < 8; i++) {
    message.data[i] = 0x00;
    31da:	15 86       	std	Z+13, r1	; 0x0d
    31dc:	16 86       	std	Z+14, r1	; 0x0e
    31de:	17 86       	std	Z+15, r1	; 0x0f
    31e0:	10 8a       	std	Z+16, r1	; 0x10
  } 
  
  RxduinoMethods::enableHSCAN();
    31e2:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <_ZN14RxduinoMethods11enableHSCANEv>
  boolean value = HSCAN.queryOBDExtended(CC_REPLY, message);
    31e6:	88 ee       	ldi	r24, 0xE8	; 232
    31e8:	97 e0       	ldi	r25, 0x07	; 7
    31ea:	9a 83       	std	Y+2, r25	; 0x02
    31ec:	89 83       	std	Y+1, r24	; 0x01
    31ee:	c7 01       	movw	r24, r14
    31f0:	be 01       	movw	r22, r28
    31f2:	6f 5f       	subi	r22, 0xFF	; 255
    31f4:	7f 4f       	sbci	r23, 0xFF	; 255
    31f6:	a8 01       	movw	r20, r16
    31f8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_ZN7MCP251516queryOBDExtendedERKjR5Frame>
    31fc:	08 2f       	mov	r16, r24
  RxduinoMethods::disableCAN();
    31fe:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN14RxduinoMethods10disableCANEv>
  for(int i = 4; i < 8; i++) {
    message.data[i] = 0x00;
  } 
  
  RxduinoMethods::enableHSCAN();
  boolean value = HSCAN.queryOBDExtended(CC_REPLY, message);
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	00 23       	and	r16, r16
    3206:	09 f4       	brne	.+2      	; 0x320a <_ZN20CruiseControlMethods11getCCButtonER5FrameR7MCP2515+0x68>
    3208:	80 e0       	ldi	r24, 0x00	; 0
  RxduinoMethods::disableCAN();
  
  return value; 
}
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	1f 91       	pop	r17
    3214:	0f 91       	pop	r16
    3216:	ff 90       	pop	r15
    3218:	ef 90       	pop	r14
    321a:	08 95       	ret

0000321c <_ZN20CruiseControlMethods11getCCStatusER7MCP2515Rb>:
 * Get the status of the CC
 * @param message  The message object to be manipulated
 * @param HSCAN    The HSCAN class
 * @return		   True if the CC is on
 */
boolean CruiseControlMethods::getCCStatus(MCP2515& HSCAN, boolean& failure) {
    321c:	8f 92       	push	r8
    321e:	9f 92       	push	r9
    3220:	af 92       	push	r10
    3222:	bf 92       	push	r11
    3224:	cf 92       	push	r12
    3226:	df 92       	push	r13
    3228:	ef 92       	push	r14
    322a:	ff 92       	push	r15
    322c:	0f 93       	push	r16
    322e:	1f 93       	push	r17
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	66 97       	sbiw	r28, 0x16	; 22
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	f8 94       	cli
    323e:	de bf       	out	0x3e, r29	; 62
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	cd bf       	out	0x3d, r28	; 61
    3244:	4c 01       	movw	r8, r24
    3246:	5b 01       	movw	r10, r22
  boolean value = false;
  
  Frame message;
  message.adrsValue = CC_ONOFF;
    3248:	88 e4       	ldi	r24, 0x48	; 72
    324a:	96 e0       	ldi	r25, 0x06	; 6
    324c:	9e 83       	std	Y+6, r25	; 0x06
    324e:	8d 83       	std	Y+5, r24	; 0x05
  message.isExtendedAdrs = false;
    3250:	1f 82       	std	Y+7, r1	; 0x07
  message.rtr = false;
    3252:	1c 86       	std	Y+12, r1	; 0x0c
  message.dataLength = 8;
    3254:	88 e0       	ldi	r24, 0x08	; 8
    3256:	8d 87       	std	Y+13, r24	; 0x0d
  message.data[0] = 3;
    3258:	83 e0       	ldi	r24, 0x03	; 3
    325a:	8e 87       	std	Y+14, r24	; 0x0e
  message.data[1] = 0x22;
    325c:	82 e2       	ldi	r24, 0x22	; 34
    325e:	8f 87       	std	Y+15, r24	; 0x0f
  for(int i = 2; i < 8; i++) {
    message.data[i] = 0x00;
    3260:	18 8a       	std	Y+16, r1	; 0x10
    3262:	19 8a       	std	Y+17, r1	; 0x11
    3264:	1a 8a       	std	Y+18, r1	; 0x12
    3266:	1b 8a       	std	Y+19, r1	; 0x13
    3268:	1c 8a       	std	Y+20, r1	; 0x14
    326a:	1d 8a       	std	Y+21, r1	; 0x15
  } 
   
  RxduinoMethods::enableHSCAN();
    326c:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <_ZN14RxduinoMethods11enableHSCANEv>
    3270:	04 e6       	ldi	r16, 0x64	; 100
    3272:	10 e0       	ldi	r17, 0x00	; 0

  for(int i = 0; i < CC_POLLING; i++) {
	if(HSCAN.receiveCANMessage(message, 100)) {
    3274:	84 e6       	ldi	r24, 0x64	; 100
    3276:	c8 2e       	mov	r12, r24
    3278:	d1 2c       	mov	r13, r1
    327a:	e1 2c       	mov	r14, r1
    327c:	f1 2c       	mov	r15, r1
    327e:	c9 82       	std	Y+1, r12	; 0x01
    3280:	da 82       	std	Y+2, r13	; 0x02
    3282:	eb 82       	std	Y+3, r14	; 0x03
    3284:	fc 82       	std	Y+4, r15	; 0x04
    3286:	c4 01       	movw	r24, r8
    3288:	be 01       	movw	r22, r28
    328a:	6b 5f       	subi	r22, 0xFB	; 251
    328c:	7f 4f       	sbci	r23, 0xFF	; 255
    328e:	ae 01       	movw	r20, r28
    3290:	4f 5f       	subi	r20, 0xFF	; 255
    3292:	5f 4f       	sbci	r21, 0xFF	; 255
    3294:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN7MCP251517receiveCANMessageER5FrameRKm>
    3298:	88 23       	and	r24, r24
    329a:	79 f0       	breq	.+30     	; 0x32ba <_ZN20CruiseControlMethods11getCCStatusER7MCP2515Rb+0x9e>
      if(message.adrsValue == 0x650) {
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	26 e0       	ldi	r18, 0x06	; 6
    32a2:	80 35       	cpi	r24, 0x50	; 80
    32a4:	92 07       	cpc	r25, r18
    32a6:	69 f4       	brne	.+26     	; 0x32c2 <_ZN20CruiseControlMethods11getCCStatusER7MCP2515Rb+0xa6>
        if(message.data[0] == 0x80 || message.data[0] == 0xFF) {
    32a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    32aa:	80 38       	cpi	r24, 0x80	; 128
    32ac:	11 f0       	breq	.+4      	; 0x32b2 <_ZN20CruiseControlMethods11getCCStatusER7MCP2515Rb+0x96>
    32ae:	8f 3f       	cpi	r24, 0xFF	; 255
    32b0:	41 f4       	brne	.+16     	; 0x32c2 <_ZN20CruiseControlMethods11getCCStatusER7MCP2515Rb+0xa6>
		  failure = false;
    32b2:	f5 01       	movw	r30, r10
    32b4:	10 82       	st	Z, r1
          value = true;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
		  break;
    32b8:	08 c0       	rjmp	.+16     	; 0x32ca <_ZN20CruiseControlMethods11getCCStatusER7MCP2515Rb+0xae>
		}		  
	  }
	} else {
		failure = true;
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	f5 01       	movw	r30, r10
    32be:	80 83       	st	Z, r24
    32c0:	03 c0       	rjmp	.+6      	; 0x32c8 <_ZN20CruiseControlMethods11getCCStatusER7MCP2515Rb+0xac>
		break;
    32c2:	01 50       	subi	r16, 0x01	; 1
    32c4:	10 40       	sbci	r17, 0x00	; 0
    message.data[i] = 0x00;
  } 
   
  RxduinoMethods::enableHSCAN();

  for(int i = 0; i < CC_POLLING; i++) {
    32c6:	d9 f6       	brne	.-74     	; 0x327e <_ZN20CruiseControlMethods11getCCStatusER7MCP2515Rb+0x62>
 * @param message  The message object to be manipulated
 * @param HSCAN    The HSCAN class
 * @return		   True if the CC is on
 */
boolean CruiseControlMethods::getCCStatus(MCP2515& HSCAN, boolean& failure) {
  boolean value = false;
    32c8:	80 e0       	ldi	r24, 0x00	; 0
		failure = true;
		break;
	}			 		
   }  
				   
  RxduinoMethods::disableCAN();	
    32ca:	8e 8b       	std	Y+22, r24	; 0x16
    32cc:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN14RxduinoMethods10disableCANEv>
  #ifdef _DEBUGDATA	
  failure = false;
  #endif
  
  return value;
}
    32d0:	8e 89       	ldd	r24, Y+22	; 0x16
    32d2:	66 96       	adiw	r28, 0x16	; 22
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	de bf       	out	0x3e, r29	; 62
    32da:	0f be       	out	0x3f, r0	; 63
    32dc:	cd bf       	out	0x3d, r28	; 61
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	1f 91       	pop	r17
    32e4:	0f 91       	pop	r16
    32e6:	ff 90       	pop	r15
    32e8:	ef 90       	pop	r14
    32ea:	df 90       	pop	r13
    32ec:	cf 90       	pop	r12
    32ee:	bf 90       	pop	r11
    32f0:	af 90       	pop	r10
    32f2:	9f 90       	pop	r9
    32f4:	8f 90       	pop	r8
    32f6:	08 95       	ret

000032f8 <_ZN12DebugMethods11serialDebugEPKcz>:
 *              debug messages
 ************************************************************************/

#include "debug_methods.h"

void DebugMethods::serialDebug(const char *fmt, ... ) {
    32f8:	cf 93       	push	r28
    32fa:	df 93       	push	r29
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	c0 58       	subi	r28, 0x80	; 128
    3302:	d0 40       	sbci	r29, 0x00	; 0
    3304:	0f b6       	in	r0, 0x3f	; 63
    3306:	f8 94       	cli
    3308:	de bf       	out	0x3e, r29	; 62
    330a:	0f be       	out	0x3f, r0	; 63
    330c:	cd bf       	out	0x3d, r28	; 61
    330e:	fe 01       	movw	r30, r28
    3310:	eb 57       	subi	r30, 0x7B	; 123
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	41 91       	ld	r20, Z+
    3316:	51 91       	ld	r21, Z+
	char tmp[128]; // resulting string limited to 128 chars
	va_list args;
	va_start (args, fmt );
	vsnprintf(tmp, 128, fmt, args);
    3318:	ce 01       	movw	r24, r28
    331a:	01 96       	adiw	r24, 0x01	; 1
    331c:	60 e8       	ldi	r22, 0x80	; 128
    331e:	70 e0       	ldi	r23, 0x00	; 0
    3320:	9f 01       	movw	r18, r30
    3322:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <vsnprintf>
	va_end (args);
	Serial.print(tmp);
    3326:	8a ec       	ldi	r24, 0xCA	; 202
    3328:	96 e0       	ldi	r25, 0x06	; 6
    332a:	be 01       	movw	r22, r28
    332c:	6f 5f       	subi	r22, 0xFF	; 255
    332e:	7f 4f       	sbci	r23, 0xFF	; 255
    3330:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN5Print5printEPKc>
}
    3334:	c0 58       	subi	r28, 0x80	; 128
    3336:	df 4f       	sbci	r29, 0xFF	; 255
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	0f be       	out	0x3f, r0	; 63
    3340:	cd bf       	out	0x3d, r28	; 61
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	08 95       	ret

00003348 <_ZN12DebugMethods11dumpMessageERK5FramePKc>:
 * Dump the contents of the CAN message
 *
 * @param message  The can message to dump
 * @param msg      Message to be printed before
 */
void DebugMethods::dumpMessage(const Frame& message, const char* msg) {
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    334c:	cf 93       	push	r28
    334e:	df 93       	push	r29
    3350:	8c 01       	movw	r16, r24
#ifdef _DEBUG
  Serial.print(msg);
    3352:	8a ec       	ldi	r24, 0xCA	; 202
    3354:	96 e0       	ldi	r25, 0x06	; 6
    3356:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN5Print5printEPKc>
  Serial.print(": ");
    335a:	8a ec       	ldi	r24, 0xCA	; 202
    335c:	96 e0       	ldi	r25, 0x06	; 6
    335e:	6c e2       	ldi	r22, 0x2C	; 44
    3360:	75 e0       	ldi	r23, 0x05	; 5
    3362:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN5Print5printEPKc>
  Serial.print(message.adrsValue, HEX);
    3366:	f8 01       	movw	r30, r16
    3368:	60 81       	ld	r22, Z
    336a:	71 81       	ldd	r23, Z+1	; 0x01
    336c:	8a ec       	ldi	r24, 0xCA	; 202
    336e:	96 e0       	ldi	r25, 0x06	; 6
    3370:	40 e1       	ldi	r20, 0x10	; 16
    3372:	50 e0       	ldi	r21, 0x00	; 0
    3374:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <_ZN5Print5printEji>
  Serial.print(" ");
    3378:	8a ec       	ldi	r24, 0xCA	; 202
    337a:	96 e0       	ldi	r25, 0x06	; 6
    337c:	6f e2       	ldi	r22, 0x2F	; 47
    337e:	75 e0       	ldi	r23, 0x05	; 5
    3380:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN5Print5printEPKc>
  for(int i = 0; i <= message.dataLength - 1; i++) {
    3384:	c0 e0       	ldi	r28, 0x00	; 0
    3386:	d0 e0       	ldi	r29, 0x00	; 0
    3388:	11 c0       	rjmp	.+34     	; 0x33ac <_ZN12DebugMethods11dumpMessageERK5FramePKc+0x64>
 * Dump the contents of the CAN message
 *
 * @param message  The can message to dump
 * @param msg      Message to be printed before
 */
void DebugMethods::dumpMessage(const Frame& message, const char* msg) {
    338a:	f8 01       	movw	r30, r16
    338c:	ec 0f       	add	r30, r28
    338e:	fd 1f       	adc	r31, r29
  Serial.print(msg);
  Serial.print(": ");
  Serial.print(message.adrsValue, HEX);
  Serial.print(" ");
  for(int i = 0; i <= message.dataLength - 1; i++) {
    Serial.print(message.data[i], HEX);
    3390:	8a ec       	ldi	r24, 0xCA	; 202
    3392:	96 e0       	ldi	r25, 0x06	; 6
    3394:	61 85       	ldd	r22, Z+9	; 0x09
    3396:	40 e1       	ldi	r20, 0x10	; 16
    3398:	50 e0       	ldi	r21, 0x00	; 0
    339a:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <_ZN5Print5printEhi>
    Serial.print(" ");
    339e:	8a ec       	ldi	r24, 0xCA	; 202
    33a0:	96 e0       	ldi	r25, 0x06	; 6
    33a2:	6f e2       	ldi	r22, 0x2F	; 47
    33a4:	75 e0       	ldi	r23, 0x05	; 5
    33a6:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN5Print5printEPKc>
#ifdef _DEBUG
  Serial.print(msg);
  Serial.print(": ");
  Serial.print(message.adrsValue, HEX);
  Serial.print(" ");
  for(int i = 0; i <= message.dataLength - 1; i++) {
    33aa:	21 96       	adiw	r28, 0x01	; 1
    33ac:	f8 01       	movw	r30, r16
    33ae:	80 85       	ldd	r24, Z+8	; 0x08
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	c8 17       	cp	r28, r24
    33b4:	d9 07       	cpc	r29, r25
    33b6:	4c f3       	brlt	.-46     	; 0x338a <_ZN12DebugMethods11dumpMessageERK5FramePKc+0x42>
    Serial.print(message.data[i], HEX);
    Serial.print(" ");
  }
  Serial.print("- Ext:");
    33b8:	8a ec       	ldi	r24, 0xCA	; 202
    33ba:	96 e0       	ldi	r25, 0x06	; 6
    33bc:	61 e3       	ldi	r22, 0x31	; 49
    33be:	75 e0       	ldi	r23, 0x05	; 5
    33c0:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN5Print5printEPKc>
  if(message.isExtendedAdrs) {
    33c4:	f8 01       	movw	r30, r16
    33c6:	82 81       	ldd	r24, Z+2	; 0x02
    33c8:	88 23       	and	r24, r24
    33ca:	29 f0       	breq	.+10     	; 0x33d6 <_ZN12DebugMethods11dumpMessageERK5FramePKc+0x8e>
    Serial.print("Yes ");
    33cc:	8a ec       	ldi	r24, 0xCA	; 202
    33ce:	96 e0       	ldi	r25, 0x06	; 6
    33d0:	68 e3       	ldi	r22, 0x38	; 56
    33d2:	75 e0       	ldi	r23, 0x05	; 5
    33d4:	04 c0       	rjmp	.+8      	; 0x33de <_ZN12DebugMethods11dumpMessageERK5FramePKc+0x96>
  } else {
    Serial.print("No ");
    33d6:	8a ec       	ldi	r24, 0xCA	; 202
    33d8:	96 e0       	ldi	r25, 0x06	; 6
    33da:	6d e3       	ldi	r22, 0x3D	; 61
    33dc:	75 e0       	ldi	r23, 0x05	; 5
    33de:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN5Print5printEPKc>
  }
  Serial.print("- Len:");
    33e2:	8a ec       	ldi	r24, 0xCA	; 202
    33e4:	96 e0       	ldi	r25, 0x06	; 6
    33e6:	61 e4       	ldi	r22, 0x41	; 65
    33e8:	75 e0       	ldi	r23, 0x05	; 5
    33ea:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN5Print5printEPKc>
  Serial.println(message.dataLength,DEC);
    33ee:	8a ec       	ldi	r24, 0xCA	; 202
    33f0:	96 e0       	ldi	r25, 0x06	; 6
    33f2:	f8 01       	movw	r30, r16
    33f4:	60 85       	ldd	r22, Z+8	; 0x08
    33f6:	4a e0       	ldi	r20, 0x0A	; 10
    33f8:	50 e0       	ldi	r21, 0x00	; 0
    33fa:	0e 94 04 24 	call	0x4808	; 0x4808 <_ZN5Print7printlnEhi>
#endif
}
    33fe:	df 91       	pop	r29
    3400:	cf 91       	pop	r28
    3402:	1f 91       	pop	r17
    3404:	0f 91       	pop	r16
    3406:	08 95       	ret

00003408 <_ZN10LCDMethods13setLcdMessageEPKcS1_R7MCP2515RKi>:
 * @param custom1  Message for screen 1
 * @param custom2  Message for screen 2
 * @param MSCAN    Reference to the MSCAN bus
 * @param currentMode The current application mode
 */
void LCDMethods::setLcdMessage(const char* custom1, const char* custom2, MCP2515& MSCAN, const int& currentMode) {
    3408:	8f 92       	push	r8
    340a:	9f 92       	push	r9
    340c:	af 92       	push	r10
    340e:	bf 92       	push	r11
    3410:	cf 92       	push	r12
    3412:	df 92       	push	r13
    3414:	ef 92       	push	r14
    3416:	ff 92       	push	r15
    3418:	0f 93       	push	r16
    341a:	1f 93       	push	r17
    341c:	cf 93       	push	r28
    341e:	df 93       	push	r29
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	a1 97       	sbiw	r28, 0x21	; 33
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	5c 01       	movw	r10, r24
    3432:	4b 01       	movw	r8, r22
    3434:	8a 01       	movw	r16, r20
  
  RxduinoMethods::enableMSCAN();
    3436:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <_ZN14RxduinoMethods11enableMSCANEv>
  
  //CAN Structure
  Frame message; 
 
  DebugMethods::serialDebug("|%s||%s|\n", custom1, custom2);   
    343a:	00 d0       	rcall	.+0      	; 0x343c <_ZN10LCDMethods13setLcdMessageEPKcS1_R7MCP2515RKi+0x34>
    343c:	00 d0       	rcall	.+0      	; 0x343e <_ZN10LCDMethods13setLcdMessageEPKcS1_R7MCP2515RKi+0x36>
    343e:	00 d0       	rcall	.+0      	; 0x3440 <_ZN10LCDMethods13setLcdMessageEPKcS1_R7MCP2515RKi+0x38>
    3440:	ed b7       	in	r30, 0x3d	; 61
    3442:	fe b7       	in	r31, 0x3e	; 62
    3444:	31 96       	adiw	r30, 0x01	; 1
    3446:	88 e4       	ldi	r24, 0x48	; 72
    3448:	95 e0       	ldi	r25, 0x05	; 5
    344a:	ad b7       	in	r26, 0x3d	; 61
    344c:	be b7       	in	r27, 0x3e	; 62
    344e:	12 96       	adiw	r26, 0x02	; 2
    3450:	9c 93       	st	X, r25
    3452:	8e 93       	st	-X, r24
    3454:	11 97       	sbiw	r26, 0x01	; 1
    3456:	b3 82       	std	Z+3, r11	; 0x03
    3458:	a2 82       	std	Z+2, r10	; 0x02
    345a:	95 82       	std	Z+5, r9	; 0x05
    345c:	84 82       	std	Z+4, r8	; 0x04
    345e:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
#ifdef _DEBUGDATA  
  return;
#else	   

  // Prepare & Send Init message
  CANMethods::initLcdForMessaging(message);        
    3462:	8d b7       	in	r24, 0x3d	; 61
    3464:	9e b7       	in	r25, 0x3e	; 62
    3466:	06 96       	adiw	r24, 0x06	; 6
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	9e bf       	out	0x3e, r25	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	8d bf       	out	0x3d, r24	; 61
    3472:	ce 01       	movw	r24, r28
    3474:	41 96       	adiw	r24, 0x11	; 17
    3476:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <_ZN10CANMethods19initLcdForMessagingER5Frame>
  MSCAN.transmitCANMessage(message, 10);
    347a:	2a e0       	ldi	r18, 0x0A	; 10
    347c:	c2 2e       	mov	r12, r18
    347e:	d1 2c       	mov	r13, r1
    3480:	e1 2c       	mov	r14, r1
    3482:	f1 2c       	mov	r15, r1
    3484:	cd 86       	std	Y+13, r12	; 0x0d
    3486:	de 86       	std	Y+14, r13	; 0x0e
    3488:	ef 86       	std	Y+15, r14	; 0x0f
    348a:	f8 8a       	std	Y+16, r15	; 0x10
    348c:	c8 01       	movw	r24, r16
    348e:	be 01       	movw	r22, r28
    3490:	6f 5e       	subi	r22, 0xEF	; 239
    3492:	7f 4f       	sbci	r23, 0xFF	; 255
    3494:	ae 01       	movw	r20, r28
    3496:	43 5f       	subi	r20, 0xF3	; 243
    3498:	5f 4f       	sbci	r21, 0xFF	; 255
    349a:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7MCP251518transmitCANMessageER5FrameRKm>
  CANMethods::prepareMSCANMessage(message, 0, custom1);
    349e:	1c 82       	std	Y+4, r1	; 0x04
    34a0:	1b 82       	std	Y+3, r1	; 0x03
    34a2:	ce 01       	movw	r24, r28
    34a4:	41 96       	adiw	r24, 0x11	; 17
    34a6:	be 01       	movw	r22, r28
    34a8:	6d 5f       	subi	r22, 0xFD	; 253
    34aa:	7f 4f       	sbci	r23, 0xFF	; 255
    34ac:	a5 01       	movw	r20, r10
    34ae:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc>
  MSCAN.transmitCANMessage(message, 10);
    34b2:	c9 86       	std	Y+9, r12	; 0x09
    34b4:	da 86       	std	Y+10, r13	; 0x0a
    34b6:	eb 86       	std	Y+11, r14	; 0x0b
    34b8:	fc 86       	std	Y+12, r15	; 0x0c
    34ba:	c8 01       	movw	r24, r16
    34bc:	be 01       	movw	r22, r28
    34be:	6f 5e       	subi	r22, 0xEF	; 239
    34c0:	7f 4f       	sbci	r23, 0xFF	; 255
    34c2:	ae 01       	movw	r20, r28
    34c4:	47 5f       	subi	r20, 0xF7	; 247
    34c6:	5f 4f       	sbci	r21, 0xFF	; 255
    34c8:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7MCP251518transmitCANMessageER5FrameRKm>
  CANMethods::prepareMSCANMessage(message, 1, custom2);
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9a 83       	std	Y+2, r25	; 0x02
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	ce 01       	movw	r24, r28
    34d6:	41 96       	adiw	r24, 0x11	; 17
    34d8:	be 01       	movw	r22, r28
    34da:	6f 5f       	subi	r22, 0xFF	; 255
    34dc:	7f 4f       	sbci	r23, 0xFF	; 255
    34de:	a4 01       	movw	r20, r8
    34e0:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc>
  MSCAN.transmitCANMessage(message, 10);			  
    34e4:	cd 82       	std	Y+5, r12	; 0x05
    34e6:	de 82       	std	Y+6, r13	; 0x06
    34e8:	ef 82       	std	Y+7, r14	; 0x07
    34ea:	f8 86       	std	Y+8, r15	; 0x08
    34ec:	c8 01       	movw	r24, r16
    34ee:	be 01       	movw	r22, r28
    34f0:	6f 5e       	subi	r22, 0xEF	; 239
    34f2:	7f 4f       	sbci	r23, 0xFF	; 255
    34f4:	ae 01       	movw	r20, r28
    34f6:	4b 5f       	subi	r20, 0xFB	; 251
    34f8:	5f 4f       	sbci	r21, 0xFF	; 255
    34fa:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7MCP251518transmitCANMessageER5FrameRKm>

#endif
  
  RxduinoMethods::disableCAN();
    34fe:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN14RxduinoMethods10disableCANEv>
    3502:	a1 96       	adiw	r28, 0x21	; 33
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	de bf       	out	0x3e, r29	; 62
    350a:	0f be       	out	0x3f, r0	; 63
    350c:	cd bf       	out	0x3d, r28	; 61
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	1f 91       	pop	r17
    3514:	0f 91       	pop	r16
    3516:	ff 90       	pop	r15
    3518:	ef 90       	pop	r14
    351a:	df 90       	pop	r13
    351c:	cf 90       	pop	r12
    351e:	bf 90       	pop	r11
    3520:	af 90       	pop	r10
    3522:	9f 90       	pop	r9
    3524:	8f 90       	pop	r8
    3526:	08 95       	ret

00003528 <_ZN10LCDMethods13setLcdMessageEPKcR6StringR7MCP2515RKi>:
 * @param screen1    Message for screen 1
 * @param screen2    Message for screen 2
 * @param MSCAN      Reference to the MSCAN bus
 * @param currentMode The current application mode
 */
void LCDMethods::setLcdMessage(const char* screen1, String& screen2, MCP2515& MSCAN, const int& currentMode) {
    3528:	8f 92       	push	r8
    352a:	9f 92       	push	r9
    352c:	af 92       	push	r10
    352e:	bf 92       	push	r11
    3530:	cf 92       	push	r12
    3532:	df 92       	push	r13
    3534:	ef 92       	push	r14
    3536:	ff 92       	push	r15
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	cd b7       	in	r28, 0x3d	; 61
    3542:	de b7       	in	r29, 0x3e	; 62
    3544:	6c 01       	movw	r12, r24
    3546:	cb 01       	movw	r24, r22
    3548:	5a 01       	movw	r10, r20
    354a:	49 01       	movw	r8, r18
  char cScreen2[screen2.length() + 1];
  screen2.toCharArray(cScreen2, sizeof(cScreen2));
  LCDMethods::setLcdMessage(screen1, cScreen2, MSCAN, currentMode);
}
    354c:	ed b6       	in	r14, 0x3d	; 61
    354e:	fe b6       	in	r15, 0x3e	; 62
 * @param screen2    Message for screen 2
 * @param MSCAN      Reference to the MSCAN bus
 * @param currentMode The current application mode
 */
void LCDMethods::setLcdMessage(const char* screen1, String& screen2, MCP2515& MSCAN, const int& currentMode) {
  char cScreen2[screen2.length() + 1];
    3550:	fb 01       	movw	r30, r22
    3552:	44 81       	ldd	r20, Z+4	; 0x04
    3554:	55 81       	ldd	r21, Z+5	; 0x05
    3556:	4f 5f       	subi	r20, 0xFF	; 255
    3558:	5f 4f       	sbci	r21, 0xFF	; 255
    355a:	2d b7       	in	r18, 0x3d	; 61
    355c:	3e b7       	in	r19, 0x3e	; 62
    355e:	24 1b       	sub	r18, r20
    3560:	35 0b       	sbc	r19, r21
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	f8 94       	cli
    3566:	3e bf       	out	0x3e, r19	; 62
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	2d bf       	out	0x3d, r18	; 61
    356c:	0d b7       	in	r16, 0x3d	; 61
    356e:	1e b7       	in	r17, 0x3e	; 62
    3570:	0f 5f       	subi	r16, 0xFF	; 255
    3572:	1f 4f       	sbci	r17, 0xFF	; 255
    3574:	b8 01       	movw	r22, r16
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZNK6String8getBytesEPhjj>
  screen2.toCharArray(cScreen2, sizeof(cScreen2));
  LCDMethods::setLcdMessage(screen1, cScreen2, MSCAN, currentMode);
    357e:	c6 01       	movw	r24, r12
    3580:	b8 01       	movw	r22, r16
    3582:	a5 01       	movw	r20, r10
    3584:	94 01       	movw	r18, r8
    3586:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN10LCDMethods13setLcdMessageEPKcS1_R7MCP2515RKi>
}
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	fe be       	out	0x3e, r15	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	ed be       	out	0x3d, r14	; 61
    3594:	df 91       	pop	r29
    3596:	cf 91       	pop	r28
    3598:	1f 91       	pop	r17
    359a:	0f 91       	pop	r16
    359c:	ff 90       	pop	r15
    359e:	ef 90       	pop	r14
    35a0:	df 90       	pop	r13
    35a2:	cf 90       	pop	r12
    35a4:	bf 90       	pop	r11
    35a6:	af 90       	pop	r10
    35a8:	9f 90       	pop	r9
    35aa:	8f 90       	pop	r8
    35ac:	08 95       	ret

000035ae <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi>:
 *
 * @param  data        The data to print out
 * @param  MSCAN       Reference to the MSCAN bus
 * @param  currentMode The current application mode
 */ 
void LCDMethods::setLcdMessage(const char* data, MCP2515& MSCAN, const int& currentMode) {
    35ae:	af 92       	push	r10
    35b0:	bf 92       	push	r11
    35b2:	cf 92       	push	r12
    35b4:	df 92       	push	r13
    35b6:	ef 92       	push	r14
    35b8:	ff 92       	push	r15
    35ba:	0f 93       	push	r16
    35bc:	1f 93       	push	r17
    35be:	cf 93       	push	r28
    35c0:	df 93       	push	r29
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	2e 97       	sbiw	r28, 0x0e	; 14
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	7c 01       	movw	r14, r24
    35d4:	6b 01       	movw	r12, r22
    35d6:	5a 01       	movw	r10, r20
  
  char screen1[8], screen2[6];
  int totalScreen1Length, totalScreen2Length;
  
  // Set up screen 1
  totalScreen1Length = strlen(data) >= 7? 
    35d8:	fc 01       	movw	r30, r24
    35da:	01 90       	ld	r0, Z+
    35dc:	00 20       	and	r0, r0
    35de:	e9 f7       	brne	.-6      	; 0x35da <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi+0x2c>
    35e0:	31 97       	sbiw	r30, 0x01	; 1
    35e2:	e8 1b       	sub	r30, r24
    35e4:	f9 0b       	sbc	r31, r25
                                          7 : strlen(data);
    35e6:	e7 30       	cpi	r30, 0x07	; 7
    35e8:	f1 05       	cpc	r31, r1
    35ea:	10 f4       	brcc	.+4      	; 0x35f0 <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi+0x42>
    35ec:	8f 01       	movw	r16, r30
    35ee:	02 c0       	rjmp	.+4      	; 0x35f4 <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi+0x46>
    35f0:	07 e0       	ldi	r16, 0x07	; 7
    35f2:	10 e0       	ldi	r17, 0x00	; 0
  strncpy(screen1, data,   totalScreen1Length);
    35f4:	ce 01       	movw	r24, r28
    35f6:	07 96       	adiw	r24, 0x07	; 7
    35f8:	b7 01       	movw	r22, r14
    35fa:	a8 01       	movw	r20, r16
    35fc:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <strncpy>
  screen1[totalScreen1Length] = '\0';  
    3600:	e7 e0       	ldi	r30, 0x07	; 7
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	ec 0f       	add	r30, r28
    3606:	fd 1f       	adc	r31, r29
    3608:	e0 0f       	add	r30, r16
    360a:	f1 1f       	adc	r31, r17
    360c:	10 82       	st	Z, r1

  // Set up screen 2 if needed
  if(strlen(data) > 7) {                                              
    360e:	f7 01       	movw	r30, r14
    3610:	01 90       	ld	r0, Z+
    3612:	00 20       	and	r0, r0
    3614:	e9 f7       	brne	.-6      	; 0x3610 <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi+0x62>
    3616:	31 97       	sbiw	r30, 0x01	; 1
    3618:	ee 19       	sub	r30, r14
    361a:	ff 09       	sbc	r31, r15
    361c:	e8 30       	cpi	r30, 0x08	; 8
    361e:	f1 05       	cpc	r31, r1
    3620:	c0 f0       	brcs	.+48     	; 0x3652 <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi+0xa4>
    totalScreen2Length = strlen(data) - 7 >= 5? 
                                          5 : strlen(data) - 7;       
    3622:	37 97       	sbiw	r30, 0x07	; 7
    3624:	e5 30       	cpi	r30, 0x05	; 5
    3626:	f1 05       	cpc	r31, r1
    3628:	10 f4       	brcc	.+4      	; 0x362e <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi+0x80>
    362a:	8f 01       	movw	r16, r30
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi+0x84>
    362e:	05 e0       	ldi	r16, 0x05	; 5
    3630:	10 e0       	ldi	r17, 0x00	; 0
    strncpy(screen2, data+7, totalScreen2Length);
    3632:	b7 01       	movw	r22, r14
    3634:	69 5f       	subi	r22, 0xF9	; 249
    3636:	7f 4f       	sbci	r23, 0xFF	; 255
    3638:	ce 01       	movw	r24, r28
    363a:	01 96       	adiw	r24, 0x01	; 1
    363c:	a8 01       	movw	r20, r16
    363e:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <strncpy>
    screen2[totalScreen2Length] = '\0';
    3642:	e1 e0       	ldi	r30, 0x01	; 1
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	ec 0f       	add	r30, r28
    3648:	fd 1f       	adc	r31, r29
    364a:	e0 0f       	add	r30, r16
    364c:	f1 1f       	adc	r31, r17
    364e:	10 82       	st	Z, r1
    3650:	01 c0       	rjmp	.+2      	; 0x3654 <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi+0xa6>
  } else
    // If not, just null out screen2
    screen2[0] = '\0';
    3652:	19 82       	std	Y+1, r1	; 0x01
  
  // Set the message
  LCDMethods::setLcdMessage(screen1, screen2, MSCAN, currentMode);
    3654:	ce 01       	movw	r24, r28
    3656:	07 96       	adiw	r24, 0x07	; 7
    3658:	be 01       	movw	r22, r28
    365a:	6f 5f       	subi	r22, 0xFF	; 255
    365c:	7f 4f       	sbci	r23, 0xFF	; 255
    365e:	a6 01       	movw	r20, r12
    3660:	95 01       	movw	r18, r10
    3662:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN10LCDMethods13setLcdMessageEPKcS1_R7MCP2515RKi>
  
  // Clean up
  //memset(screen1, 0, sizeof(screen1));
  //memset(screen2, 0, sizeof(screen2));
}
    3666:	2e 96       	adiw	r28, 0x0e	; 14
    3668:	0f b6       	in	r0, 0x3f	; 63
    366a:	f8 94       	cli
    366c:	de bf       	out	0x3e, r29	; 62
    366e:	0f be       	out	0x3f, r0	; 63
    3670:	cd bf       	out	0x3d, r28	; 61
    3672:	df 91       	pop	r29
    3674:	cf 91       	pop	r28
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	ff 90       	pop	r15
    367c:	ef 90       	pop	r14
    367e:	df 90       	pop	r13
    3680:	cf 90       	pop	r12
    3682:	bf 90       	pop	r11
    3684:	af 90       	pop	r10
    3686:	08 95       	ret

00003688 <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKiS5_>:
 *
 * @param	data	    The data to print out
 * @param	MSCAN	    Reference to the MSCAN bus
 * @param	currentMode The current application mode
 */
void LCDMethods::setLcdMessage(const char* data, MCP2515& MSCAN, const int& currentMode, const int& ttime) {
    3688:	af 92       	push	r10
    368a:	bf 92       	push	r11
    368c:	cf 92       	push	r12
    368e:	df 92       	push	r13
    3690:	ef 92       	push	r14
    3692:	ff 92       	push	r15
    3694:	0f 93       	push	r16
    3696:	1f 93       	push	r17
    3698:	cf 93       	push	r28
    369a:	df 93       	push	r29
    369c:	7c 01       	movw	r14, r24
    369e:	6b 01       	movw	r12, r22
    36a0:	5a 01       	movw	r10, r20
    36a2:	89 01       	movw	r16, r18
	for(int i = 0; i < ttime; i++) {
    36a4:	c0 e0       	ldi	r28, 0x00	; 0
    36a6:	d0 e0       	ldi	r29, 0x00	; 0
    36a8:	06 c0       	rjmp	.+12     	; 0x36b6 <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKiS5_+0x2e>
		setLcdMessage(data, MSCAN, currentMode);
    36aa:	c7 01       	movw	r24, r14
    36ac:	b6 01       	movw	r22, r12
    36ae:	a5 01       	movw	r20, r10
    36b0:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi>
 * @param	data	    The data to print out
 * @param	MSCAN	    Reference to the MSCAN bus
 * @param	currentMode The current application mode
 */
void LCDMethods::setLcdMessage(const char* data, MCP2515& MSCAN, const int& currentMode, const int& ttime) {
	for(int i = 0; i < ttime; i++) {
    36b4:	21 96       	adiw	r28, 0x01	; 1
    36b6:	f8 01       	movw	r30, r16
    36b8:	80 81       	ld	r24, Z
    36ba:	91 81       	ldd	r25, Z+1	; 0x01
    36bc:	c8 17       	cp	r28, r24
    36be:	d9 07       	cpc	r29, r25
    36c0:	a4 f3       	brlt	.-24     	; 0x36aa <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKiS5_+0x22>
		setLcdMessage(data, MSCAN, currentMode);
	}
}	
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	1f 91       	pop	r17
    36c8:	0f 91       	pop	r16
    36ca:	ff 90       	pop	r15
    36cc:	ef 90       	pop	r14
    36ce:	df 90       	pop	r13
    36d0:	cf 90       	pop	r12
    36d2:	bf 90       	pop	r11
    36d4:	af 90       	pop	r10
    36d6:	08 95       	ret

000036d8 <_ZN10LCDMethods13setLcdMessageER6StringR7MCP2515RKi>:
 *
 * @param  data        The data to print out
 * @param  MSCAN       Reference to the MSCAN bus
 * @param  currentMode The current application mode
 */ 
void LCDMethods::setLcdMessage(String& data, MCP2515& MSCAN, const int& currentMode) {
    36d8:	af 92       	push	r10
    36da:	bf 92       	push	r11
    36dc:	cf 92       	push	r12
    36de:	df 92       	push	r13
    36e0:	ef 92       	push	r14
    36e2:	ff 92       	push	r15
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	6b 01       	movw	r12, r22
    36f2:	5a 01       	movw	r10, r20
  char cData[data.length() + 1];
  data.toCharArray(cData, sizeof(cData));
  LCDMethods::setLcdMessage(cData, MSCAN, currentMode);  
}
    36f4:	ed b6       	in	r14, 0x3d	; 61
    36f6:	fe b6       	in	r15, 0x3e	; 62
 * @param  data        The data to print out
 * @param  MSCAN       Reference to the MSCAN bus
 * @param  currentMode The current application mode
 */ 
void LCDMethods::setLcdMessage(String& data, MCP2515& MSCAN, const int& currentMode) {
  char cData[data.length() + 1];
    36f8:	fc 01       	movw	r30, r24
    36fa:	44 81       	ldd	r20, Z+4	; 0x04
    36fc:	55 81       	ldd	r21, Z+5	; 0x05
    36fe:	4f 5f       	subi	r20, 0xFF	; 255
    3700:	5f 4f       	sbci	r21, 0xFF	; 255
    3702:	2d b7       	in	r18, 0x3d	; 61
    3704:	3e b7       	in	r19, 0x3e	; 62
    3706:	24 1b       	sub	r18, r20
    3708:	35 0b       	sbc	r19, r21
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	3e bf       	out	0x3e, r19	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	2d bf       	out	0x3d, r18	; 61
    3714:	0d b7       	in	r16, 0x3d	; 61
    3716:	1e b7       	in	r17, 0x3e	; 62
    3718:	0f 5f       	subi	r16, 0xFF	; 255
    371a:	1f 4f       	sbci	r17, 0xFF	; 255
    371c:	b8 01       	movw	r22, r16
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	0e 94 6d 25 	call	0x4ada	; 0x4ada <_ZNK6String8getBytesEPhjj>
  data.toCharArray(cData, sizeof(cData));
  LCDMethods::setLcdMessage(cData, MSCAN, currentMode);  
    3726:	c8 01       	movw	r24, r16
    3728:	b6 01       	movw	r22, r12
    372a:	a5 01       	movw	r20, r10
    372c:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN10LCDMethods13setLcdMessageEPKcR7MCP2515RKi>
}
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	fe be       	out	0x3e, r15	; 62
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	ed be       	out	0x3d, r14	; 61
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	1f 91       	pop	r17
    3740:	0f 91       	pop	r16
    3742:	ff 90       	pop	r15
    3744:	ef 90       	pop	r14
    3746:	df 90       	pop	r13
    3748:	cf 90       	pop	r12
    374a:	bf 90       	pop	r11
    374c:	af 90       	pop	r10
    374e:	08 95       	ret

00003750 <_ZN10MILMethods13clearMILCodesER7MCP2515S1_>:
 * Function to clear the MIL codes that are currently being thrown 
 * or stored on the vehicle
 * @param HSCAN		Pointer to HSCAN object
 * @param MSCAN		Pointer to MSCAN object
 */
void MILMethods::clearMILCodes(MCP2515& HSCAN, MCP2515& MSCAN) {
    3750:	ef 92       	push	r14
    3752:	ff 92       	push	r15
    3754:	0f 93       	push	r16
    3756:	1f 93       	push	r17
    3758:	cf 93       	push	r28
    375a:	df 93       	push	r29
    375c:	cd b7       	in	r28, 0x3d	; 61
    375e:	de b7       	in	r29, 0x3e	; 62
    3760:	67 97       	sbiw	r28, 0x17	; 23
    3762:	0f b6       	in	r0, 0x3f	; 63
    3764:	f8 94       	cli
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	cd bf       	out	0x3d, r28	; 61
    376c:	8c 01       	movw	r16, r24
    376e:	7b 01       	movw	r14, r22
  Frame message;
  message.adrsValue = PID_REQUEST;
    3770:	8f ed       	ldi	r24, 0xDF	; 223
    3772:	97 e0       	ldi	r25, 0x07	; 7
    3774:	98 87       	std	Y+8, r25	; 0x08
    3776:	8f 83       	std	Y+7, r24	; 0x07
  message.isExtendedAdrs = false;
    3778:	19 86       	std	Y+9, r1	; 0x09
  message.rtr = false;
    377a:	1e 86       	std	Y+14, r1	; 0x0e
  message.dataLength = 8;
    377c:	88 e0       	ldi	r24, 0x08	; 8
    377e:	8f 87       	std	Y+15, r24	; 0x0f
  message.data[0] = 0x02;
    3780:	82 e0       	ldi	r24, 0x02	; 2
    3782:	88 8b       	std	Y+16, r24	; 0x10
  message.data[1] = 0x04;
    3784:	84 e0       	ldi	r24, 0x04	; 4
    3786:	89 8b       	std	Y+17, r24	; 0x11
  for(int i = 2; i <= 7; i++)
	message.data[i] = 0x00;
    3788:	1a 8a       	std	Y+18, r1	; 0x12
    378a:	1b 8a       	std	Y+19, r1	; 0x13
    378c:	1c 8a       	std	Y+20, r1	; 0x14
    378e:	1d 8a       	std	Y+21, r1	; 0x15
    3790:	1e 8a       	std	Y+22, r1	; 0x16
    3792:	1f 8a       	std	Y+23, r1	; 0x17
 
  RxduinoMethods::enableHSCAN(); 
    3794:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <_ZN14RxduinoMethods11enableHSCANEv>
  HSCAN.transmitCANMessage(message, 100);
    3798:	84 e6       	ldi	r24, 0x64	; 100
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	a0 e0       	ldi	r26, 0x00	; 0
    379e:	b0 e0       	ldi	r27, 0x00	; 0
    37a0:	8b 83       	std	Y+3, r24	; 0x03
    37a2:	9c 83       	std	Y+4, r25	; 0x04
    37a4:	ad 83       	std	Y+5, r26	; 0x05
    37a6:	be 83       	std	Y+6, r27	; 0x06
    37a8:	c8 01       	movw	r24, r16
    37aa:	be 01       	movw	r22, r28
    37ac:	69 5f       	subi	r22, 0xF9	; 249
    37ae:	7f 4f       	sbci	r23, 0xFF	; 255
    37b0:	ae 01       	movw	r20, r28
    37b2:	4d 5f       	subi	r20, 0xFD	; 253
    37b4:	5f 4f       	sbci	r21, 0xFF	; 255
    37b6:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7MCP251518transmitCANMessageER5FrameRKm>
  RxduinoMethods::disableCAN();
    37ba:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN14RxduinoMethods10disableCANEv>
  
  // Post to screen
  LCDMethods::setLcdMessage("Clear: ", "Done", MSCAN, CEL);		
    37be:	86 e0       	ldi	r24, 0x06	; 6
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	9a 83       	std	Y+2, r25	; 0x02
    37c4:	89 83       	std	Y+1, r24	; 0x01
    37c6:	82 e5       	ldi	r24, 0x52	; 82
    37c8:	95 e0       	ldi	r25, 0x05	; 5
    37ca:	6a e5       	ldi	r22, 0x5A	; 90
    37cc:	75 e0       	ldi	r23, 0x05	; 5
    37ce:	a7 01       	movw	r20, r14
    37d0:	9e 01       	movw	r18, r28
    37d2:	2f 5f       	subi	r18, 0xFF	; 255
    37d4:	3f 4f       	sbci	r19, 0xFF	; 255
    37d6:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN10LCDMethods13setLcdMessageEPKcS1_R7MCP2515RKi>
}
    37da:	67 96       	adiw	r28, 0x17	; 23
    37dc:	0f b6       	in	r0, 0x3f	; 63
    37de:	f8 94       	cli
    37e0:	de bf       	out	0x3e, r29	; 62
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	cd bf       	out	0x3d, r28	; 61
    37e6:	df 91       	pop	r29
    37e8:	cf 91       	pop	r28
    37ea:	1f 91       	pop	r17
    37ec:	0f 91       	pop	r16
    37ee:	ff 90       	pop	r15
    37f0:	ef 90       	pop	r14
    37f2:	08 95       	ret

000037f4 <_ZN10MILMethods11getMILCountER7MCP2515>:
/** 
 * Request the total number of MIL codes thrown by the system
 * @param	HSCAN	Pointer to HSCAN Object
 * @return			Number of MIL Codes
 */
int MILMethods::getMILCount(MCP2515& HSCAN) {
    37f4:	0f 93       	push	r16
    37f6:	1f 93       	push	r17
    37f8:	cf 93       	push	r28
    37fa:	df 93       	push	r29
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
    3800:	65 97       	sbiw	r28, 0x15	; 21
    3802:	0f b6       	in	r0, 0x3f	; 63
    3804:	f8 94       	cli
    3806:	de bf       	out	0x3e, r29	; 62
    3808:	0f be       	out	0x3f, r0	; 63
    380a:	cd bf       	out	0x3d, r28	; 61
    380c:	8c 01       	movw	r16, r24
	Frame message;
	message.adrsValue = PID_REQUEST;
    380e:	8f ed       	ldi	r24, 0xDF	; 223
    3810:	97 e0       	ldi	r25, 0x07	; 7
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
	message.isExtendedAdrs = false;
    3816:	1f 82       	std	Y+7, r1	; 0x07
	message.rtr = false;
    3818:	1c 86       	std	Y+12, r1	; 0x0c
	message.dataLength = 8;
    381a:	88 e0       	ldi	r24, 0x08	; 8
    381c:	8d 87       	std	Y+13, r24	; 0x0d
	message.data[0] = 0x01;
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	8e 87       	std	Y+14, r24	; 0x0e
	message.data[1] = 0x01;
    3822:	8f 87       	std	Y+15, r24	; 0x0f
	for(int i = 2; i <= 7; i++)
	  message.data[i] = 0x00;
    3824:	18 8a       	std	Y+16, r1	; 0x10
    3826:	19 8a       	std	Y+17, r1	; 0x11
    3828:	1a 8a       	std	Y+18, r1	; 0x12
    382a:	1b 8a       	std	Y+19, r1	; 0x13
    382c:	1c 8a       	std	Y+20, r1	; 0x14
    382e:	1d 8a       	std	Y+21, r1	; 0x15
	  
	RxduinoMethods::enableHSCAN();
    3830:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <_ZN14RxduinoMethods11enableHSCANEv>
	HSCAN.transmitCANMessage(message, 100);
    3834:	84 e6       	ldi	r24, 0x64	; 100
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	a0 e0       	ldi	r26, 0x00	; 0
    383a:	b0 e0       	ldi	r27, 0x00	; 0
    383c:	89 83       	std	Y+1, r24	; 0x01
    383e:	9a 83       	std	Y+2, r25	; 0x02
    3840:	ab 83       	std	Y+3, r26	; 0x03
    3842:	bc 83       	std	Y+4, r27	; 0x04
    3844:	c8 01       	movw	r24, r16
    3846:	be 01       	movw	r22, r28
    3848:	6b 5f       	subi	r22, 0xFB	; 251
    384a:	7f 4f       	sbci	r23, 0xFF	; 255
    384c:	ae 01       	movw	r20, r28
    384e:	4f 5f       	subi	r20, 0xFF	; 255
    3850:	5f 4f       	sbci	r21, 0xFF	; 255
    3852:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7MCP251518transmitCANMessageER5FrameRKm>
	RxduinoMethods::disableCAN();
    3856:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN14RxduinoMethods10disableCANEv>
	
	// 1000 | 0000 = x80
	// 0111 | 1111 = x7F
	//A7654   3210
	bool milOn = (message.data[2] & 0x80);
	int milCount = (message.data[2] & 0x7F);
    385a:	88 89       	ldd	r24, Y+16	; 0x10
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	8f 77       	andi	r24, 0x7F	; 127
    3860:	90 70       	andi	r25, 0x00	; 0
	
	return milCount;	
}
    3862:	65 96       	adiw	r28, 0x15	; 21
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	df 91       	pop	r29
    3870:	cf 91       	pop	r28
    3872:	1f 91       	pop	r17
    3874:	0f 91       	pop	r16
    3876:	08 95       	ret

00003878 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri>:
 * @param HSCAN		Pointer to HSCAN object
 * @param MSCAN		Pointer to MSCAN object
 * @param milIndex  The index of the MIL code
 * @return        True if valid data is returned
 */
boolean MILMethods::getMILData(MCP2515& HSCAN, MCP2515& MSCAN, int& milIndex) {
    3878:	6f 92       	push	r6
    387a:	7f 92       	push	r7
    387c:	8f 92       	push	r8
    387e:	9f 92       	push	r9
    3880:	af 92       	push	r10
    3882:	bf 92       	push	r11
    3884:	cf 92       	push	r12
    3886:	df 92       	push	r13
    3888:	ef 92       	push	r14
    388a:	ff 92       	push	r15
    388c:	0f 93       	push	r16
    388e:	1f 93       	push	r17
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
    3898:	c0 54       	subi	r28, 0x40	; 64
    389a:	d0 40       	sbci	r29, 0x00	; 0
    389c:	0f b6       	in	r0, 0x3f	; 63
    389e:	f8 94       	cli
    38a0:	de bf       	out	0x3e, r29	; 62
    38a2:	0f be       	out	0x3f, r0	; 63
    38a4:	cd bf       	out	0x3d, r28	; 61
    38a6:	4c 01       	movw	r8, r24
    38a8:	3b 01       	movw	r6, r22
    38aa:	8a 01       	movw	r16, r20
 
  Frame message;
  message.adrsValue = PID_REQUEST;
    38ac:	8f ed       	ldi	r24, 0xDF	; 223
    38ae:	97 e0       	ldi	r25, 0x07	; 7
    38b0:	99 ab       	sts	0x59, r25
    38b2:	88 ab       	sts	0x58, r24
  message.isExtendedAdrs = false;
    38b4:	1a aa       	sts	0x9a, r17
  message.rtr = false;
    38b6:	1f aa       	sts	0x9f, r17
  message.dataLength = 8;
    38b8:	88 e0       	ldi	r24, 0x08	; 8
    38ba:	88 af       	sts	0x78, r24
  message.data[0] = 0x02;
  message.data[1] = 0x03;
  for(int i = 2; i <= 7; i++)
	message.data[i] = 0x00;	*/

  message.data[0] = 0x03;
    38bc:	83 e0       	ldi	r24, 0x03	; 3
    38be:	89 af       	sts	0x79, r24
  for(int i = 1; i <= 7; i++)
  message.data[i] = 0x00;
    38c0:	1a ae       	sts	0xba, r17
    38c2:	1b ae       	sts	0xbb, r17
    38c4:	1c ae       	sts	0xbc, r17
    38c6:	1d ae       	sts	0xbd, r17
    38c8:	1e ae       	sts	0xbe, r17
    38ca:	1f ae       	sts	0xbf, r17
    38cc:	21 96       	adiw	r28, 0x01	; 1
    38ce:	1f ae       	sts	0xbf, r17
    38d0:	21 97       	sbiw	r28, 0x01	; 1
	
  // Find total number of codes
  int mCount = 1; //MILMethods::getMILCount(HSCAN);
  
  DebugMethods::serialDebug("Total MIL: %d\n", mCount);
    38d2:	00 d0       	rcall	.+0      	; 0x38d4 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x5c>
    38d4:	00 d0       	rcall	.+0      	; 0x38d6 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x5e>
    38d6:	8f e5       	ldi	r24, 0x5F	; 95
    38d8:	95 e0       	ldi	r25, 0x05	; 5
    38da:	ed b7       	in	r30, 0x3d	; 61
    38dc:	fe b7       	in	r31, 0x3e	; 62
    38de:	92 83       	std	Z+2, r25	; 0x02
    38e0:	81 83       	std	Z+1, r24	; 0x01
    38e2:	31 e0       	ldi	r19, 0x01	; 1
    38e4:	a3 2e       	mov	r10, r19
    38e6:	b1 2c       	mov	r11, r1
    38e8:	b4 82       	std	Z+4, r11	; 0x04
    38ea:	a3 82       	std	Z+3, r10	; 0x03
    38ec:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <_ZN12DebugMethods11serialDebugEPKcz>
	
  RxduinoMethods::enableHSCAN(); 
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	0f 90       	pop	r0
    38f8:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <_ZN14RxduinoMethods11enableHSCANEv>
  
  if(HSCAN.transmitCANMessage(message,100)) {
    38fc:	a4 e6       	ldi	r26, 0x64	; 100
    38fe:	ca 2e       	mov	r12, r26
    3900:	d1 2c       	mov	r13, r1
    3902:	e1 2c       	mov	r14, r1
    3904:	f1 2c       	mov	r15, r1
    3906:	c9 86       	std	Y+9, r12	; 0x09
    3908:	da 86       	std	Y+10, r13	; 0x0a
    390a:	eb 86       	std	Y+11, r14	; 0x0b
    390c:	fc 86       	std	Y+12, r15	; 0x0c
    390e:	c4 01       	movw	r24, r8
    3910:	be 01       	movw	r22, r28
    3912:	60 5d       	subi	r22, 0xD0	; 208
    3914:	7f 4f       	sbci	r23, 0xFF	; 255
    3916:	ae 01       	movw	r20, r28
    3918:	47 5f       	subi	r20, 0xF7	; 247
    391a:	5f 4f       	sbci	r21, 0xFF	; 255
    391c:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN7MCP251518transmitCANMessageER5FrameRKm>
    3920:	88 23       	and	r24, r24
    3922:	09 f4       	brne	.+2      	; 0x3926 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0xae>
    3924:	db c0       	rjmp	.+438    	; 0x3adc <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x264>
    if(HSCAN.receiveCANMessage(message, 100)) {    
    3926:	cd 82       	std	Y+5, r12	; 0x05
    3928:	de 82       	std	Y+6, r13	; 0x06
    392a:	ef 82       	std	Y+7, r14	; 0x07
    392c:	f8 86       	std	Y+8, r15	; 0x08
    392e:	c4 01       	movw	r24, r8
    3930:	be 01       	movw	r22, r28
    3932:	60 5d       	subi	r22, 0xD0	; 208
    3934:	7f 4f       	sbci	r23, 0xFF	; 255
    3936:	ae 01       	movw	r20, r28
    3938:	4b 5f       	subi	r20, 0xFB	; 251
    393a:	5f 4f       	sbci	r21, 0xFF	; 255
    393c:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN7MCP251517receiveCANMessageER5FrameRKm>
    3940:	88 23       	and	r24, r24
    3942:	09 f4       	brne	.+2      	; 0x3946 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0xce>
    3944:	cb c0       	rjmp	.+406    	; 0x3adc <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x264>
#endif

	  // If we chose an index greater than the total
	  // mil codes, set the milIndex back to 1
	  if(milIndex > mCount) milIndex = 1;
    3946:	f8 01       	movw	r30, r16
    3948:	80 81       	ld	r24, Z
    394a:	91 81       	ldd	r25, Z+1	; 0x01
    394c:	82 30       	cpi	r24, 0x02	; 2
    394e:	91 05       	cpc	r25, r1
    3950:	14 f0       	brlt	.+4      	; 0x3956 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0xde>
    3952:	b1 82       	std	Z+1, r11	; 0x01
    3954:	a0 82       	st	Z, r10
	  
	  DebugMethods::dumpMessage(message, "MIL:");
    3956:	ce 01       	movw	r24, r28
    3958:	c0 96       	adiw	r24, 0x30	; 48
    395a:	6e e6       	ldi	r22, 0x6E	; 110
    395c:	75 e0       	ldi	r23, 0x05	; 5
    395e:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN12DebugMethods11dumpMessageERK5FramePKc>
	  if(message.data[1] == 0x43) {
    3962:	8a ad       	sts	0x6a, r24
    3964:	83 34       	cpi	r24, 0x43	; 67
    3966:	09 f0       	breq	.+2      	; 0x396a <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0xf2>
    3968:	ab c0       	rjmp	.+342    	; 0x3ac0 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x248>

		//for(int i = 0; i < mCount; i++) {
			int hexA = message.data[2 + (milIndex - 1)];
    396a:	f8 01       	movw	r30, r16
    396c:	80 81       	ld	r24, Z
    396e:	91 81       	ldd	r25, Z+1	; 0x01
    3970:	fe 01       	movw	r30, r28
    3972:	e8 0f       	add	r30, r24
    3974:	f9 1f       	adc	r31, r25
    3976:	c2 ac       	sts	0xa2, r28
    3978:	dd 24       	eor	r13, r13
			int hexB = message.data[2 + milIndex];
    397a:	03 ad       	sts	0x63, r16
    397c:	10 e0       	ldi	r17, 0x00	; 0
		   
			String milCode = ""; 
    397e:	ce 01       	movw	r24, r28
    3980:	89 96       	adiw	r24, 0x29	; 41
    3982:	63 e7       	ldi	r22, 0x73	; 115
    3984:	75 e0       	ldi	r23, 0x05	; 5
    3986:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
			switch(hexA & 0xC0)
    398a:	c6 01       	movw	r24, r12
    398c:	80 7c       	andi	r24, 0xC0	; 192
    398e:	90 70       	andi	r25, 0x00	; 0
    3990:	80 34       	cpi	r24, 0x40	; 64
    3992:	91 05       	cpc	r25, r1
    3994:	89 f0       	breq	.+34     	; 0x39b8 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x140>
    3996:	81 34       	cpi	r24, 0x41	; 65
    3998:	91 05       	cpc	r25, r1
    399a:	1c f4       	brge	.+6      	; 0x39a2 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x12a>
    399c:	00 97       	sbiw	r24, 0x00	; 0
    399e:	41 f0       	breq	.+16     	; 0x39b0 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x138>
    39a0:	18 c0       	rjmp	.+48     	; 0x39d2 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x15a>
    39a2:	80 38       	cpi	r24, 0x80	; 128
    39a4:	91 05       	cpc	r25, r1
    39a6:	61 f0       	breq	.+24     	; 0x39c0 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x148>
    39a8:	80 3c       	cpi	r24, 0xC0	; 192
    39aa:	91 05       	cpc	r25, r1
    39ac:	91 f4       	brne	.+36     	; 0x39d2 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x15a>
    39ae:	0c c0       	rjmp	.+24     	; 0x39c8 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x150>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    39b0:	ce 01       	movw	r24, r28
    39b2:	89 96       	adiw	r24, 0x29	; 41
    39b4:	60 e5       	ldi	r22, 0x50	; 80
    39b6:	0b c0       	rjmp	.+22     	; 0x39ce <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x156>
    39b8:	ce 01       	movw	r24, r28
    39ba:	89 96       	adiw	r24, 0x29	; 41
    39bc:	63 e4       	ldi	r22, 0x43	; 67
    39be:	07 c0       	rjmp	.+14     	; 0x39ce <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x156>
    39c0:	ce 01       	movw	r24, r28
    39c2:	89 96       	adiw	r24, 0x29	; 41
    39c4:	62 e4       	ldi	r22, 0x42	; 66
    39c6:	03 c0       	rjmp	.+6      	; 0x39ce <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x156>
    39c8:	ce 01       	movw	r24, r28
    39ca:	89 96       	adiw	r24, 0x29	; 41
    39cc:	65 e5       	ldi	r22, 0x55	; 85
    39ce:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <_ZN6String6concatEc>
			// second 2 bits indicate a 0
			// next 4 bits indicates 1
			// next 4 indicate 4
			// next 4 indicate 3
		  
			milCode += String((hexA & 0x30) >> 4, DEC);   // first digit is 0-3 only
    39d2:	b6 01       	movw	r22, r12
    39d4:	60 73       	andi	r22, 0x30	; 48
    39d6:	70 70       	andi	r23, 0x00	; 0
    39d8:	84 e0       	ldi	r24, 0x04	; 4
    39da:	75 95       	asr	r23
    39dc:	67 95       	ror	r22
    39de:	8a 95       	dec	r24
    39e0:	e1 f7       	brne	.-8      	; 0x39da <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x162>
    39e2:	ce 01       	movw	r24, r28
    39e4:	82 96       	adiw	r24, 0x22	; 34
    39e6:	4a e0       	ldi	r20, 0x0A	; 10
    39e8:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN6StringC1Eih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    39ec:	ce 01       	movw	r24, r28
    39ee:	89 96       	adiw	r24, 0x29	; 41
    39f0:	be 01       	movw	r22, r28
    39f2:	6e 5d       	subi	r22, 0xDE	; 222
    39f4:	7f 4f       	sbci	r23, 0xFF	; 255
    39f6:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <_ZN6String6concatERKS_>
    39fa:	ce 01       	movw	r24, r28
    39fc:	82 96       	adiw	r24, 0x22	; 34
    39fe:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
			milCode += String((hexA & 0x0F),      DEC);
    3a02:	b6 01       	movw	r22, r12
    3a04:	6f 70       	andi	r22, 0x0F	; 15
    3a06:	70 70       	andi	r23, 0x00	; 0
    3a08:	ce 01       	movw	r24, r28
    3a0a:	4b 96       	adiw	r24, 0x1b	; 27
    3a0c:	4a e0       	ldi	r20, 0x0A	; 10
    3a0e:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN6StringC1Eih>
    3a12:	ce 01       	movw	r24, r28
    3a14:	89 96       	adiw	r24, 0x29	; 41
    3a16:	be 01       	movw	r22, r28
    3a18:	65 5e       	subi	r22, 0xE5	; 229
    3a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a1c:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <_ZN6String6concatERKS_>
    3a20:	ce 01       	movw	r24, r28
    3a22:	4b 96       	adiw	r24, 0x1b	; 27
    3a24:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
			milCode += String((hexB & 0xF0) >> 4, DEC);
    3a28:	b8 01       	movw	r22, r16
    3a2a:	24 e0       	ldi	r18, 0x04	; 4
    3a2c:	76 95       	lsr	r23
    3a2e:	67 95       	ror	r22
    3a30:	2a 95       	dec	r18
    3a32:	e1 f7       	brne	.-8      	; 0x3a2c <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x1b4>
    3a34:	ce 01       	movw	r24, r28
    3a36:	44 96       	adiw	r24, 0x14	; 20
    3a38:	4a e0       	ldi	r20, 0x0A	; 10
    3a3a:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN6StringC1Eih>
    3a3e:	ce 01       	movw	r24, r28
    3a40:	89 96       	adiw	r24, 0x29	; 41
    3a42:	be 01       	movw	r22, r28
    3a44:	6c 5e       	subi	r22, 0xEC	; 236
    3a46:	7f 4f       	sbci	r23, 0xFF	; 255
    3a48:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <_ZN6String6concatERKS_>
    3a4c:	ce 01       	movw	r24, r28
    3a4e:	44 96       	adiw	r24, 0x14	; 20
    3a50:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
			milCode += String((hexB & 0x0F),      DEC);
    3a54:	b8 01       	movw	r22, r16
    3a56:	6f 70       	andi	r22, 0x0F	; 15
    3a58:	70 70       	andi	r23, 0x00	; 0
    3a5a:	ce 01       	movw	r24, r28
    3a5c:	0d 96       	adiw	r24, 0x0d	; 13
    3a5e:	4a e0       	ldi	r20, 0x0A	; 10
    3a60:	0e 94 20 27 	call	0x4e40	; 0x4e40 <_ZN6StringC1Eih>
    3a64:	ce 01       	movw	r24, r28
    3a66:	89 96       	adiw	r24, 0x29	; 41
    3a68:	be 01       	movw	r22, r28
    3a6a:	63 5f       	subi	r22, 0xF3	; 243
    3a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6e:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <_ZN6String6concatERKS_>
    3a72:	ce 01       	movw	r24, r28
    3a74:	0d 96       	adiw	r24, 0x0d	; 13
    3a76:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
			milCode.trim();
    3a7a:	ce 01       	movw	r24, r28
    3a7c:	89 96       	adiw	r24, 0x29	; 41
    3a7e:	0e 94 ef 24 	call	0x49de	; 0x49de <_ZN6String4trimEv>
		   
			// Post to screen
			if(!milCode.equals("P0000"))
    3a82:	ce 01       	movw	r24, r28
    3a84:	89 96       	adiw	r24, 0x29	; 41
    3a86:	64 e7       	ldi	r22, 0x74	; 116
    3a88:	75 e0       	ldi	r23, 0x05	; 5
    3a8a:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <_ZNK6String6equalsEPKc>
    3a8e:	88 23       	and	r24, r24
    3a90:	79 f4       	brne	.+30     	; 0x3ab0 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x238>
				LCDMethods::setLcdMessage("MIL:", milCode, MSCAN, CEL);
    3a92:	86 e0       	ldi	r24, 0x06	; 6
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	9c 83       	std	Y+4, r25	; 0x04
    3a98:	8b 83       	std	Y+3, r24	; 0x03
    3a9a:	8e e6       	ldi	r24, 0x6E	; 110
    3a9c:	95 e0       	ldi	r25, 0x05	; 5
    3a9e:	be 01       	movw	r22, r28
    3aa0:	67 5d       	subi	r22, 0xD7	; 215
    3aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa4:	a3 01       	movw	r20, r6
    3aa6:	9e 01       	movw	r18, r28
    3aa8:	2d 5f       	subi	r18, 0xFD	; 253
    3aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    3aac:	0e 94 94 1a 	call	0x3528	; 0x3528 <_ZN10LCDMethods13setLcdMessageEPKcR6StringR7MCP2515RKi>
				
		//}				
			
		RxduinoMethods::disableCAN();
    3ab0:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN14RxduinoMethods10disableCANEv>

		//for(int i = 0; i < mCount; i++) {
			int hexA = message.data[2 + (milIndex - 1)];
			int hexB = message.data[2 + milIndex];
		   
			String milCode = ""; 
    3ab4:	ce 01       	movw	r24, r28
    3ab6:	89 96       	adiw	r24, 0x29	; 41
    3ab8:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <_ZN6StringD1Ev>
				
		//}				
			
		RxduinoMethods::disableCAN();
		   		   
		return true;
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	11 c0       	rjmp	.+34     	; 0x3ae2 <_ZN10MILMethods10getMILDataER7MCP2515S1_Ri+0x26a>
      
	  } else {
		// Post to screen
		LCDMethods::setLcdMessage("MIL:", "None", MSCAN, CEL);
    3ac0:	86 e0       	ldi	r24, 0x06	; 6
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	9a 83       	std	Y+2, r25	; 0x02
    3ac6:	89 83       	std	Y+1, r24	; 0x01
    3ac8:	8e e6       	ldi	r24, 0x6E	; 110
    3aca:	95 e0       	ldi	r25, 0x05	; 5
    3acc:	6a e7       	ldi	r22, 0x7A	; 122
    3ace:	75 e0       	ldi	r23, 0x05	; 5
    3ad0:	a3 01       	movw	r20, r6
    3ad2:	9e 01       	movw	r18, r28
    3ad4:	2f 5f       	subi	r18, 0xFF	; 255
    3ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad8:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN10LCDMethods13setLcdMessageEPKcS1_R7MCP2515RKi>
	  }
#ifndef _DEBUGDATA   
    }
  }  
  
  RxduinoMethods::disableCAN();
    3adc:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN14RxduinoMethods10disableCANEv>
  return false;
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
#endif
    3ae2:	c0 5c       	subi	r28, 0xC0	; 192
    3ae4:	df 4f       	sbci	r29, 0xFF	; 255
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	f8 94       	cli
    3aea:	de bf       	out	0x3e, r29	; 62
    3aec:	0f be       	out	0x3f, r0	; 63
    3aee:	cd bf       	out	0x3d, r28	; 61
    3af0:	df 91       	pop	r29
    3af2:	cf 91       	pop	r28
    3af4:	1f 91       	pop	r17
    3af6:	0f 91       	pop	r16
    3af8:	ff 90       	pop	r15
    3afa:	ef 90       	pop	r14
    3afc:	df 90       	pop	r13
    3afe:	cf 90       	pop	r12
    3b00:	bf 90       	pop	r11
    3b02:	af 90       	pop	r10
    3b04:	9f 90       	pop	r9
    3b06:	8f 90       	pop	r8
    3b08:	7f 90       	pop	r7
    3b0a:	6f 90       	pop	r6
    3b0c:	08 95       	ret

00003b0e <_ZN14RxduinoMethods15init_Status_LEDEv>:
/**
 * Initialize the status LED
 */
void RxduinoMethods::init_Status_LED(void)
{
  pinMode(LED_2, OUTPUT); /*Status LED*/
    3b0e:	88 e0       	ldi	r24, 0x08	; 8
    3b10:	61 e0       	ldi	r22, 0x01	; 1
    3b12:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <pinMode>
  pinMode(LED_3, OUTPUT); /*communication LED*/
    3b16:	87 e0       	ldi	r24, 0x07	; 7
    3b18:	61 e0       	ldi	r22, 0x01	; 1
    3b1a:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <pinMode>
  digitalWrite(LED_2,HIGH);
    3b1e:	88 e0       	ldi	r24, 0x08	; 8
    3b20:	61 e0       	ldi	r22, 0x01	; 1
    3b22:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
}
    3b26:	08 95       	ret

00003b28 <_ZN14RxduinoMethods11enableHSCANEv>:
/** 
 * Enable the HSCAN by setting the MSCAN pin
 * low and the MSCAN high
 */
void RxduinoMethods::enableHSCAN() {
  digitalWrite(MSCANCS, HIGH);
    3b28:	89 e0       	ldi	r24, 0x09	; 9
    3b2a:	61 e0       	ldi	r22, 0x01	; 1
    3b2c:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  digitalWrite(HSCANCS, LOW); 
    3b30:	8a e0       	ldi	r24, 0x0A	; 10
    3b32:	60 e0       	ldi	r22, 0x00	; 0
    3b34:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
}
    3b38:	08 95       	ret

00003b3a <_ZN14RxduinoMethods11enableMSCANEv>:
/**
 * Enable the MSCAN by setting the HSCAN pin
 * low and the HSCAN high
 */
void RxduinoMethods::enableMSCAN() {
  digitalWrite(HSCANCS, HIGH);
    3b3a:	8a e0       	ldi	r24, 0x0A	; 10
    3b3c:	61 e0       	ldi	r22, 0x01	; 1
    3b3e:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  digitalWrite(MSCANCS, LOW); 
    3b42:	89 e0       	ldi	r24, 0x09	; 9
    3b44:	60 e0       	ldi	r22, 0x00	; 0
    3b46:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
}
    3b4a:	08 95       	ret

00003b4c <_ZN14RxduinoMethods10disableCANEv>:
/**
 * Disable all CAN devices by setting their
 * pins high
 */
void RxduinoMethods::disableCAN() {
  digitalWrite(HSCANCS, HIGH);
    3b4c:	8a e0       	ldi	r24, 0x0A	; 10
    3b4e:	61 e0       	ldi	r22, 0x01	; 1
    3b50:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  digitalWrite(MSCANCS, HIGH); 
    3b54:	89 e0       	ldi	r24, 0x09	; 9
    3b56:	61 e0       	ldi	r22, 0x01	; 1
    3b58:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
    3b5c:	08 95       	ret

00003b5e <_ZN14RxduinoMethods8init_SPIEv>:
 * Initialize the SPI pins for both CAN busses
 */
void RxduinoMethods::init_SPI(void)
{
  // Begin the SPI module
  SPI.setClockDivider(SPI_CLOCK_DIV2);   // setClockDivider divide by 2 since MCP2515 runs its SPI at 10Mhz.
    3b5e:	84 e0       	ldi	r24, 0x04	; 4
    3b60:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <_ZN8SPIClass15setClockDividerEh>
  SPI.setDataMode(SPI_MODE0);            // DataMode 0 (0,0) or 3 (1,1) are the only ones to use with the MCP2515
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	0e 94 67 1f 	call	0x3ece	; 0x3ece <_ZN8SPIClass11setDataModeEh>
  SPI.setBitOrder(MSBFIRST);             // MSB as used by the MCP2515
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <_ZN8SPIClass11setBitOrderEh>
  SPI.begin();
    3b70:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <_ZN8SPIClass5beginEv>
  
  pinMode(HSCANCS,OUTPUT);				 // Initialize the CAN bus card SPI CS Pin
    3b74:	8a e0       	ldi	r24, 0x0A	; 10
    3b76:	61 e0       	ldi	r22, 0x01	; 1
    3b78:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <pinMode>
  digitalWrite(HSCANCS, HIGH);
    3b7c:	8a e0       	ldi	r24, 0x0A	; 10
    3b7e:	61 e0       	ldi	r22, 0x01	; 1
    3b80:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  pinMode(MSCANCS,OUTPUT);
    3b84:	89 e0       	ldi	r24, 0x09	; 9
    3b86:	61 e0       	ldi	r22, 0x01	; 1
    3b88:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <pinMode>
  digitalWrite(MSCANCS, HIGH);
    3b8c:	89 e0       	ldi	r24, 0x09	; 9
    3b8e:	61 e0       	ldi	r22, 0x01	; 1
    3b90:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>
  
  disableCAN();
    3b94:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <_ZN14RxduinoMethods10disableCANEv>
}  
    3b98:	08 95       	ret

00003b9a <_ZN14RxduinoMethods8init_allEv>:
/**
 * Initialize all hardware devices.
 */
void RxduinoMethods::init_all(void)
{	 	
  init_SPI();
    3b9a:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <_ZN14RxduinoMethods8init_SPIEv>
  init_Status_LED();
    3b9e:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_ZN14RxduinoMethods15init_Status_LEDEv>
  
  // Turn off adc
  cbi(ADCSRA,ADEN);
    3ba2:	ea e7       	ldi	r30, 0x7A	; 122
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	80 81       	ld	r24, Z
    3ba8:	8f 77       	andi	r24, 0x7F	; 127
    3baa:	80 83       	st	Z, r24
}
    3bac:	08 95       	ret

00003bae <_ZN11TPMSMethods10getTPMDataERKiRKjS3_R5FrameR7MCP2515>:
 * @param lsb     The least signigicant bits
 * @param message The CAN message object
 * @param HSCAN	  Pointer to the HSCAN object
 * @return        True if valid data is returned
 */
boolean TPMSMethods::getTPMData(const int& number, const unsigned int& msb, const unsigned int& lsb, Frame& message, MCP2515& HSCAN) {
    3bae:	ef 92       	push	r14
    3bb0:	ff 92       	push	r15
    3bb2:	0f 93       	push	r16
    3bb4:	1f 93       	push	r17
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	00 d0       	rcall	.+0      	; 0x3bbc <_ZN11TPMSMethods10getTPMDataERKiRKjS3_R5FrameR7MCP2515+0xe>
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	79 01       	movw	r14, r18
  message.adrsValue = TPM_REQUEST;
    3bc2:	81 e5       	ldi	r24, 0x51	; 81
    3bc4:	97 e0       	ldi	r25, 0x07	; 7
    3bc6:	f9 01       	movw	r30, r18
    3bc8:	91 83       	std	Z+1, r25	; 0x01
    3bca:	80 83       	st	Z, r24
  message.isExtendedAdrs = false;
    3bcc:	12 82       	std	Z+2, r1	; 0x02
  message.rtr = false;
    3bce:	17 82       	std	Z+7, r1	; 0x07
  message.dataLength = 8;
    3bd0:	88 e0       	ldi	r24, 0x08	; 8
    3bd2:	80 87       	std	Z+8, r24	; 0x08
  message.data[0] = 3;
    3bd4:	83 e0       	ldi	r24, 0x03	; 3
    3bd6:	81 87       	std	Z+9, r24	; 0x09
  message.data[1] = 0x22;
    3bd8:	82 e2       	ldi	r24, 0x22	; 34
    3bda:	82 87       	std	Z+10, r24	; 0x0a
  message.data[2] = msb;
    3bdc:	fb 01       	movw	r30, r22
    3bde:	80 81       	ld	r24, Z
    3be0:	f9 01       	movw	r30, r18
    3be2:	83 87       	std	Z+11, r24	; 0x0b
  message.data[3] = lsb;
    3be4:	fa 01       	movw	r30, r20
    3be6:	80 81       	ld	r24, Z
    3be8:	f9 01       	movw	r30, r18
    3bea:	84 87       	std	Z+12, r24	; 0x0c
  for(int i = 4; i < 8; i++) {
    message.data[i] = 0x00;
    3bec:	15 86       	std	Z+13, r1	; 0x0d
    3bee:	16 86       	std	Z+14, r1	; 0x0e
    3bf0:	17 86       	std	Z+15, r1	; 0x0f
    3bf2:	10 8a       	std	Z+16, r1	; 0x10
  } 
  
  RxduinoMethods::enableHSCAN();
    3bf4:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <_ZN14RxduinoMethods11enableHSCANEv>
  return HSCAN.queryOBDExtended(TPM_REPLY, message);
    3bf8:	89 e5       	ldi	r24, 0x59	; 89
    3bfa:	97 e0       	ldi	r25, 0x07	; 7
    3bfc:	9a 83       	std	Y+2, r25	; 0x02
    3bfe:	89 83       	std	Y+1, r24	; 0x01
    3c00:	c8 01       	movw	r24, r16
    3c02:	be 01       	movw	r22, r28
    3c04:	6f 5f       	subi	r22, 0xFF	; 255
    3c06:	7f 4f       	sbci	r23, 0xFF	; 255
    3c08:	a7 01       	movw	r20, r14
    3c0a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_ZN7MCP251516queryOBDExtendedERKjR5Frame>
    3c0e:	91 e0       	ldi	r25, 0x01	; 1
    3c10:	88 23       	and	r24, r24
    3c12:	09 f4       	brne	.+2      	; 0x3c16 <_ZN11TPMSMethods10getTPMDataERKiRKjS3_R5FrameR7MCP2515+0x68>
    3c14:	90 e0       	ldi	r25, 0x00	; 0
  RxduinoMethods::disableCAN();
}
    3c16:	89 2f       	mov	r24, r25
    3c18:	0f 90       	pop	r0
    3c1a:	0f 90       	pop	r0
    3c1c:	df 91       	pop	r29
    3c1e:	cf 91       	pop	r28
    3c20:	1f 91       	pop	r17
    3c22:	0f 91       	pop	r16
    3c24:	ff 90       	pop	r15
    3c26:	ef 90       	pop	r14
    3c28:	08 95       	ret

00003c2a <_ZN11TPMSMethods12getWheelTempERKiS1_R7MCP2515S3_>:
 * @param number  The wheel number to query
 * @param currentMode	The current display mode
 * @param MSCAN			Pointer to the MSCAN object
 * @param HSCAN			Pointer to the HSCAN object
 */
void TPMSMethods::getWheelTemp(const int& number, const int& currentMode, MCP2515& MSCAN, MCP2515& HSCAN) {
    3c2a:	8f 92       	push	r8
    3c2c:	9f 92       	push	r9
    3c2e:	af 92       	push	r10
    3c30:	bf 92       	push	r11
    3c32:	cf 92       	push	r12
    3c34:	df 92       	push	r13
    3c36:	ef 92       	push	r14
    3c38:	ff 92       	push	r15
    3c3a:	0f 93       	push	r16
    3c3c:	1f 93       	push	r17
    3c3e:	cf 93       	push	r28
    3c40:	df 93       	push	r29
    3c42:	cd b7       	in	r28, 0x3d	; 61
    3c44:	de b7       	in	r29, 0x3e	; 62
    3c46:	a3 97       	sbiw	r28, 0x23	; 35
    3c48:	0f b6       	in	r0, 0x3f	; 63
    3c4a:	f8 94       	cli
    3c4c:	de bf       	out	0x3e, r29	; 62
    3c4e:	0f be       	out	0x3f, r0	; 63
    3c50:	cd bf       	out	0x3d, r28	; 61
    3c52:	7c 01       	movw	r14, r24
    3c54:	4b 01       	movw	r8, r22
    3c56:	5a 01       	movw	r10, r20
    3c58:	89 01       	movw	r16, r18
  Frame message;
  if(getTPMData(number, 0xC9, 0x02, message, HSCAN)) {
    3c5a:	89 ec       	ldi	r24, 0xC9	; 201
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	9c 83       	std	Y+4, r25	; 0x04
    3c60:	8b 83       	std	Y+3, r24	; 0x03
    3c62:	82 e0       	ldi	r24, 0x02	; 2
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	9a 83       	std	Y+2, r25	; 0x02
    3c68:	89 83       	std	Y+1, r24	; 0x01
    3c6a:	c7 01       	movw	r24, r14
    3c6c:	be 01       	movw	r22, r28
    3c6e:	6d 5f       	subi	r22, 0xFD	; 253
    3c70:	7f 4f       	sbci	r23, 0xFF	; 255
    3c72:	ae 01       	movw	r20, r28
    3c74:	4f 5f       	subi	r20, 0xFF	; 255
    3c76:	5f 4f       	sbci	r21, 0xFF	; 255
    3c78:	9e 01       	movw	r18, r28
    3c7a:	2d 5e       	subi	r18, 0xED	; 237
    3c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c7e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_ZN11TPMSMethods10getTPMDataERKiRKjS3_R5FrameR7MCP2515>
    3c82:	88 23       	and	r24, r24
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <_ZN11TPMSMethods12getWheelTempERKiS1_R7MCP2515S3_+0x5e>
    3c86:	47 c0       	rjmp	.+142    	; 0x3d16 <_ZN11TPMSMethods12getWheelTempERKiS1_R7MCP2515S3_+0xec>
    char s1buff[SCREEN1MAX];
    char s2buff[SCREEN2MAX];
    int respData = ((9/5) * (message.data[3 + number] - 50)) + 32;
    3c88:	d7 01       	movw	r26, r14
    3c8a:	8d 91       	ld	r24, X+
    3c8c:	9c 91       	ld	r25, X
    3c8e:	fe 01       	movw	r30, r28
    3c90:	e8 0f       	add	r30, r24
    3c92:	f9 1f       	adc	r31, r25
    3c94:	e7 8c       	ldd	r14, Z+31	; 0x1f
    3c96:	ff 24       	eor	r15, r15
    3c98:	ee ee       	ldi	r30, 0xEE	; 238
    3c9a:	ff ef       	ldi	r31, 0xFF	; 255
    3c9c:	ee 0e       	add	r14, r30
    3c9e:	ff 1e       	adc	r15, r31
    sprintf(s1buff, "Tire%d:", number);
    3ca0:	00 d0       	rcall	.+0      	; 0x3ca2 <_ZN11TPMSMethods12getWheelTempERKiS1_R7MCP2515S3_+0x78>
    3ca2:	00 d0       	rcall	.+0      	; 0x3ca4 <_ZN11TPMSMethods12getWheelTempERKiS1_R7MCP2515S3_+0x7a>
    3ca4:	00 d0       	rcall	.+0      	; 0x3ca6 <_ZN11TPMSMethods12getWheelTempERKiS1_R7MCP2515S3_+0x7c>
    3ca6:	ed b7       	in	r30, 0x3d	; 61
    3ca8:	fe b7       	in	r31, 0x3e	; 62
    3caa:	31 96       	adiw	r30, 0x01	; 1
    3cac:	2b e0       	ldi	r18, 0x0B	; 11
    3cae:	c2 2e       	mov	r12, r18
    3cb0:	d1 2c       	mov	r13, r1
    3cb2:	cc 0e       	add	r12, r28
    3cb4:	dd 1e       	adc	r13, r29
    3cb6:	ad b7       	in	r26, 0x3d	; 61
    3cb8:	be b7       	in	r27, 0x3e	; 62
    3cba:	12 96       	adiw	r26, 0x02	; 2
    3cbc:	dc 92       	st	X, r13
    3cbe:	ce 92       	st	-X, r12
    3cc0:	11 97       	sbiw	r26, 0x01	; 1
    3cc2:	2f e7       	ldi	r18, 0x7F	; 127
    3cc4:	35 e0       	ldi	r19, 0x05	; 5
    3cc6:	33 83       	std	Z+3, r19	; 0x03
    3cc8:	22 83       	std	Z+2, r18	; 0x02
    3cca:	95 83       	std	Z+5, r25	; 0x05
    3ccc:	84 83       	std	Z+4, r24	; 0x04
    3cce:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <sprintf>
    sprintf(s2buff, "%d*F", respData);
    3cd2:	ed b7       	in	r30, 0x3d	; 61
    3cd4:	fe b7       	in	r31, 0x3e	; 62
    3cd6:	31 96       	adiw	r30, 0x01	; 1
    3cd8:	8e 01       	movw	r16, r28
    3cda:	0b 5f       	subi	r16, 0xFB	; 251
    3cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cde:	ad b7       	in	r26, 0x3d	; 61
    3ce0:	be b7       	in	r27, 0x3e	; 62
    3ce2:	12 96       	adiw	r26, 0x02	; 2
    3ce4:	1c 93       	st	X, r17
    3ce6:	0e 93       	st	-X, r16
    3ce8:	11 97       	sbiw	r26, 0x01	; 1
    3cea:	87 e8       	ldi	r24, 0x87	; 135
    3cec:	95 e0       	ldi	r25, 0x05	; 5
    3cee:	93 83       	std	Z+3, r25	; 0x03
    3cf0:	82 83       	std	Z+2, r24	; 0x02
    3cf2:	f5 82       	std	Z+5, r15	; 0x05
    3cf4:	e4 82       	std	Z+4, r14	; 0x04
    3cf6:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <sprintf>
    LCDMethods::setLcdMessage(s1buff, s2buff, MSCAN, currentMode);  
    3cfa:	ed b7       	in	r30, 0x3d	; 61
    3cfc:	fe b7       	in	r31, 0x3e	; 62
    3cfe:	36 96       	adiw	r30, 0x06	; 6
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	fe bf       	out	0x3e, r31	; 62
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	ed bf       	out	0x3d, r30	; 61
    3d0a:	c6 01       	movw	r24, r12
    3d0c:	b8 01       	movw	r22, r16
    3d0e:	a5 01       	movw	r20, r10
    3d10:	94 01       	movw	r18, r8
    3d12:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN10LCDMethods13setLcdMessageEPKcS1_R7MCP2515RKi>
  }
}
    3d16:	a3 96       	adiw	r28, 0x23	; 35
    3d18:	0f b6       	in	r0, 0x3f	; 63
    3d1a:	f8 94       	cli
    3d1c:	de bf       	out	0x3e, r29	; 62
    3d1e:	0f be       	out	0x3f, r0	; 63
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	df 91       	pop	r29
    3d24:	cf 91       	pop	r28
    3d26:	1f 91       	pop	r17
    3d28:	0f 91       	pop	r16
    3d2a:	ff 90       	pop	r15
    3d2c:	ef 90       	pop	r14
    3d2e:	df 90       	pop	r13
    3d30:	cf 90       	pop	r12
    3d32:	bf 90       	pop	r11
    3d34:	af 90       	pop	r10
    3d36:	9f 90       	pop	r9
    3d38:	8f 90       	pop	r8
    3d3a:	08 95       	ret

00003d3c <_ZN11TPMSMethods11getWheelPSIERKiS1_R7MCP2515S3_>:
 * @param number		The wheel number to query
 * @param currentMode	The current display mode
 * @param MSCAN			Pointer to the MSCAN object
 * @param HSCAN			Pointer to the HSCAN object
 */
void TPMSMethods::getWheelPSI(const int& number, const int& currentMode, MCP2515& MSCAN, MCP2515& HSCAN) {
    3d3c:	6f 92       	push	r6
    3d3e:	7f 92       	push	r7
    3d40:	8f 92       	push	r8
    3d42:	9f 92       	push	r9
    3d44:	af 92       	push	r10
    3d46:	bf 92       	push	r11
    3d48:	cf 92       	push	r12
    3d4a:	df 92       	push	r13
    3d4c:	ef 92       	push	r14
    3d4e:	ff 92       	push	r15
    3d50:	0f 93       	push	r16
    3d52:	1f 93       	push	r17
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
    3d5c:	a3 97       	sbiw	r28, 0x23	; 35
    3d5e:	0f b6       	in	r0, 0x3f	; 63
    3d60:	f8 94       	cli
    3d62:	de bf       	out	0x3e, r29	; 62
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	cd bf       	out	0x3d, r28	; 61
    3d68:	7c 01       	movw	r14, r24
    3d6a:	3b 01       	movw	r6, r22
    3d6c:	6a 01       	movw	r12, r20
    3d6e:	89 01       	movw	r16, r18
  Frame message;
  if(getTPMData(number, 0xC9, 0x01, message, HSCAN)) {   
    3d70:	89 ec       	ldi	r24, 0xC9	; 201
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	9c 83       	std	Y+4, r25	; 0x04
    3d76:	8b 83       	std	Y+3, r24	; 0x03
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	9a 83       	std	Y+2, r25	; 0x02
    3d7e:	89 83       	std	Y+1, r24	; 0x01
    3d80:	c7 01       	movw	r24, r14
    3d82:	be 01       	movw	r22, r28
    3d84:	6d 5f       	subi	r22, 0xFD	; 253
    3d86:	7f 4f       	sbci	r23, 0xFF	; 255
    3d88:	ae 01       	movw	r20, r28
    3d8a:	4f 5f       	subi	r20, 0xFF	; 255
    3d8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d8e:	9e 01       	movw	r18, r28
    3d90:	2d 5e       	subi	r18, 0xED	; 237
    3d92:	3f 4f       	sbci	r19, 0xFF	; 255
    3d94:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_ZN11TPMSMethods10getTPMDataERKiRKjS3_R5FrameR7MCP2515>
    3d98:	88 23       	and	r24, r24
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <_ZN11TPMSMethods11getWheelPSIERKiS1_R7MCP2515S3_+0x62>
    3d9c:	5f c0       	rjmp	.+190    	; 0x3e5c <_ZN11TPMSMethods11getWheelPSIERKiS1_R7MCP2515S3_+0x120>
    char s1buff[SCREEN1MAX];
    char s2buff[SCREEN2MAX];
    int respData = (( message.data[3 + number] * 1373.) / 1000.) * 0.145037738;
    3d9e:	d7 01       	movw	r26, r14
    3da0:	0d 91       	ld	r16, X+
    3da2:	1c 91       	ld	r17, X
    3da4:	fe 01       	movw	r30, r28
    3da6:	e0 0f       	add	r30, r16
    3da8:	f1 1f       	adc	r31, r17
    3daa:	67 8d       	ldd	r22, Z+31	; 0x1f
    3dac:	70 e0       	ldi	r23, 0x00	; 0
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	0e 94 72 29 	call	0x52e4	; 0x52e4 <__floatsisf>
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	30 ea       	ldi	r19, 0xA0	; 160
    3dba:	4b ea       	ldi	r20, 0xAB	; 171
    3dbc:	54 e4       	ldi	r21, 0x44	; 68
    3dbe:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	4a e7       	ldi	r20, 0x7A	; 122
    3dc8:	54 e4       	ldi	r21, 0x44	; 68
    3dca:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__divsf3>
    3dce:	26 ec       	ldi	r18, 0xC6	; 198
    3dd0:	34 e8       	ldi	r19, 0x84	; 132
    3dd2:	44 e1       	ldi	r20, 0x14	; 20
    3dd4:	5e e3       	ldi	r21, 0x3E	; 62
    3dd6:	0e 94 26 2a 	call	0x544c	; 0x544c <__mulsf3>
    3dda:	0e 94 3f 29 	call	0x527e	; 0x527e <__fixsfsi>
    3dde:	4b 01       	movw	r8, r22
    3de0:	5c 01       	movw	r10, r24
    sprintf(s1buff, "Tire%d:", number);
    3de2:	00 d0       	rcall	.+0      	; 0x3de4 <_ZN11TPMSMethods11getWheelPSIERKiS1_R7MCP2515S3_+0xa8>
    3de4:	00 d0       	rcall	.+0      	; 0x3de6 <_ZN11TPMSMethods11getWheelPSIERKiS1_R7MCP2515S3_+0xaa>
    3de6:	00 d0       	rcall	.+0      	; 0x3de8 <_ZN11TPMSMethods11getWheelPSIERKiS1_R7MCP2515S3_+0xac>
    3de8:	ed b7       	in	r30, 0x3d	; 61
    3dea:	fe b7       	in	r31, 0x3e	; 62
    3dec:	31 96       	adiw	r30, 0x01	; 1
    3dee:	0f 2e       	mov	r0, r31
    3df0:	fb e0       	ldi	r31, 0x0B	; 11
    3df2:	ef 2e       	mov	r14, r31
    3df4:	ff 24       	eor	r15, r15
    3df6:	f0 2d       	mov	r31, r0
    3df8:	ec 0e       	add	r14, r28
    3dfa:	fd 1e       	adc	r15, r29
    3dfc:	ad b7       	in	r26, 0x3d	; 61
    3dfe:	be b7       	in	r27, 0x3e	; 62
    3e00:	12 96       	adiw	r26, 0x02	; 2
    3e02:	fc 92       	st	X, r15
    3e04:	ee 92       	st	-X, r14
    3e06:	11 97       	sbiw	r26, 0x01	; 1
    3e08:	8f e7       	ldi	r24, 0x7F	; 127
    3e0a:	95 e0       	ldi	r25, 0x05	; 5
    3e0c:	93 83       	std	Z+3, r25	; 0x03
    3e0e:	82 83       	std	Z+2, r24	; 0x02
    3e10:	15 83       	std	Z+5, r17	; 0x05
    3e12:	04 83       	std	Z+4, r16	; 0x04
    3e14:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <sprintf>
    sprintf(s2buff, "%d", respData);
    3e18:	ed b7       	in	r30, 0x3d	; 61
    3e1a:	fe b7       	in	r31, 0x3e	; 62
    3e1c:	31 96       	adiw	r30, 0x01	; 1
    3e1e:	8e 01       	movw	r16, r28
    3e20:	0b 5f       	subi	r16, 0xFB	; 251
    3e22:	1f 4f       	sbci	r17, 0xFF	; 255
    3e24:	ad b7       	in	r26, 0x3d	; 61
    3e26:	be b7       	in	r27, 0x3e	; 62
    3e28:	12 96       	adiw	r26, 0x02	; 2
    3e2a:	1c 93       	st	X, r17
    3e2c:	0e 93       	st	-X, r16
    3e2e:	11 97       	sbiw	r26, 0x01	; 1
    3e30:	8c e8       	ldi	r24, 0x8C	; 140
    3e32:	95 e0       	ldi	r25, 0x05	; 5
    3e34:	93 83       	std	Z+3, r25	; 0x03
    3e36:	82 83       	std	Z+2, r24	; 0x02
    3e38:	95 82       	std	Z+5, r9	; 0x05
    3e3a:	84 82       	std	Z+4, r8	; 0x04
    3e3c:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <sprintf>
    LCDMethods::setLcdMessage(s1buff, s2buff, MSCAN, currentMode);  
    3e40:	ed b7       	in	r30, 0x3d	; 61
    3e42:	fe b7       	in	r31, 0x3e	; 62
    3e44:	36 96       	adiw	r30, 0x06	; 6
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	fe bf       	out	0x3e, r31	; 62
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	ed bf       	out	0x3d, r30	; 61
    3e50:	c7 01       	movw	r24, r14
    3e52:	b8 01       	movw	r22, r16
    3e54:	a6 01       	movw	r20, r12
    3e56:	93 01       	movw	r18, r6
    3e58:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN10LCDMethods13setLcdMessageEPKcS1_R7MCP2515RKi>
  }
}
    3e5c:	a3 96       	adiw	r28, 0x23	; 35
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	f8 94       	cli
    3e62:	de bf       	out	0x3e, r29	; 62
    3e64:	0f be       	out	0x3f, r0	; 63
    3e66:	cd bf       	out	0x3d, r28	; 61
    3e68:	df 91       	pop	r29
    3e6a:	cf 91       	pop	r28
    3e6c:	1f 91       	pop	r17
    3e6e:	0f 91       	pop	r16
    3e70:	ff 90       	pop	r15
    3e72:	ef 90       	pop	r14
    3e74:	df 90       	pop	r13
    3e76:	cf 90       	pop	r12
    3e78:	bf 90       	pop	r11
    3e7a:	af 90       	pop	r10
    3e7c:	9f 90       	pop	r9
    3e7e:	8f 90       	pop	r8
    3e80:	7f 90       	pop	r7
    3e82:	6f 90       	pop	r6
    3e84:	08 95       	ret

00003e86 <_ZN8SPIClass5beginEv>:
SPIClass SPI;

void SPIClass::begin() {

  // Set SS to high so a connected chip will be "deselected" by default
  digitalWrite(SS, HIGH);
    3e86:	8a e0       	ldi	r24, 0x0A	; 10
    3e88:	61 e0       	ldi	r22, 0x01	; 1
    3e8a:	0e 94 1a 28 	call	0x5034	; 0x5034 <digitalWrite>

  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).
  pinMode(SS, OUTPUT);
    3e8e:	8a e0       	ldi	r24, 0x0A	; 10
    3e90:	61 e0       	ldi	r22, 0x01	; 1
    3e92:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <pinMode>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI
  // automatically switches to Slave, so the data direction of
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    3e96:	8c b5       	in	r24, 0x2c	; 44
    3e98:	80 61       	ori	r24, 0x10	; 16
    3e9a:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
    3e9c:	8c b5       	in	r24, 0x2c	; 44
    3e9e:	80 64       	ori	r24, 0x40	; 64
    3ea0:	8c bd       	out	0x2c, r24	; 44
  // MISO pin automatically overrides to INPUT.
  // By doing this AFTER enabling SPI, we avoid accidentally
  // clocking in a single bit since the lines go directly
  // from "input" to SPI control.  
  // http://code.google.com/p/arduino/issues/detail?id=888
  pinMode(SCK, OUTPUT);
    3ea2:	8d e0       	ldi	r24, 0x0D	; 13
    3ea4:	61 e0       	ldi	r22, 0x01	; 1
    3ea6:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <pinMode>
  pinMode(MOSI, OUTPUT);
    3eaa:	8b e0       	ldi	r24, 0x0B	; 11
    3eac:	61 e0       	ldi	r22, 0x01	; 1
    3eae:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <pinMode>
}
    3eb2:	08 95       	ret

00003eb4 <_ZN8SPIClass3endEv>:


void SPIClass::end() {
  SPCR &= ~_BV(SPE);
    3eb4:	8c b5       	in	r24, 0x2c	; 44
    3eb6:	8f 7b       	andi	r24, 0xBF	; 191
    3eb8:	8c bd       	out	0x2c, r24	; 44
}
    3eba:	08 95       	ret

00003ebc <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    3ebc:	88 23       	and	r24, r24
    3ebe:	19 f4       	brne	.+6      	; 0x3ec6 <_ZN8SPIClass11setBitOrderEh+0xa>
    SPCR |= _BV(DORD);
    3ec0:	8c b5       	in	r24, 0x2c	; 44
    3ec2:	80 62       	ori	r24, 0x20	; 32
    3ec4:	02 c0       	rjmp	.+4      	; 0x3eca <_ZN8SPIClass11setBitOrderEh+0xe>
  } else {
    SPCR &= ~(_BV(DORD));
    3ec6:	8c b5       	in	r24, 0x2c	; 44
    3ec8:	8f 7d       	andi	r24, 0xDF	; 223
    3eca:	8c bd       	out	0x2c, r24	; 44
    3ecc:	08 95       	ret

00003ece <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    3ece:	9c b5       	in	r25, 0x2c	; 44
    3ed0:	93 7f       	andi	r25, 0xF3	; 243
    3ed2:	98 2b       	or	r25, r24
    3ed4:	9c bd       	out	0x2c, r25	; 44
}
    3ed6:	08 95       	ret

00003ed8 <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    3ed8:	2c b5       	in	r18, 0x2c	; 44
    3eda:	98 2f       	mov	r25, r24
    3edc:	93 70       	andi	r25, 0x03	; 3
    3ede:	2c 7f       	andi	r18, 0xFC	; 252
    3ee0:	92 2b       	or	r25, r18
    3ee2:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    3ee4:	2d b5       	in	r18, 0x2d	; 45
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	95 95       	asr	r25
    3eea:	87 95       	ror	r24
    3eec:	95 95       	asr	r25
    3eee:	87 95       	ror	r24
    3ef0:	81 70       	andi	r24, 0x01	; 1
    3ef2:	2e 7f       	andi	r18, 0xFE	; 254
    3ef4:	82 2b       	or	r24, r18
    3ef6:	8d bd       	out	0x2d, r24	; 45
}
    3ef8:	08 95       	ret

00003efa <_ZN10CANMethods20prepareCommonMessageERKjR5Frame>:
 * CAN message being sent
 *
 * @param  request  The CAN pid that we are requesting
 * @param  message  The message object to prepare
 */
void CANMethods::prepareCommonMessage(const unsigned int& request, Frame& message) {
    3efa:	fb 01       	movw	r30, r22
  message.adrsValue = request;
    3efc:	dc 01       	movw	r26, r24
    3efe:	8d 91       	ld	r24, X+
    3f00:	9c 91       	ld	r25, X
    3f02:	11 97       	sbiw	r26, 0x01	; 1
    3f04:	91 83       	std	Z+1, r25	; 0x01
    3f06:	80 83       	st	Z, r24
  message.rtr = false;
    3f08:	17 82       	std	Z+7, r1	; 0x07
  message.dataLength = 8;
    3f0a:	88 e0       	ldi	r24, 0x08	; 8
    3f0c:	80 87       	std	Z+8, r24	; 0x08
  message.isExtendedAdrs = false;
    3f0e:	12 82       	std	Z+2, r1	; 0x02
}
    3f10:	08 95       	ret

00003f12 <_ZN10CANMethods19prepareHSCANMessageERKhR5Frame>:
 * pid to the ECU pid request address
 *
 * @param pid      The pid to request
 * @param message  The CAN message to prepare
 */
void CANMethods::prepareHSCANMessage(const unsigned char& pid, Frame& message) {
    3f12:	fb 01       	movw	r30, r22
 *
 * @param  request  The CAN pid that we are requesting
 * @param  message  The message object to prepare
 */
void CANMethods::prepareCommonMessage(const unsigned int& request, Frame& message) {
  message.adrsValue = request;
    3f14:	2f ed       	ldi	r18, 0xDF	; 223
    3f16:	37 e0       	ldi	r19, 0x07	; 7
    3f18:	31 83       	std	Z+1, r19	; 0x01
    3f1a:	20 83       	st	Z, r18
  message.rtr = false;
    3f1c:	17 82       	std	Z+7, r1	; 0x07
  message.dataLength = 8;
    3f1e:	28 e0       	ldi	r18, 0x08	; 8
    3f20:	20 87       	std	Z+8, r18	; 0x08
  message.isExtendedAdrs = false;
    3f22:	12 82       	std	Z+2, r1	; 0x02
 * @param message  The CAN message to prepare
 */
void CANMethods::prepareHSCANMessage(const unsigned char& pid, Frame& message) {
  // Prepare message
  prepareCommonMessage(PID_REQUEST, message);
  message.data[0] = 0x02;
    3f24:	22 e0       	ldi	r18, 0x02	; 2
    3f26:	21 87       	std	Z+9, r18	; 0x09
  message.data[1] = 0x01;
    3f28:	21 e0       	ldi	r18, 0x01	; 1
    3f2a:	22 87       	std	Z+10, r18	; 0x0a
  message.data[2] = pid;
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	8c 91       	ld	r24, X
    3f30:	83 87       	std	Z+11, r24	; 0x0b
  for(int i = 3; i <= 7; i++)
    message.data[i] = 0x00;
    3f32:	14 86       	std	Z+12, r1	; 0x0c
    3f34:	15 86       	std	Z+13, r1	; 0x0d
    3f36:	16 86       	std	Z+14, r1	; 0x0e
    3f38:	17 86       	std	Z+15, r1	; 0x0f
    3f3a:	10 8a       	std	Z+16, r1	; 0x10
}
    3f3c:	08 95       	ret

00003f3e <_ZN10CANMethods19initLcdForMessagingER5Frame>:
 * Prepare an engine LCD message by sending an empty
 * CAN message to the LCD address
 *
 * @param message  The CAN message to prepare
 */
void CANMethods::initLcdForMessaging(Frame& message) {
    3f3e:	fc 01       	movw	r30, r24
 *
 * @param  request  The CAN pid that we are requesting
 * @param  message  The message object to prepare
 */
void CANMethods::prepareCommonMessage(const unsigned int& request, Frame& message) {
  message.adrsValue = request;
    3f40:	8f e8       	ldi	r24, 0x8F	; 143
    3f42:	92 e0       	ldi	r25, 0x02	; 2
    3f44:	91 83       	std	Z+1, r25	; 0x01
    3f46:	80 83       	st	Z, r24
  message.rtr = false;
    3f48:	17 82       	std	Z+7, r1	; 0x07
  message.dataLength = 8;
    3f4a:	88 e0       	ldi	r24, 0x08	; 8
    3f4c:	80 87       	std	Z+8, r24	; 0x08
  message.isExtendedAdrs = false;
    3f4e:	12 82       	std	Z+2, r1	; 0x02
 */
void CANMethods::initLcdForMessaging(Frame& message) {
  // Prepare message
  prepareCommonMessage(LCD_REQUEST, message);
  for (int i = 0; i <= 7; i++)
    message.data[i] = 0x00; 
    3f50:	11 86       	std	Z+9, r1	; 0x09
    3f52:	12 86       	std	Z+10, r1	; 0x0a
    3f54:	13 86       	std	Z+11, r1	; 0x0b
    3f56:	14 86       	std	Z+12, r1	; 0x0c
    3f58:	15 86       	std	Z+13, r1	; 0x0d
    3f5a:	16 86       	std	Z+14, r1	; 0x0e
    3f5c:	17 86       	std	Z+15, r1	; 0x0f
    3f5e:	10 8a       	std	Z+16, r1	; 0x10
}
    3f60:	08 95       	ret

00003f62 <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc>:
 *
 * @param message  The CAN message to prepare
 * @param screen   The screen to print to
 * @param data     The data to print out
 */
void CANMethods::prepareMSCANMessage(Frame& message, const int& screen, const char* data) {
    3f62:	1f 93       	push	r17
    3f64:	cf 93       	push	r28
    3f66:	df 93       	push	r29
    3f68:	dc 01       	movw	r26, r24
    3f6a:	eb 01       	movw	r28, r22
    3f6c:	ba 01       	movw	r22, r20
	
  int maxFit = 6;
  
  //last 2 bytes in 0x291 field are unknown so we stop short
  if(screen == 1) {
    3f6e:	88 81       	ld	r24, Y
    3f70:	99 81       	ldd	r25, Y+1	; 0x01
    3f72:	81 30       	cpi	r24, 0x01	; 1
    3f74:	91 05       	cpc	r25, r1
    3f76:	19 f0       	breq	.+6      	; 0x3f7e <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc+0x1c>
 * @param screen   The screen to print to
 * @param data     The data to print out
 */
void CANMethods::prepareMSCANMessage(Frame& message, const int& screen, const char* data) {
	
  int maxFit = 6;
    3f78:	26 e0       	ldi	r18, 0x06	; 6
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	02 c0       	rjmp	.+4      	; 0x3f82 <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc+0x20>
  
  //last 2 bytes in 0x291 field are unknown so we stop short
  if(screen == 1) {
	  maxFit = 5;
    3f7e:	25 e0       	ldi	r18, 0x05	; 5
    3f80:	30 e0       	ldi	r19, 0x00	; 0
   * Here we are converting the char data to 
   * ASCII chars.  We also want to make sure
   * we clear the rest of the buffer once we
   * hit a null char
   */
  for(int i = 0; i <= maxFit; i++) {
    3f82:	80 e0       	ldi	r24, 0x00	; 0
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    if(data[i] != '\0') {
      if(data[i] == '*')
        message.data[i + 1] = 0xdf;
    3f86:	4f ed       	ldi	r20, 0xDF	; 223
      else
        message.data[i + 1] = (int)data[i];
    } else
      for(int j = i; j <= maxFit; j++, i++)
        message.data[j + 1] = 0x20;
    3f88:	50 e2       	ldi	r21, 0x20	; 32
   * ASCII chars.  We also want to make sure
   * we clear the rest of the buffer once we
   * hit a null char
   */
  for(int i = 0; i <= maxFit; i++) {
    if(data[i] != '\0') {
    3f8a:	fb 01       	movw	r30, r22
    3f8c:	e8 0f       	add	r30, r24
    3f8e:	f9 1f       	adc	r31, r25
    3f90:	10 81       	ld	r17, Z
    3f92:	11 23       	and	r17, r17
    3f94:	71 f0       	breq	.+28     	; 0x3fb2 <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc+0x50>
    3f96:	fd 01       	movw	r30, r26
    3f98:	e8 0f       	add	r30, r24
    3f9a:	f9 1f       	adc	r31, r25
      if(data[i] == '*')
    3f9c:	1a 32       	cpi	r17, 0x2A	; 42
    3f9e:	11 f4       	brne	.+4      	; 0x3fa4 <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc+0x42>
        message.data[i + 1] = 0xdf;
    3fa0:	42 87       	std	Z+10, r20	; 0x0a
    3fa2:	0a c0       	rjmp	.+20     	; 0x3fb8 <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc+0x56>
      else
        message.data[i + 1] = (int)data[i];
    3fa4:	12 87       	std	Z+10, r17	; 0x0a
    3fa6:	08 c0       	rjmp	.+16     	; 0x3fb8 <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc+0x56>
    } else
      for(int j = i; j <= maxFit; j++, i++)
        message.data[j + 1] = 0x20;
    3fa8:	01 96       	adiw	r24, 0x01	; 1
 *
 * @param message  The CAN message to prepare
 * @param screen   The screen to print to
 * @param data     The data to print out
 */
void CANMethods::prepareMSCANMessage(Frame& message, const int& screen, const char* data) {
    3faa:	fd 01       	movw	r30, r26
    3fac:	e8 0f       	add	r30, r24
    3fae:	f9 1f       	adc	r31, r25
        message.data[i + 1] = 0xdf;
      else
        message.data[i + 1] = (int)data[i];
    } else
      for(int j = i; j <= maxFit; j++, i++)
        message.data[j + 1] = 0x20;
    3fb0:	51 87       	std	Z+9, r21	; 0x09
      if(data[i] == '*')
        message.data[i + 1] = 0xdf;
      else
        message.data[i + 1] = (int)data[i];
    } else
      for(int j = i; j <= maxFit; j++, i++)
    3fb2:	28 17       	cp	r18, r24
    3fb4:	39 07       	cpc	r19, r25
    3fb6:	c4 f7       	brge	.-16     	; 0x3fa8 <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc+0x46>
   * Here we are converting the char data to 
   * ASCII chars.  We also want to make sure
   * we clear the rest of the buffer once we
   * hit a null char
   */
  for(int i = 0; i <= maxFit; i++) {
    3fb8:	01 96       	adiw	r24, 0x01	; 1
    3fba:	28 17       	cp	r18, r24
    3fbc:	39 07       	cpc	r19, r25
    3fbe:	2c f7       	brge	.-54     	; 0x3f8a <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc+0x28>
  }
  
  /**
   * Depending on the screen, change the address
   */  
  if(screen == 0) {
    3fc0:	88 81       	ld	r24, Y
    3fc2:	99 81       	ldd	r25, Y+1	; 0x01
    3fc4:	00 97       	sbiw	r24, 0x00	; 0
    3fc6:	89 f4       	brne	.+34     	; 0x3fea <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc+0x88>
 *
 * @param  request  The CAN pid that we are requesting
 * @param  message  The message object to prepare
 */
void CANMethods::prepareCommonMessage(const unsigned int& request, Frame& message) {
  message.adrsValue = request;
    3fc8:	80 e9       	ldi	r24, 0x90	; 144
    3fca:	92 e0       	ldi	r25, 0x02	; 2
    3fcc:	11 96       	adiw	r26, 0x01	; 1
    3fce:	9c 93       	st	X, r25
    3fd0:	8e 93       	st	-X, r24
  message.rtr = false;
    3fd2:	17 96       	adiw	r26, 0x07	; 7
    3fd4:	1c 92       	st	X, r1
    3fd6:	17 97       	sbiw	r26, 0x07	; 7
  message.dataLength = 8;
    3fd8:	88 e0       	ldi	r24, 0x08	; 8
    3fda:	18 96       	adiw	r26, 0x08	; 8
    3fdc:	8c 93       	st	X, r24
    3fde:	18 97       	sbiw	r26, 0x08	; 8
  message.isExtendedAdrs = false;
    3fe0:	12 96       	adiw	r26, 0x02	; 2
    3fe2:	1c 92       	st	X, r1
    3fe4:	12 97       	sbiw	r26, 0x02	; 2
   * Depending on the screen, change the address
   */  
  if(screen == 0) {
    // Prepare message
    prepareCommonMessage(LCD_1, message);
    message.data[0] = LCD_1_INIT;
    3fe6:	80 ec       	ldi	r24, 0xC0	; 192
    3fe8:	13 c0       	rjmp	.+38     	; 0x4010 <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc+0xae>
  } else if (screen == 1) {
    3fea:	81 30       	cpi	r24, 0x01	; 1
    3fec:	91 05       	cpc	r25, r1
    3fee:	99 f4       	brne	.+38     	; 0x4016 <_ZN10CANMethods19prepareMSCANMessageER5FrameRKiPKc+0xb4>
 *
 * @param  request  The CAN pid that we are requesting
 * @param  message  The message object to prepare
 */
void CANMethods::prepareCommonMessage(const unsigned int& request, Frame& message) {
  message.adrsValue = request;
    3ff0:	81 e9       	ldi	r24, 0x91	; 145
    3ff2:	92 e0       	ldi	r25, 0x02	; 2
    3ff4:	11 96       	adiw	r26, 0x01	; 1
    3ff6:	9c 93       	st	X, r25
    3ff8:	8e 93       	st	-X, r24
  message.rtr = false;
    3ffa:	17 96       	adiw	r26, 0x07	; 7
    3ffc:	1c 92       	st	X, r1
    3ffe:	17 97       	sbiw	r26, 0x07	; 7
  message.dataLength = 8;
    4000:	88 e0       	ldi	r24, 0x08	; 8
    4002:	18 96       	adiw	r26, 0x08	; 8
    4004:	8c 93       	st	X, r24
    4006:	18 97       	sbiw	r26, 0x08	; 8
  message.isExtendedAdrs = false;
    4008:	12 96       	adiw	r26, 0x02	; 2
    400a:	1c 92       	st	X, r1
    400c:	12 97       	sbiw	r26, 0x02	; 2
    prepareCommonMessage(LCD_1, message);
    message.data[0] = LCD_1_INIT;
  } else if (screen == 1) {
    // Prepare message
    prepareCommonMessage(LCD_2, message);
    message.data[0] = LCD_2_INIT;
    400e:	87 e8       	ldi	r24, 0x87	; 135
    4010:	19 96       	adiw	r26, 0x09	; 9
    4012:	8c 93       	st	X, r24
    4014:	19 97       	sbiw	r26, 0x09	; 9
  }
}
    4016:	df 91       	pop	r29
    4018:	cf 91       	pop	r28
    401a:	1f 91       	pop	r17
    401c:	08 95       	ret

0000401e <_GLOBAL__sub_I_HSCAN>:
		DebugMethods::serialDebug("User Updated Text", true);
		// Save user changes
		strcpy((char *)sv.stored, dispText);
		eeprom_write_block((void *)&sv, 0, sizeof(sv)); 
	}	 	  
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	0e 94 b4 01 	call	0x368	; 0x368 <_Z41__static_initialization_and_destruction_0ii.constprop.4>
    4026:	08 95       	ret

00004028 <_GLOBAL__sub_D_HSCAN>:
    4028:	80 e0       	ldi	r24, 0x00	; 0
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	0e 94 b4 01 	call	0x368	; 0x368 <_Z41__static_initialization_and_destruction_0ii.constprop.4>
    4030:	08 95       	ret

00004032 <__vector_16>:
    4032:	1f 92       	push	r1
    4034:	0f 92       	push	r0
    4036:	0f b6       	in	r0, 0x3f	; 63
    4038:	0f 92       	push	r0
    403a:	11 24       	eor	r1, r1
    403c:	2f 93       	push	r18
    403e:	3f 93       	push	r19
    4040:	8f 93       	push	r24
    4042:	9f 93       	push	r25
    4044:	af 93       	push	r26
    4046:	bf 93       	push	r27
    4048:	80 91 3d 06 	lds	r24, 0x063D
    404c:	90 91 3e 06 	lds	r25, 0x063E
    4050:	a0 91 3f 06 	lds	r26, 0x063F
    4054:	b0 91 40 06 	lds	r27, 0x0640
    4058:	30 91 41 06 	lds	r19, 0x0641
    405c:	01 96       	adiw	r24, 0x01	; 1
    405e:	a1 1d       	adc	r26, r1
    4060:	b1 1d       	adc	r27, r1
    4062:	23 2f       	mov	r18, r19
    4064:	2d 5f       	subi	r18, 0xFD	; 253
    4066:	2d 37       	cpi	r18, 0x7D	; 125
    4068:	20 f0       	brcs	.+8      	; 0x4072 <__vector_16+0x40>
    406a:	2d 57       	subi	r18, 0x7D	; 125
    406c:	01 96       	adiw	r24, 0x01	; 1
    406e:	a1 1d       	adc	r26, r1
    4070:	b1 1d       	adc	r27, r1
    4072:	20 93 41 06 	sts	0x0641, r18
    4076:	80 93 3d 06 	sts	0x063D, r24
    407a:	90 93 3e 06 	sts	0x063E, r25
    407e:	a0 93 3f 06 	sts	0x063F, r26
    4082:	b0 93 40 06 	sts	0x0640, r27
    4086:	80 91 39 06 	lds	r24, 0x0639
    408a:	90 91 3a 06 	lds	r25, 0x063A
    408e:	a0 91 3b 06 	lds	r26, 0x063B
    4092:	b0 91 3c 06 	lds	r27, 0x063C
    4096:	01 96       	adiw	r24, 0x01	; 1
    4098:	a1 1d       	adc	r26, r1
    409a:	b1 1d       	adc	r27, r1
    409c:	80 93 39 06 	sts	0x0639, r24
    40a0:	90 93 3a 06 	sts	0x063A, r25
    40a4:	a0 93 3b 06 	sts	0x063B, r26
    40a8:	b0 93 3c 06 	sts	0x063C, r27
    40ac:	bf 91       	pop	r27
    40ae:	af 91       	pop	r26
    40b0:	9f 91       	pop	r25
    40b2:	8f 91       	pop	r24
    40b4:	3f 91       	pop	r19
    40b6:	2f 91       	pop	r18
    40b8:	0f 90       	pop	r0
    40ba:	0f be       	out	0x3f, r0	; 63
    40bc:	0f 90       	pop	r0
    40be:	1f 90       	pop	r1
    40c0:	18 95       	reti

000040c2 <millis>:
    40c2:	8f b7       	in	r24, 0x3f	; 63
    40c4:	f8 94       	cli
    40c6:	20 91 3d 06 	lds	r18, 0x063D
    40ca:	30 91 3e 06 	lds	r19, 0x063E
    40ce:	40 91 3f 06 	lds	r20, 0x063F
    40d2:	50 91 40 06 	lds	r21, 0x0640
    40d6:	8f bf       	out	0x3f, r24	; 63
    40d8:	b9 01       	movw	r22, r18
    40da:	ca 01       	movw	r24, r20
    40dc:	08 95       	ret

000040de <delay>:
    40de:	9b 01       	movw	r18, r22
    40e0:	ac 01       	movw	r20, r24
    40e2:	7f b7       	in	r23, 0x3f	; 63
    40e4:	f8 94       	cli
    40e6:	80 91 39 06 	lds	r24, 0x0639
    40ea:	90 91 3a 06 	lds	r25, 0x063A
    40ee:	a0 91 3b 06 	lds	r26, 0x063B
    40f2:	b0 91 3c 06 	lds	r27, 0x063C
    40f6:	66 b5       	in	r22, 0x26	; 38
    40f8:	a8 9b       	sbis	0x15, 0	; 21
    40fa:	05 c0       	rjmp	.+10     	; 0x4106 <delay+0x28>
    40fc:	6f 3f       	cpi	r22, 0xFF	; 255
    40fe:	19 f0       	breq	.+6      	; 0x4106 <delay+0x28>
    4100:	01 96       	adiw	r24, 0x01	; 1
    4102:	a1 1d       	adc	r26, r1
    4104:	b1 1d       	adc	r27, r1
    4106:	7f bf       	out	0x3f, r23	; 63
    4108:	ba 2f       	mov	r27, r26
    410a:	a9 2f       	mov	r26, r25
    410c:	98 2f       	mov	r25, r24
    410e:	88 27       	eor	r24, r24
    4110:	86 0f       	add	r24, r22
    4112:	91 1d       	adc	r25, r1
    4114:	a1 1d       	adc	r26, r1
    4116:	b1 1d       	adc	r27, r1
    4118:	62 e0       	ldi	r22, 0x02	; 2
    411a:	88 0f       	add	r24, r24
    411c:	99 1f       	adc	r25, r25
    411e:	aa 1f       	adc	r26, r26
    4120:	bb 1f       	adc	r27, r27
    4122:	6a 95       	dec	r22
    4124:	d1 f7       	brne	.-12     	; 0x411a <delay+0x3c>
    4126:	bc 01       	movw	r22, r24
    4128:	2d c0       	rjmp	.+90     	; 0x4184 <delay+0xa6>
    412a:	ff b7       	in	r31, 0x3f	; 63
    412c:	f8 94       	cli
    412e:	80 91 39 06 	lds	r24, 0x0639
    4132:	90 91 3a 06 	lds	r25, 0x063A
    4136:	a0 91 3b 06 	lds	r26, 0x063B
    413a:	b0 91 3c 06 	lds	r27, 0x063C
    413e:	e6 b5       	in	r30, 0x26	; 38
    4140:	a8 9b       	sbis	0x15, 0	; 21
    4142:	05 c0       	rjmp	.+10     	; 0x414e <delay+0x70>
    4144:	ef 3f       	cpi	r30, 0xFF	; 255
    4146:	19 f0       	breq	.+6      	; 0x414e <delay+0x70>
    4148:	01 96       	adiw	r24, 0x01	; 1
    414a:	a1 1d       	adc	r26, r1
    414c:	b1 1d       	adc	r27, r1
    414e:	ff bf       	out	0x3f, r31	; 63
    4150:	ba 2f       	mov	r27, r26
    4152:	a9 2f       	mov	r26, r25
    4154:	98 2f       	mov	r25, r24
    4156:	88 27       	eor	r24, r24
    4158:	8e 0f       	add	r24, r30
    415a:	91 1d       	adc	r25, r1
    415c:	a1 1d       	adc	r26, r1
    415e:	b1 1d       	adc	r27, r1
    4160:	e2 e0       	ldi	r30, 0x02	; 2
    4162:	88 0f       	add	r24, r24
    4164:	99 1f       	adc	r25, r25
    4166:	aa 1f       	adc	r26, r26
    4168:	bb 1f       	adc	r27, r27
    416a:	ea 95       	dec	r30
    416c:	d1 f7       	brne	.-12     	; 0x4162 <delay+0x84>
    416e:	86 1b       	sub	r24, r22
    4170:	97 0b       	sbc	r25, r23
    4172:	88 5e       	subi	r24, 0xE8	; 232
    4174:	93 40       	sbci	r25, 0x03	; 3
    4176:	c8 f2       	brcs	.-78     	; 0x412a <delay+0x4c>
    4178:	21 50       	subi	r18, 0x01	; 1
    417a:	30 40       	sbci	r19, 0x00	; 0
    417c:	40 40       	sbci	r20, 0x00	; 0
    417e:	50 40       	sbci	r21, 0x00	; 0
    4180:	68 51       	subi	r22, 0x18	; 24
    4182:	7c 4f       	sbci	r23, 0xFC	; 252
    4184:	21 15       	cp	r18, r1
    4186:	31 05       	cpc	r19, r1
    4188:	41 05       	cpc	r20, r1
    418a:	51 05       	cpc	r21, r1
    418c:	71 f6       	brne	.-100    	; 0x412a <delay+0x4c>
    418e:	08 95       	ret

00004190 <init>:
    4190:	78 94       	sei
    4192:	84 b5       	in	r24, 0x24	; 36
    4194:	82 60       	ori	r24, 0x02	; 2
    4196:	84 bd       	out	0x24, r24	; 36
    4198:	84 b5       	in	r24, 0x24	; 36
    419a:	81 60       	ori	r24, 0x01	; 1
    419c:	84 bd       	out	0x24, r24	; 36
    419e:	85 b5       	in	r24, 0x25	; 37
    41a0:	82 60       	ori	r24, 0x02	; 2
    41a2:	85 bd       	out	0x25, r24	; 37
    41a4:	85 b5       	in	r24, 0x25	; 37
    41a6:	81 60       	ori	r24, 0x01	; 1
    41a8:	85 bd       	out	0x25, r24	; 37
    41aa:	ee e6       	ldi	r30, 0x6E	; 110
    41ac:	f0 e0       	ldi	r31, 0x00	; 0
    41ae:	80 81       	ld	r24, Z
    41b0:	81 60       	ori	r24, 0x01	; 1
    41b2:	80 83       	st	Z, r24
    41b4:	e1 e8       	ldi	r30, 0x81	; 129
    41b6:	f0 e0       	ldi	r31, 0x00	; 0
    41b8:	10 82       	st	Z, r1
    41ba:	80 81       	ld	r24, Z
    41bc:	82 60       	ori	r24, 0x02	; 2
    41be:	80 83       	st	Z, r24
    41c0:	80 81       	ld	r24, Z
    41c2:	81 60       	ori	r24, 0x01	; 1
    41c4:	80 83       	st	Z, r24
    41c6:	e0 e8       	ldi	r30, 0x80	; 128
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	80 81       	ld	r24, Z
    41cc:	81 60       	ori	r24, 0x01	; 1
    41ce:	80 83       	st	Z, r24
    41d0:	e1 eb       	ldi	r30, 0xB1	; 177
    41d2:	f0 e0       	ldi	r31, 0x00	; 0
    41d4:	80 81       	ld	r24, Z
    41d6:	84 60       	ori	r24, 0x04	; 4
    41d8:	80 83       	st	Z, r24
    41da:	e0 eb       	ldi	r30, 0xB0	; 176
    41dc:	f0 e0       	ldi	r31, 0x00	; 0
    41de:	80 81       	ld	r24, Z
    41e0:	81 60       	ori	r24, 0x01	; 1
    41e2:	80 83       	st	Z, r24
    41e4:	ea e7       	ldi	r30, 0x7A	; 122
    41e6:	f0 e0       	ldi	r31, 0x00	; 0
    41e8:	80 81       	ld	r24, Z
    41ea:	84 60       	ori	r24, 0x04	; 4
    41ec:	80 83       	st	Z, r24
    41ee:	80 81       	ld	r24, Z
    41f0:	82 60       	ori	r24, 0x02	; 2
    41f2:	80 83       	st	Z, r24
    41f4:	80 81       	ld	r24, Z
    41f6:	81 60       	ori	r24, 0x01	; 1
    41f8:	80 83       	st	Z, r24
    41fa:	80 81       	ld	r24, Z
    41fc:	80 68       	ori	r24, 0x80	; 128
    41fe:	80 83       	st	Z, r24
    4200:	10 92 c1 00 	sts	0x00C1, r1
    4204:	08 95       	ret

00004206 <_Z11serialEventv>:
    4206:	08 95       	ret

00004208 <__vector_18>:
    4208:	1f 92       	push	r1
    420a:	0f 92       	push	r0
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	0f 92       	push	r0
    4210:	11 24       	eor	r1, r1
    4212:	2f 93       	push	r18
    4214:	3f 93       	push	r19
    4216:	4f 93       	push	r20
    4218:	8f 93       	push	r24
    421a:	9f 93       	push	r25
    421c:	ef 93       	push	r30
    421e:	ff 93       	push	r31
    4220:	40 91 c6 00 	lds	r20, 0x00C6
    4224:	20 91 82 06 	lds	r18, 0x0682
    4228:	30 91 83 06 	lds	r19, 0x0683
    422c:	2f 5f       	subi	r18, 0xFF	; 255
    422e:	3f 4f       	sbci	r19, 0xFF	; 255
    4230:	2f 73       	andi	r18, 0x3F	; 63
    4232:	30 70       	andi	r19, 0x00	; 0
    4234:	80 91 84 06 	lds	r24, 0x0684
    4238:	90 91 85 06 	lds	r25, 0x0685
    423c:	28 17       	cp	r18, r24
    423e:	39 07       	cpc	r19, r25
    4240:	59 f0       	breq	.+22     	; 0x4258 <__vector_18+0x50>
    4242:	e0 91 82 06 	lds	r30, 0x0682
    4246:	f0 91 83 06 	lds	r31, 0x0683
    424a:	ee 5b       	subi	r30, 0xBE	; 190
    424c:	f9 4f       	sbci	r31, 0xF9	; 249
    424e:	40 83       	st	Z, r20
    4250:	30 93 83 06 	sts	0x0683, r19
    4254:	20 93 82 06 	sts	0x0682, r18
    4258:	ff 91       	pop	r31
    425a:	ef 91       	pop	r30
    425c:	9f 91       	pop	r25
    425e:	8f 91       	pop	r24
    4260:	4f 91       	pop	r20
    4262:	3f 91       	pop	r19
    4264:	2f 91       	pop	r18
    4266:	0f 90       	pop	r0
    4268:	0f be       	out	0x3f, r0	; 63
    426a:	0f 90       	pop	r0
    426c:	1f 90       	pop	r1
    426e:	18 95       	reti

00004270 <_Z14serialEventRunv>:
    4270:	e0 91 d6 06 	lds	r30, 0x06D6
    4274:	f0 91 d7 06 	lds	r31, 0x06D7
    4278:	e0 5c       	subi	r30, 0xC0	; 192
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	81 91       	ld	r24, Z+
    427e:	91 91       	ld	r25, Z+
    4280:	20 81       	ld	r18, Z
    4282:	31 81       	ldd	r19, Z+1	; 0x01
    4284:	82 1b       	sub	r24, r18
    4286:	93 0b       	sbc	r25, r19
    4288:	8f 73       	andi	r24, 0x3F	; 63
    428a:	90 70       	andi	r25, 0x00	; 0
    428c:	89 2b       	or	r24, r25
    428e:	11 f0       	breq	.+4      	; 0x4294 <_Z14serialEventRunv+0x24>
    4290:	0e 94 03 21 	call	0x4206	; 0x4206 <_Z11serialEventv>
    4294:	08 95       	ret

00004296 <__vector_19>:
    4296:	1f 92       	push	r1
    4298:	0f 92       	push	r0
    429a:	0f b6       	in	r0, 0x3f	; 63
    429c:	0f 92       	push	r0
    429e:	11 24       	eor	r1, r1
    42a0:	2f 93       	push	r18
    42a2:	3f 93       	push	r19
    42a4:	8f 93       	push	r24
    42a6:	9f 93       	push	r25
    42a8:	ef 93       	push	r30
    42aa:	ff 93       	push	r31
    42ac:	20 91 c6 06 	lds	r18, 0x06C6
    42b0:	30 91 c7 06 	lds	r19, 0x06C7
    42b4:	80 91 c8 06 	lds	r24, 0x06C8
    42b8:	90 91 c9 06 	lds	r25, 0x06C9
    42bc:	28 17       	cp	r18, r24
    42be:	39 07       	cpc	r19, r25
    42c0:	31 f4       	brne	.+12     	; 0x42ce <__vector_19+0x38>
    42c2:	80 91 c1 00 	lds	r24, 0x00C1
    42c6:	8f 7d       	andi	r24, 0xDF	; 223
    42c8:	80 93 c1 00 	sts	0x00C1, r24
    42cc:	14 c0       	rjmp	.+40     	; 0x42f6 <__vector_19+0x60>
    42ce:	e0 91 c8 06 	lds	r30, 0x06C8
    42d2:	f0 91 c9 06 	lds	r31, 0x06C9
    42d6:	ea 57       	subi	r30, 0x7A	; 122
    42d8:	f9 4f       	sbci	r31, 0xF9	; 249
    42da:	20 81       	ld	r18, Z
    42dc:	80 91 c8 06 	lds	r24, 0x06C8
    42e0:	90 91 c9 06 	lds	r25, 0x06C9
    42e4:	01 96       	adiw	r24, 0x01	; 1
    42e6:	8f 73       	andi	r24, 0x3F	; 63
    42e8:	90 70       	andi	r25, 0x00	; 0
    42ea:	90 93 c9 06 	sts	0x06C9, r25
    42ee:	80 93 c8 06 	sts	0x06C8, r24
    42f2:	20 93 c6 00 	sts	0x00C6, r18
    42f6:	ff 91       	pop	r31
    42f8:	ef 91       	pop	r30
    42fa:	9f 91       	pop	r25
    42fc:	8f 91       	pop	r24
    42fe:	3f 91       	pop	r19
    4300:	2f 91       	pop	r18
    4302:	0f 90       	pop	r0
    4304:	0f be       	out	0x3f, r0	; 63
    4306:	0f 90       	pop	r0
    4308:	1f 90       	pop	r1
    430a:	18 95       	reti

0000430c <_ZN14HardwareSerial5beginEm>:
    430c:	af 92       	push	r10
    430e:	bf 92       	push	r11
    4310:	df 92       	push	r13
    4312:	ef 92       	push	r14
    4314:	ff 92       	push	r15
    4316:	0f 93       	push	r16
    4318:	1f 93       	push	r17
    431a:	cf 93       	push	r28
    431c:	df 93       	push	r29
    431e:	ec 01       	movw	r28, r24
    4320:	7a 01       	movw	r14, r20
    4322:	8b 01       	movw	r16, r22
    4324:	dd 24       	eor	r13, r13
    4326:	40 30       	cpi	r20, 0x00	; 0
    4328:	81 ee       	ldi	r24, 0xE1	; 225
    432a:	58 07       	cpc	r21, r24
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	68 07       	cpc	r22, r24
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	78 07       	cpc	r23, r24
    4334:	11 f0       	breq	.+4      	; 0x433a <_ZN14HardwareSerial5beginEm+0x2e>
    4336:	dd 24       	eor	r13, r13
    4338:	d3 94       	inc	r13
    433a:	91 e0       	ldi	r25, 0x01	; 1
    433c:	a9 2e       	mov	r10, r25
    433e:	b1 2c       	mov	r11, r1
    4340:	ec 89       	ldd	r30, Y+20	; 0x14
    4342:	fd 89       	ldd	r31, Y+21	; 0x15
    4344:	dd 20       	and	r13, r13
    4346:	69 f0       	breq	.+26     	; 0x4362 <_ZN14HardwareSerial5beginEm+0x56>
    4348:	c5 01       	movw	r24, r10
    434a:	0e 8c       	ldd	r0, Y+30	; 0x1e
    434c:	02 c0       	rjmp	.+4      	; 0x4352 <_ZN14HardwareSerial5beginEm+0x46>
    434e:	88 0f       	add	r24, r24
    4350:	99 1f       	adc	r25, r25
    4352:	0a 94       	dec	r0
    4354:	e2 f7       	brpl	.-8      	; 0x434e <_ZN14HardwareSerial5beginEm+0x42>
    4356:	80 83       	st	Z, r24
    4358:	60 e0       	ldi	r22, 0x00	; 0
    435a:	79 e0       	ldi	r23, 0x09	; 9
    435c:	8d e3       	ldi	r24, 0x3D	; 61
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	05 c0       	rjmp	.+10     	; 0x436c <_ZN14HardwareSerial5beginEm+0x60>
    4362:	10 82       	st	Z, r1
    4364:	60 e8       	ldi	r22, 0x80	; 128
    4366:	74 e8       	ldi	r23, 0x84	; 132
    4368:	8e e1       	ldi	r24, 0x1E	; 30
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	a8 01       	movw	r20, r16
    436e:	97 01       	movw	r18, r14
    4370:	0e 94 bf 2a 	call	0x557e	; 0x557e <__udivmodsi4>
    4374:	21 50       	subi	r18, 0x01	; 1
    4376:	30 40       	sbci	r19, 0x00	; 0
    4378:	40 40       	sbci	r20, 0x00	; 0
    437a:	50 40       	sbci	r21, 0x00	; 0
    437c:	56 95       	lsr	r21
    437e:	47 95       	ror	r20
    4380:	37 95       	ror	r19
    4382:	27 95       	ror	r18
    4384:	80 e1       	ldi	r24, 0x10	; 16
    4386:	20 30       	cpi	r18, 0x00	; 0
    4388:	38 07       	cpc	r19, r24
    438a:	20 f0       	brcs	.+8      	; 0x4394 <_ZN14HardwareSerial5beginEm+0x88>
    438c:	dd 20       	and	r13, r13
    438e:	11 f0       	breq	.+4      	; 0x4394 <_ZN14HardwareSerial5beginEm+0x88>
    4390:	dd 24       	eor	r13, r13
    4392:	d6 cf       	rjmp	.-84     	; 0x4340 <_ZN14HardwareSerial5beginEm+0x34>
    4394:	e8 89       	ldd	r30, Y+16	; 0x10
    4396:	f9 89       	ldd	r31, Y+17	; 0x11
    4398:	30 83       	st	Z, r19
    439a:	ea 89       	ldd	r30, Y+18	; 0x12
    439c:	fb 89       	ldd	r31, Y+19	; 0x13
    439e:	20 83       	st	Z, r18
    43a0:	ee 89       	ldd	r30, Y+22	; 0x16
    43a2:	ff 89       	ldd	r31, Y+23	; 0x17
    43a4:	40 81       	ld	r20, Z
    43a6:	21 e0       	ldi	r18, 0x01	; 1
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	c9 01       	movw	r24, r18
    43ac:	0a 8c       	ldd	r0, Y+26	; 0x1a
    43ae:	02 c0       	rjmp	.+4      	; 0x43b4 <_ZN14HardwareSerial5beginEm+0xa8>
    43b0:	88 0f       	add	r24, r24
    43b2:	99 1f       	adc	r25, r25
    43b4:	0a 94       	dec	r0
    43b6:	e2 f7       	brpl	.-8      	; 0x43b0 <_ZN14HardwareSerial5beginEm+0xa4>
    43b8:	48 2b       	or	r20, r24
    43ba:	40 83       	st	Z, r20
    43bc:	ee 89       	ldd	r30, Y+22	; 0x16
    43be:	ff 89       	ldd	r31, Y+23	; 0x17
    43c0:	40 81       	ld	r20, Z
    43c2:	c9 01       	movw	r24, r18
    43c4:	0b 8c       	ldd	r0, Y+27	; 0x1b
    43c6:	02 c0       	rjmp	.+4      	; 0x43cc <_ZN14HardwareSerial5beginEm+0xc0>
    43c8:	88 0f       	add	r24, r24
    43ca:	99 1f       	adc	r25, r25
    43cc:	0a 94       	dec	r0
    43ce:	e2 f7       	brpl	.-8      	; 0x43c8 <_ZN14HardwareSerial5beginEm+0xbc>
    43d0:	48 2b       	or	r20, r24
    43d2:	40 83       	st	Z, r20
    43d4:	ee 89       	ldd	r30, Y+22	; 0x16
    43d6:	ff 89       	ldd	r31, Y+23	; 0x17
    43d8:	40 81       	ld	r20, Z
    43da:	c9 01       	movw	r24, r18
    43dc:	0c 8c       	ldd	r0, Y+28	; 0x1c
    43de:	02 c0       	rjmp	.+4      	; 0x43e4 <_ZN14HardwareSerial5beginEm+0xd8>
    43e0:	88 0f       	add	r24, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	0a 94       	dec	r0
    43e6:	e2 f7       	brpl	.-8      	; 0x43e0 <_ZN14HardwareSerial5beginEm+0xd4>
    43e8:	48 2b       	or	r20, r24
    43ea:	40 83       	st	Z, r20
    43ec:	ee 89       	ldd	r30, Y+22	; 0x16
    43ee:	ff 89       	ldd	r31, Y+23	; 0x17
    43f0:	80 81       	ld	r24, Z
    43f2:	0d 8c       	ldd	r0, Y+29	; 0x1d
    43f4:	02 c0       	rjmp	.+4      	; 0x43fa <_ZN14HardwareSerial5beginEm+0xee>
    43f6:	22 0f       	add	r18, r18
    43f8:	33 1f       	adc	r19, r19
    43fa:	0a 94       	dec	r0
    43fc:	e2 f7       	brpl	.-8      	; 0x43f6 <_ZN14HardwareSerial5beginEm+0xea>
    43fe:	20 95       	com	r18
    4400:	28 23       	and	r18, r24
    4402:	20 83       	st	Z, r18
    4404:	df 91       	pop	r29
    4406:	cf 91       	pop	r28
    4408:	1f 91       	pop	r17
    440a:	0f 91       	pop	r16
    440c:	ff 90       	pop	r15
    440e:	ef 90       	pop	r14
    4410:	df 90       	pop	r13
    4412:	bf 90       	pop	r11
    4414:	af 90       	pop	r10
    4416:	08 95       	ret

00004418 <_ZN14HardwareSerial9availableEv>:
    4418:	dc 01       	movw	r26, r24
    441a:	1c 96       	adiw	r26, 0x0c	; 12
    441c:	ed 91       	ld	r30, X+
    441e:	fc 91       	ld	r31, X
    4420:	1d 97       	sbiw	r26, 0x0d	; 13
    4422:	e0 5c       	subi	r30, 0xC0	; 192
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	21 91       	ld	r18, Z+
    4428:	31 91       	ld	r19, Z+
    442a:	80 81       	ld	r24, Z
    442c:	91 81       	ldd	r25, Z+1	; 0x01
    442e:	28 1b       	sub	r18, r24
    4430:	39 0b       	sbc	r19, r25
    4432:	2f 73       	andi	r18, 0x3F	; 63
    4434:	30 70       	andi	r19, 0x00	; 0
    4436:	c9 01       	movw	r24, r18
    4438:	08 95       	ret

0000443a <_ZN14HardwareSerial4peekEv>:
    443a:	dc 01       	movw	r26, r24
    443c:	1c 96       	adiw	r26, 0x0c	; 12
    443e:	ed 91       	ld	r30, X+
    4440:	fc 91       	ld	r31, X
    4442:	1d 97       	sbiw	r26, 0x0d	; 13
    4444:	e0 5c       	subi	r30, 0xC0	; 192
    4446:	ff 4f       	sbci	r31, 0xFF	; 255
    4448:	20 81       	ld	r18, Z
    444a:	31 81       	ldd	r19, Z+1	; 0x01
    444c:	e0 54       	subi	r30, 0x40	; 64
    444e:	f0 40       	sbci	r31, 0x00	; 0
    4450:	df 01       	movw	r26, r30
    4452:	ae 5b       	subi	r26, 0xBE	; 190
    4454:	bf 4f       	sbci	r27, 0xFF	; 255
    4456:	8d 91       	ld	r24, X+
    4458:	9c 91       	ld	r25, X
    445a:	11 97       	sbiw	r26, 0x01	; 1
    445c:	28 17       	cp	r18, r24
    445e:	39 07       	cpc	r19, r25
    4460:	19 f4       	brne	.+6      	; 0x4468 <_ZN14HardwareSerial4peekEv+0x2e>
    4462:	2f ef       	ldi	r18, 0xFF	; 255
    4464:	3f ef       	ldi	r19, 0xFF	; 255
    4466:	07 c0       	rjmp	.+14     	; 0x4476 <_ZN14HardwareSerial4peekEv+0x3c>
    4468:	8d 91       	ld	r24, X+
    446a:	9c 91       	ld	r25, X
    446c:	e8 0f       	add	r30, r24
    446e:	f9 1f       	adc	r31, r25
    4470:	80 81       	ld	r24, Z
    4472:	28 2f       	mov	r18, r24
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	c9 01       	movw	r24, r18
    4478:	08 95       	ret

0000447a <_ZN14HardwareSerial4readEv>:
    447a:	dc 01       	movw	r26, r24
    447c:	1c 96       	adiw	r26, 0x0c	; 12
    447e:	ed 91       	ld	r30, X+
    4480:	fc 91       	ld	r31, X
    4482:	1d 97       	sbiw	r26, 0x0d	; 13
    4484:	e0 5c       	subi	r30, 0xC0	; 192
    4486:	ff 4f       	sbci	r31, 0xFF	; 255
    4488:	20 81       	ld	r18, Z
    448a:	31 81       	ldd	r19, Z+1	; 0x01
    448c:	e0 54       	subi	r30, 0x40	; 64
    448e:	f0 40       	sbci	r31, 0x00	; 0
    4490:	df 01       	movw	r26, r30
    4492:	ae 5b       	subi	r26, 0xBE	; 190
    4494:	bf 4f       	sbci	r27, 0xFF	; 255
    4496:	8d 91       	ld	r24, X+
    4498:	9c 91       	ld	r25, X
    449a:	11 97       	sbiw	r26, 0x01	; 1
    449c:	28 17       	cp	r18, r24
    449e:	39 07       	cpc	r19, r25
    44a0:	19 f4       	brne	.+6      	; 0x44a8 <_ZN14HardwareSerial4readEv+0x2e>
    44a2:	2f ef       	ldi	r18, 0xFF	; 255
    44a4:	3f ef       	ldi	r19, 0xFF	; 255
    44a6:	10 c0       	rjmp	.+32     	; 0x44c8 <_ZN14HardwareSerial4readEv+0x4e>
    44a8:	8d 91       	ld	r24, X+
    44aa:	9c 91       	ld	r25, X
    44ac:	11 97       	sbiw	r26, 0x01	; 1
    44ae:	e8 0f       	add	r30, r24
    44b0:	f9 1f       	adc	r31, r25
    44b2:	20 81       	ld	r18, Z
    44b4:	8d 91       	ld	r24, X+
    44b6:	9c 91       	ld	r25, X
    44b8:	11 97       	sbiw	r26, 0x01	; 1
    44ba:	01 96       	adiw	r24, 0x01	; 1
    44bc:	8f 73       	andi	r24, 0x3F	; 63
    44be:	90 70       	andi	r25, 0x00	; 0
    44c0:	11 96       	adiw	r26, 0x01	; 1
    44c2:	9c 93       	st	X, r25
    44c4:	8e 93       	st	-X, r24
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	c9 01       	movw	r24, r18
    44ca:	08 95       	ret

000044cc <_ZN14HardwareSerial5flushEv>:
    44cc:	fc 01       	movw	r30, r24
    44ce:	86 85       	ldd	r24, Z+14	; 0x0e
    44d0:	97 85       	ldd	r25, Z+15	; 0x0f
    44d2:	dc 01       	movw	r26, r24
    44d4:	a0 5c       	subi	r26, 0xC0	; 192
    44d6:	bf 4f       	sbci	r27, 0xFF	; 255
    44d8:	fc 01       	movw	r30, r24
    44da:	ee 5b       	subi	r30, 0xBE	; 190
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	2d 91       	ld	r18, X+
    44e0:	3c 91       	ld	r19, X
    44e2:	11 97       	sbiw	r26, 0x01	; 1
    44e4:	80 81       	ld	r24, Z
    44e6:	91 81       	ldd	r25, Z+1	; 0x01
    44e8:	28 17       	cp	r18, r24
    44ea:	39 07       	cpc	r19, r25
    44ec:	c1 f7       	brne	.-16     	; 0x44de <_ZN14HardwareSerial5flushEv+0x12>
    44ee:	08 95       	ret

000044f0 <_ZN14HardwareSerial5writeEh>:
    44f0:	cf 93       	push	r28
    44f2:	df 93       	push	r29
    44f4:	ec 01       	movw	r28, r24
    44f6:	ee 85       	ldd	r30, Y+14	; 0x0e
    44f8:	ff 85       	ldd	r31, Y+15	; 0x0f
    44fa:	e0 5c       	subi	r30, 0xC0	; 192
    44fc:	ff 4f       	sbci	r31, 0xFF	; 255
    44fe:	20 81       	ld	r18, Z
    4500:	31 81       	ldd	r19, Z+1	; 0x01
    4502:	e0 54       	subi	r30, 0x40	; 64
    4504:	f0 40       	sbci	r31, 0x00	; 0
    4506:	2f 5f       	subi	r18, 0xFF	; 255
    4508:	3f 4f       	sbci	r19, 0xFF	; 255
    450a:	2f 73       	andi	r18, 0x3F	; 63
    450c:	30 70       	andi	r19, 0x00	; 0
    450e:	df 01       	movw	r26, r30
    4510:	ae 5b       	subi	r26, 0xBE	; 190
    4512:	bf 4f       	sbci	r27, 0xFF	; 255
    4514:	8d 91       	ld	r24, X+
    4516:	9c 91       	ld	r25, X
    4518:	11 97       	sbiw	r26, 0x01	; 1
    451a:	28 17       	cp	r18, r24
    451c:	39 07       	cpc	r19, r25
    451e:	d1 f3       	breq	.-12     	; 0x4514 <_ZN14HardwareSerial5writeEh+0x24>
    4520:	e0 5c       	subi	r30, 0xC0	; 192
    4522:	ff 4f       	sbci	r31, 0xFF	; 255
    4524:	80 81       	ld	r24, Z
    4526:	91 81       	ldd	r25, Z+1	; 0x01
    4528:	e0 54       	subi	r30, 0x40	; 64
    452a:	f0 40       	sbci	r31, 0x00	; 0
    452c:	e8 0f       	add	r30, r24
    452e:	f9 1f       	adc	r31, r25
    4530:	60 83       	st	Z, r22
    4532:	ee 85       	ldd	r30, Y+14	; 0x0e
    4534:	ff 85       	ldd	r31, Y+15	; 0x0f
    4536:	e0 5c       	subi	r30, 0xC0	; 192
    4538:	ff 4f       	sbci	r31, 0xFF	; 255
    453a:	31 83       	std	Z+1, r19	; 0x01
    453c:	20 83       	st	Z, r18
    453e:	ee 89       	ldd	r30, Y+22	; 0x16
    4540:	ff 89       	ldd	r31, Y+23	; 0x17
    4542:	20 81       	ld	r18, Z
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	0d 8c       	ldd	r0, Y+29	; 0x1d
    454a:	02 c0       	rjmp	.+4      	; 0x4550 <_ZN14HardwareSerial5writeEh+0x60>
    454c:	88 0f       	add	r24, r24
    454e:	99 1f       	adc	r25, r25
    4550:	0a 94       	dec	r0
    4552:	e2 f7       	brpl	.-8      	; 0x454c <_ZN14HardwareSerial5writeEh+0x5c>
    4554:	28 2b       	or	r18, r24
    4556:	20 83       	st	Z, r18
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	df 91       	pop	r29
    455e:	cf 91       	pop	r28
    4560:	08 95       	ret

00004562 <_GLOBAL__I_rx_buffer>:
    4562:	10 92 cd 06 	sts	0x06CD, r1
    4566:	10 92 cc 06 	sts	0x06CC, r1
    456a:	88 ee       	ldi	r24, 0xE8	; 232
    456c:	93 e0       	ldi	r25, 0x03	; 3
    456e:	a0 e0       	ldi	r26, 0x00	; 0
    4570:	b0 e0       	ldi	r27, 0x00	; 0
    4572:	80 93 ce 06 	sts	0x06CE, r24
    4576:	90 93 cf 06 	sts	0x06CF, r25
    457a:	a0 93 d0 06 	sts	0x06D0, r26
    457e:	b0 93 d1 06 	sts	0x06D1, r27
    4582:	89 e9       	ldi	r24, 0x99	; 153
    4584:	95 e0       	ldi	r25, 0x05	; 5
    4586:	90 93 cb 06 	sts	0x06CB, r25
    458a:	80 93 ca 06 	sts	0x06CA, r24
    458e:	82 e4       	ldi	r24, 0x42	; 66
    4590:	96 e0       	ldi	r25, 0x06	; 6
    4592:	90 93 d7 06 	sts	0x06D7, r25
    4596:	80 93 d6 06 	sts	0x06D6, r24
    459a:	86 e8       	ldi	r24, 0x86	; 134
    459c:	96 e0       	ldi	r25, 0x06	; 6
    459e:	90 93 d9 06 	sts	0x06D9, r25
    45a2:	80 93 d8 06 	sts	0x06D8, r24
    45a6:	85 ec       	ldi	r24, 0xC5	; 197
    45a8:	90 e0       	ldi	r25, 0x00	; 0
    45aa:	90 93 db 06 	sts	0x06DB, r25
    45ae:	80 93 da 06 	sts	0x06DA, r24
    45b2:	84 ec       	ldi	r24, 0xC4	; 196
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	90 93 dd 06 	sts	0x06DD, r25
    45ba:	80 93 dc 06 	sts	0x06DC, r24
    45be:	80 ec       	ldi	r24, 0xC0	; 192
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	90 93 df 06 	sts	0x06DF, r25
    45c6:	80 93 de 06 	sts	0x06DE, r24
    45ca:	81 ec       	ldi	r24, 0xC1	; 193
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	90 93 e1 06 	sts	0x06E1, r25
    45d2:	80 93 e0 06 	sts	0x06E0, r24
    45d6:	86 ec       	ldi	r24, 0xC6	; 198
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	90 93 e3 06 	sts	0x06E3, r25
    45de:	80 93 e2 06 	sts	0x06E2, r24
    45e2:	84 e0       	ldi	r24, 0x04	; 4
    45e4:	80 93 e4 06 	sts	0x06E4, r24
    45e8:	83 e0       	ldi	r24, 0x03	; 3
    45ea:	80 93 e5 06 	sts	0x06E5, r24
    45ee:	87 e0       	ldi	r24, 0x07	; 7
    45f0:	80 93 e6 06 	sts	0x06E6, r24
    45f4:	85 e0       	ldi	r24, 0x05	; 5
    45f6:	80 93 e7 06 	sts	0x06E7, r24
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	80 93 e8 06 	sts	0x06E8, r24
    4600:	08 95       	ret

00004602 <main>:
    4602:	cf 93       	push	r28
    4604:	df 93       	push	r29
    4606:	0e 94 c8 20 	call	0x4190	; 0x4190 <init>
    460a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <setup>
    460e:	c8 e3       	ldi	r28, 0x38	; 56
    4610:	d1 e2       	ldi	r29, 0x21	; 33
    4612:	0e 94 de 08 	call	0x11bc	; 0x11bc <loop>
    4616:	20 97       	sbiw	r28, 0x00	; 0
    4618:	e1 f3       	breq	.-8      	; 0x4612 <main+0x10>
    461a:	0e 94 38 21 	call	0x4270	; 0x4270 <_Z14serialEventRunv>
    461e:	f9 cf       	rjmp	.-14     	; 0x4612 <main+0x10>

00004620 <_ZN5Print5writeEPKhj>:
    4620:	cf 92       	push	r12
    4622:	df 92       	push	r13
    4624:	ef 92       	push	r14
    4626:	ff 92       	push	r15
    4628:	0f 93       	push	r16
    462a:	1f 93       	push	r17
    462c:	cf 93       	push	r28
    462e:	df 93       	push	r29
    4630:	7c 01       	movw	r14, r24
    4632:	6b 01       	movw	r12, r22
    4634:	8a 01       	movw	r16, r20
    4636:	c0 e0       	ldi	r28, 0x00	; 0
    4638:	d0 e0       	ldi	r29, 0x00	; 0
    463a:	0f c0       	rjmp	.+30     	; 0x465a <_ZN5Print5writeEPKhj+0x3a>
    463c:	d6 01       	movw	r26, r12
    463e:	6d 91       	ld	r22, X+
    4640:	6d 01       	movw	r12, r26
    4642:	d7 01       	movw	r26, r14
    4644:	ed 91       	ld	r30, X+
    4646:	fc 91       	ld	r31, X
    4648:	01 90       	ld	r0, Z+
    464a:	f0 81       	ld	r31, Z
    464c:	e0 2d       	mov	r30, r0
    464e:	c7 01       	movw	r24, r14
    4650:	09 95       	icall
    4652:	c8 0f       	add	r28, r24
    4654:	d9 1f       	adc	r29, r25
    4656:	01 50       	subi	r16, 0x01	; 1
    4658:	10 40       	sbci	r17, 0x00	; 0
    465a:	01 15       	cp	r16, r1
    465c:	11 05       	cpc	r17, r1
    465e:	71 f7       	brne	.-36     	; 0x463c <_ZN5Print5writeEPKhj+0x1c>
    4660:	ce 01       	movw	r24, r28
    4662:	df 91       	pop	r29
    4664:	cf 91       	pop	r28
    4666:	1f 91       	pop	r17
    4668:	0f 91       	pop	r16
    466a:	ff 90       	pop	r15
    466c:	ef 90       	pop	r14
    466e:	df 90       	pop	r13
    4670:	cf 90       	pop	r12
    4672:	08 95       	ret

00004674 <_ZN5Print7printlnEv>:
    4674:	ef 92       	push	r14
    4676:	ff 92       	push	r15
    4678:	0f 93       	push	r16
    467a:	1f 93       	push	r17
    467c:	8c 01       	movw	r16, r24
    467e:	dc 01       	movw	r26, r24
    4680:	ed 91       	ld	r30, X+
    4682:	fc 91       	ld	r31, X
    4684:	01 90       	ld	r0, Z+
    4686:	f0 81       	ld	r31, Z
    4688:	e0 2d       	mov	r30, r0
    468a:	6d e0       	ldi	r22, 0x0D	; 13
    468c:	09 95       	icall
    468e:	7c 01       	movw	r14, r24
    4690:	d8 01       	movw	r26, r16
    4692:	ed 91       	ld	r30, X+
    4694:	fc 91       	ld	r31, X
    4696:	01 90       	ld	r0, Z+
    4698:	f0 81       	ld	r31, Z
    469a:	e0 2d       	mov	r30, r0
    469c:	c8 01       	movw	r24, r16
    469e:	6a e0       	ldi	r22, 0x0A	; 10
    46a0:	09 95       	icall
    46a2:	9c 01       	movw	r18, r24
    46a4:	2e 0d       	add	r18, r14
    46a6:	3f 1d       	adc	r19, r15
    46a8:	c9 01       	movw	r24, r18
    46aa:	1f 91       	pop	r17
    46ac:	0f 91       	pop	r16
    46ae:	ff 90       	pop	r15
    46b0:	ef 90       	pop	r14
    46b2:	08 95       	ret

000046b4 <_ZN5Print5writeEPKc>:
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
    46b8:	db 01       	movw	r26, r22
    46ba:	0d 90       	ld	r0, X+
    46bc:	00 20       	and	r0, r0
    46be:	e9 f7       	brne	.-6      	; 0x46ba <_ZN5Print5writeEPKc+0x6>
    46c0:	11 97       	sbiw	r26, 0x01	; 1
    46c2:	a6 1b       	sub	r26, r22
    46c4:	b7 0b       	sbc	r27, r23
    46c6:	ec 01       	movw	r28, r24
    46c8:	e8 81       	ld	r30, Y
    46ca:	f9 81       	ldd	r31, Y+1	; 0x01
    46cc:	02 80       	ldd	r0, Z+2	; 0x02
    46ce:	f3 81       	ldd	r31, Z+3	; 0x03
    46d0:	e0 2d       	mov	r30, r0
    46d2:	ad 01       	movw	r20, r26
    46d4:	09 95       	icall
    46d6:	df 91       	pop	r29
    46d8:	cf 91       	pop	r28
    46da:	08 95       	ret

000046dc <_ZN5Print11printNumberEmh>:
    46dc:	4f 92       	push	r4
    46de:	5f 92       	push	r5
    46e0:	7f 92       	push	r7
    46e2:	8f 92       	push	r8
    46e4:	9f 92       	push	r9
    46e6:	af 92       	push	r10
    46e8:	bf 92       	push	r11
    46ea:	cf 92       	push	r12
    46ec:	df 92       	push	r13
    46ee:	ef 92       	push	r14
    46f0:	ff 92       	push	r15
    46f2:	0f 93       	push	r16
    46f4:	1f 93       	push	r17
    46f6:	df 93       	push	r29
    46f8:	cf 93       	push	r28
    46fa:	cd b7       	in	r28, 0x3d	; 61
    46fc:	de b7       	in	r29, 0x3e	; 62
    46fe:	a1 97       	sbiw	r28, 0x21	; 33
    4700:	0f b6       	in	r0, 0x3f	; 63
    4702:	f8 94       	cli
    4704:	de bf       	out	0x3e, r29	; 62
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	cd bf       	out	0x3d, r28	; 61
    470a:	2c 01       	movw	r4, r24
    470c:	74 2e       	mov	r7, r20
    470e:	cb 01       	movw	r24, r22
    4710:	22 30       	cpi	r18, 0x02	; 2
    4712:	08 f4       	brcc	.+2      	; 0x4716 <_ZN5Print11printNumberEmh+0x3a>
    4714:	2a e0       	ldi	r18, 0x0A	; 10
    4716:	19 a2       	lds	r17, 0x99
    4718:	31 e2       	ldi	r19, 0x21	; 33
    471a:	c3 2e       	mov	r12, r19
    471c:	d1 2c       	mov	r13, r1
    471e:	cc 0e       	add	r12, r28
    4720:	dd 1e       	adc	r13, r29
    4722:	82 2e       	mov	r8, r18
    4724:	99 24       	eor	r9, r9
    4726:	aa 24       	eor	r10, r10
    4728:	bb 24       	eor	r11, r11
    472a:	67 2d       	mov	r22, r7
    472c:	75 2f       	mov	r23, r21
    472e:	a5 01       	movw	r20, r10
    4730:	94 01       	movw	r18, r8
    4732:	0e 94 bf 2a 	call	0x557e	; 0x557e <__udivmodsi4>
    4736:	79 01       	movw	r14, r18
    4738:	8a 01       	movw	r16, r20
    473a:	c8 01       	movw	r24, r16
    473c:	b7 01       	movw	r22, r14
    473e:	a5 01       	movw	r20, r10
    4740:	94 01       	movw	r18, r8
    4742:	0e 94 8d 2a 	call	0x551a	; 0x551a <__mulsi3>
    4746:	47 2d       	mov	r20, r7
    4748:	46 1b       	sub	r20, r22
    474a:	08 94       	sec
    474c:	c1 08       	sbc	r12, r1
    474e:	d1 08       	sbc	r13, r1
    4750:	4a 30       	cpi	r20, 0x0A	; 10
    4752:	14 f4       	brge	.+4      	; 0x4758 <_ZN5Print11printNumberEmh+0x7c>
    4754:	40 5d       	subi	r20, 0xD0	; 208
    4756:	01 c0       	rjmp	.+2      	; 0x475a <_ZN5Print11printNumberEmh+0x7e>
    4758:	49 5c       	subi	r20, 0xC9	; 201
    475a:	f6 01       	movw	r30, r12
    475c:	40 83       	st	Z, r20
    475e:	e1 14       	cp	r14, r1
    4760:	f1 04       	cpc	r15, r1
    4762:	01 05       	cpc	r16, r1
    4764:	11 05       	cpc	r17, r1
    4766:	21 f0       	breq	.+8      	; 0x4770 <_ZN5Print11printNumberEmh+0x94>
    4768:	7e 2c       	mov	r7, r14
    476a:	5f 2d       	mov	r21, r15
    476c:	c8 01       	movw	r24, r16
    476e:	dd cf       	rjmp	.-70     	; 0x472a <_ZN5Print11printNumberEmh+0x4e>
    4770:	c2 01       	movw	r24, r4
    4772:	b6 01       	movw	r22, r12
    4774:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN5Print5writeEPKc>
    4778:	a1 96       	adiw	r28, 0x21	; 33
    477a:	0f b6       	in	r0, 0x3f	; 63
    477c:	f8 94       	cli
    477e:	de bf       	out	0x3e, r29	; 62
    4780:	0f be       	out	0x3f, r0	; 63
    4782:	cd bf       	out	0x3d, r28	; 61
    4784:	cf 91       	pop	r28
    4786:	df 91       	pop	r29
    4788:	1f 91       	pop	r17
    478a:	0f 91       	pop	r16
    478c:	ff 90       	pop	r15
    478e:	ef 90       	pop	r14
    4790:	df 90       	pop	r13
    4792:	cf 90       	pop	r12
    4794:	bf 90       	pop	r11
    4796:	af 90       	pop	r10
    4798:	9f 90       	pop	r9
    479a:	8f 90       	pop	r8
    479c:	7f 90       	pop	r7
    479e:	5f 90       	pop	r5
    47a0:	4f 90       	pop	r4
    47a2:	08 95       	ret

000047a4 <_ZN5Print5printEmi>:
    47a4:	dc 01       	movw	r26, r24
    47a6:	21 15       	cp	r18, r1
    47a8:	31 05       	cpc	r19, r1
    47aa:	41 f4       	brne	.+16     	; 0x47bc <_ZN5Print5printEmi+0x18>
    47ac:	ed 91       	ld	r30, X+
    47ae:	fc 91       	ld	r31, X
    47b0:	01 90       	ld	r0, Z+
    47b2:	f0 81       	ld	r31, Z
    47b4:	e0 2d       	mov	r30, r0
    47b6:	64 2f       	mov	r22, r20
    47b8:	09 95       	icall
    47ba:	08 95       	ret
    47bc:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_ZN5Print11printNumberEmh>
    47c0:	08 95       	ret

000047c2 <_ZN5Print5printEji>:
    47c2:	ef 92       	push	r14
    47c4:	ff 92       	push	r15
    47c6:	0f 93       	push	r16
    47c8:	1f 93       	push	r17
    47ca:	9a 01       	movw	r18, r20
    47cc:	7b 01       	movw	r14, r22
    47ce:	00 e0       	ldi	r16, 0x00	; 0
    47d0:	10 e0       	ldi	r17, 0x00	; 0
    47d2:	b8 01       	movw	r22, r16
    47d4:	a7 01       	movw	r20, r14
    47d6:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <_ZN5Print5printEmi>
    47da:	1f 91       	pop	r17
    47dc:	0f 91       	pop	r16
    47de:	ff 90       	pop	r15
    47e0:	ef 90       	pop	r14
    47e2:	08 95       	ret

000047e4 <_ZN5Print5printEhi>:
    47e4:	ef 92       	push	r14
    47e6:	ff 92       	push	r15
    47e8:	0f 93       	push	r16
    47ea:	1f 93       	push	r17
    47ec:	9a 01       	movw	r18, r20
    47ee:	e6 2e       	mov	r14, r22
    47f0:	ff 24       	eor	r15, r15
    47f2:	00 e0       	ldi	r16, 0x00	; 0
    47f4:	10 e0       	ldi	r17, 0x00	; 0
    47f6:	b8 01       	movw	r22, r16
    47f8:	a7 01       	movw	r20, r14
    47fa:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <_ZN5Print5printEmi>
    47fe:	1f 91       	pop	r17
    4800:	0f 91       	pop	r16
    4802:	ff 90       	pop	r15
    4804:	ef 90       	pop	r14
    4806:	08 95       	ret

00004808 <_ZN5Print7printlnEhi>:
    4808:	cf 92       	push	r12
    480a:	df 92       	push	r13
    480c:	ef 92       	push	r14
    480e:	ff 92       	push	r15
    4810:	0f 93       	push	r16
    4812:	1f 93       	push	r17
    4814:	6c 01       	movw	r12, r24
    4816:	e6 2e       	mov	r14, r22
    4818:	9a 01       	movw	r18, r20
    481a:	ff 24       	eor	r15, r15
    481c:	00 e0       	ldi	r16, 0x00	; 0
    481e:	10 e0       	ldi	r17, 0x00	; 0
    4820:	b8 01       	movw	r22, r16
    4822:	a7 01       	movw	r20, r14
    4824:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <_ZN5Print5printEmi>
    4828:	8c 01       	movw	r16, r24
    482a:	c6 01       	movw	r24, r12
    482c:	0e 94 3a 23 	call	0x4674	; 0x4674 <_ZN5Print7printlnEv>
    4830:	08 0f       	add	r16, r24
    4832:	19 1f       	adc	r17, r25
    4834:	c8 01       	movw	r24, r16
    4836:	1f 91       	pop	r17
    4838:	0f 91       	pop	r16
    483a:	ff 90       	pop	r15
    483c:	ef 90       	pop	r14
    483e:	df 90       	pop	r13
    4840:	cf 90       	pop	r12
    4842:	08 95       	ret

00004844 <_ZN5Print5printEli>:
    4844:	cf 92       	push	r12
    4846:	df 92       	push	r13
    4848:	ef 92       	push	r14
    484a:	ff 92       	push	r15
    484c:	0f 93       	push	r16
    484e:	1f 93       	push	r17
    4850:	cf 93       	push	r28
    4852:	df 93       	push	r29
    4854:	ec 01       	movw	r28, r24
    4856:	6a 01       	movw	r12, r20
    4858:	7b 01       	movw	r14, r22
    485a:	21 15       	cp	r18, r1
    485c:	31 05       	cpc	r19, r1
    485e:	41 f4       	brne	.+16     	; 0x4870 <_ZN5Print5printEli+0x2c>
    4860:	e8 81       	ld	r30, Y
    4862:	f9 81       	ldd	r31, Y+1	; 0x01
    4864:	01 90       	ld	r0, Z+
    4866:	f0 81       	ld	r31, Z
    4868:	e0 2d       	mov	r30, r0
    486a:	64 2f       	mov	r22, r20
    486c:	09 95       	icall
    486e:	1f c0       	rjmp	.+62     	; 0x48ae <_ZN5Print5printEli+0x6a>
    4870:	2a 30       	cpi	r18, 0x0A	; 10
    4872:	31 05       	cpc	r19, r1
    4874:	d1 f4       	brne	.+52     	; 0x48aa <_ZN5Print5printEli+0x66>
    4876:	77 ff       	sbrs	r23, 7
    4878:	17 c0       	rjmp	.+46     	; 0x48a8 <_ZN5Print5printEli+0x64>
    487a:	e8 81       	ld	r30, Y
    487c:	f9 81       	ldd	r31, Y+1	; 0x01
    487e:	01 90       	ld	r0, Z+
    4880:	f0 81       	ld	r31, Z
    4882:	e0 2d       	mov	r30, r0
    4884:	6d e2       	ldi	r22, 0x2D	; 45
    4886:	09 95       	icall
    4888:	8c 01       	movw	r16, r24
    488a:	44 27       	eor	r20, r20
    488c:	55 27       	eor	r21, r21
    488e:	ba 01       	movw	r22, r20
    4890:	4c 19       	sub	r20, r12
    4892:	5d 09       	sbc	r21, r13
    4894:	6e 09       	sbc	r22, r14
    4896:	7f 09       	sbc	r23, r15
    4898:	ce 01       	movw	r24, r28
    489a:	2a e0       	ldi	r18, 0x0A	; 10
    489c:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_ZN5Print11printNumberEmh>
    48a0:	98 01       	movw	r18, r16
    48a2:	28 0f       	add	r18, r24
    48a4:	39 1f       	adc	r19, r25
    48a6:	04 c0       	rjmp	.+8      	; 0x48b0 <_ZN5Print5printEli+0x6c>
    48a8:	2a e0       	ldi	r18, 0x0A	; 10
    48aa:	0e 94 6e 23 	call	0x46dc	; 0x46dc <_ZN5Print11printNumberEmh>
    48ae:	9c 01       	movw	r18, r24
    48b0:	c9 01       	movw	r24, r18
    48b2:	df 91       	pop	r29
    48b4:	cf 91       	pop	r28
    48b6:	1f 91       	pop	r17
    48b8:	0f 91       	pop	r16
    48ba:	ff 90       	pop	r15
    48bc:	ef 90       	pop	r14
    48be:	df 90       	pop	r13
    48c0:	cf 90       	pop	r12
    48c2:	08 95       	ret

000048c4 <_ZN5Print7printlnEii>:
    48c4:	cf 92       	push	r12
    48c6:	df 92       	push	r13
    48c8:	ef 92       	push	r14
    48ca:	ff 92       	push	r15
    48cc:	0f 93       	push	r16
    48ce:	1f 93       	push	r17
    48d0:	6c 01       	movw	r12, r24
    48d2:	7b 01       	movw	r14, r22
    48d4:	9a 01       	movw	r18, r20
    48d6:	00 27       	eor	r16, r16
    48d8:	f7 fc       	sbrc	r15, 7
    48da:	00 95       	com	r16
    48dc:	10 2f       	mov	r17, r16
    48de:	b8 01       	movw	r22, r16
    48e0:	a7 01       	movw	r20, r14
    48e2:	0e 94 22 24 	call	0x4844	; 0x4844 <_ZN5Print5printEli>
    48e6:	8c 01       	movw	r16, r24
    48e8:	c6 01       	movw	r24, r12
    48ea:	0e 94 3a 23 	call	0x4674	; 0x4674 <_ZN5Print7printlnEv>
    48ee:	08 0f       	add	r16, r24
    48f0:	19 1f       	adc	r17, r25
    48f2:	c8 01       	movw	r24, r16
    48f4:	1f 91       	pop	r17
    48f6:	0f 91       	pop	r16
    48f8:	ff 90       	pop	r15
    48fa:	ef 90       	pop	r14
    48fc:	df 90       	pop	r13
    48fe:	cf 90       	pop	r12
    4900:	08 95       	ret

00004902 <_ZN5Print5printEPKc>:
    4902:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN5Print5writeEPKc>
    4906:	08 95       	ret

00004908 <_ZN5Print7printlnEPKc>:
    4908:	ef 92       	push	r14
    490a:	ff 92       	push	r15
    490c:	0f 93       	push	r16
    490e:	1f 93       	push	r17
    4910:	7c 01       	movw	r14, r24
    4912:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN5Print5writeEPKc>
    4916:	8c 01       	movw	r16, r24
    4918:	c7 01       	movw	r24, r14
    491a:	0e 94 3a 23 	call	0x4674	; 0x4674 <_ZN5Print7printlnEv>
    491e:	08 0f       	add	r16, r24
    4920:	19 1f       	adc	r17, r25
    4922:	c8 01       	movw	r24, r16
    4924:	1f 91       	pop	r17
    4926:	0f 91       	pop	r16
    4928:	ff 90       	pop	r15
    492a:	ef 90       	pop	r14
    492c:	08 95       	ret

0000492e <_ZN5Print5printERK6String>:
    492e:	af 92       	push	r10
    4930:	bf 92       	push	r11
    4932:	cf 92       	push	r12
    4934:	df 92       	push	r13
    4936:	ef 92       	push	r14
    4938:	ff 92       	push	r15
    493a:	0f 93       	push	r16
    493c:	1f 93       	push	r17
    493e:	cf 93       	push	r28
    4940:	df 93       	push	r29
    4942:	5c 01       	movw	r10, r24
    4944:	6b 01       	movw	r12, r22
    4946:	ee 24       	eor	r14, r14
    4948:	ff 24       	eor	r15, r15
    494a:	c0 e0       	ldi	r28, 0x00	; 0
    494c:	d0 e0       	ldi	r29, 0x00	; 0
    494e:	10 c0       	rjmp	.+32     	; 0x4970 <_ZN5Print5printERK6String+0x42>
    4950:	d5 01       	movw	r26, r10
    4952:	ed 91       	ld	r30, X+
    4954:	fc 91       	ld	r31, X
    4956:	00 81       	ld	r16, Z
    4958:	11 81       	ldd	r17, Z+1	; 0x01
    495a:	c6 01       	movw	r24, r12
    495c:	be 01       	movw	r22, r28
    495e:	0e 94 de 24 	call	0x49bc	; 0x49bc <_ZNK6StringixEj>
    4962:	68 2f       	mov	r22, r24
    4964:	c5 01       	movw	r24, r10
    4966:	f8 01       	movw	r30, r16
    4968:	09 95       	icall
    496a:	e8 0e       	add	r14, r24
    496c:	f9 1e       	adc	r15, r25
    496e:	21 96       	adiw	r28, 0x01	; 1
    4970:	f6 01       	movw	r30, r12
    4972:	84 81       	ldd	r24, Z+4	; 0x04
    4974:	95 81       	ldd	r25, Z+5	; 0x05
    4976:	c8 17       	cp	r28, r24
    4978:	d9 07       	cpc	r29, r25
    497a:	50 f3       	brcs	.-44     	; 0x4950 <_ZN5Print5printERK6String+0x22>
    497c:	c7 01       	movw	r24, r14
    497e:	df 91       	pop	r29
    4980:	cf 91       	pop	r28
    4982:	1f 91       	pop	r17
    4984:	0f 91       	pop	r16
    4986:	ff 90       	pop	r15
    4988:	ef 90       	pop	r14
    498a:	df 90       	pop	r13
    498c:	cf 90       	pop	r12
    498e:	bf 90       	pop	r11
    4990:	af 90       	pop	r10
    4992:	08 95       	ret

00004994 <_ZN5Print7printlnERK6String>:
    4994:	ef 92       	push	r14
    4996:	ff 92       	push	r15
    4998:	0f 93       	push	r16
    499a:	1f 93       	push	r17
    499c:	7c 01       	movw	r14, r24
    499e:	0e 94 97 24 	call	0x492e	; 0x492e <_ZN5Print5printERK6String>
    49a2:	8c 01       	movw	r16, r24
    49a4:	c7 01       	movw	r24, r14
    49a6:	0e 94 3a 23 	call	0x4674	; 0x4674 <_ZN5Print7printlnEv>
    49aa:	9c 01       	movw	r18, r24
    49ac:	20 0f       	add	r18, r16
    49ae:	31 1f       	adc	r19, r17
    49b0:	c9 01       	movw	r24, r18
    49b2:	1f 91       	pop	r17
    49b4:	0f 91       	pop	r16
    49b6:	ff 90       	pop	r15
    49b8:	ef 90       	pop	r14
    49ba:	08 95       	ret

000049bc <_ZNK6StringixEj>:
    49bc:	fc 01       	movw	r30, r24
    49be:	84 81       	ldd	r24, Z+4	; 0x04
    49c0:	95 81       	ldd	r25, Z+5	; 0x05
    49c2:	68 17       	cp	r22, r24
    49c4:	79 07       	cpc	r23, r25
    49c6:	48 f4       	brcc	.+18     	; 0x49da <_ZNK6StringixEj+0x1e>
    49c8:	01 90       	ld	r0, Z+
    49ca:	f0 81       	ld	r31, Z
    49cc:	e0 2d       	mov	r30, r0
    49ce:	30 97       	sbiw	r30, 0x00	; 0
    49d0:	21 f0       	breq	.+8      	; 0x49da <_ZNK6StringixEj+0x1e>
    49d2:	e6 0f       	add	r30, r22
    49d4:	f7 1f       	adc	r31, r23
    49d6:	80 81       	ld	r24, Z
    49d8:	08 95       	ret
    49da:	80 e0       	ldi	r24, 0x00	; 0
    49dc:	08 95       	ret

000049de <_ZN6String4trimEv>:
    49de:	cf 92       	push	r12
    49e0:	df 92       	push	r13
    49e2:	ef 92       	push	r14
    49e4:	ff 92       	push	r15
    49e6:	0f 93       	push	r16
    49e8:	1f 93       	push	r17
    49ea:	cf 93       	push	r28
    49ec:	df 93       	push	r29
    49ee:	6c 01       	movw	r12, r24
    49f0:	dc 01       	movw	r26, r24
    49f2:	ed 90       	ld	r14, X+
    49f4:	fc 90       	ld	r15, X
    49f6:	11 97       	sbiw	r26, 0x01	; 1
    49f8:	e1 14       	cp	r14, r1
    49fa:	f1 04       	cpc	r15, r1
    49fc:	09 f4       	brne	.+2      	; 0x4a00 <_ZN6String4trimEv+0x22>
    49fe:	41 c0       	rjmp	.+130    	; 0x4a82 <_ZN6String4trimEv+0xa4>
    4a00:	14 96       	adiw	r26, 0x04	; 4
    4a02:	cd 91       	ld	r28, X+
    4a04:	dc 91       	ld	r29, X
    4a06:	15 97       	sbiw	r26, 0x05	; 5
    4a08:	20 97       	sbiw	r28, 0x00	; 0
    4a0a:	d9 f1       	breq	.+118    	; 0x4a82 <_ZN6String4trimEv+0xa4>
    4a0c:	87 01       	movw	r16, r14
    4a0e:	02 c0       	rjmp	.+4      	; 0x4a14 <_ZN6String4trimEv+0x36>
    4a10:	0f 5f       	subi	r16, 0xFF	; 255
    4a12:	1f 4f       	sbci	r17, 0xFF	; 255
    4a14:	f8 01       	movw	r30, r16
    4a16:	80 81       	ld	r24, Z
    4a18:	99 27       	eor	r25, r25
    4a1a:	87 fd       	sbrc	r24, 7
    4a1c:	90 95       	com	r25
    4a1e:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <isspace>
    4a22:	89 2b       	or	r24, r25
    4a24:	a9 f7       	brne	.-22     	; 0x4a10 <_ZN6String4trimEv+0x32>
    4a26:	21 97       	sbiw	r28, 0x01	; 1
    4a28:	ce 0d       	add	r28, r14
    4a2a:	df 1d       	adc	r29, r15
    4a2c:	01 c0       	rjmp	.+2      	; 0x4a30 <_ZN6String4trimEv+0x52>
    4a2e:	21 97       	sbiw	r28, 0x01	; 1
    4a30:	88 81       	ld	r24, Y
    4a32:	99 27       	eor	r25, r25
    4a34:	87 fd       	sbrc	r24, 7
    4a36:	90 95       	com	r25
    4a38:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <isspace>
    4a3c:	89 2b       	or	r24, r25
    4a3e:	19 f0       	breq	.+6      	; 0x4a46 <_ZN6String4trimEv+0x68>
    4a40:	c0 17       	cp	r28, r16
    4a42:	d1 07       	cpc	r29, r17
    4a44:	a0 f7       	brcc	.-24     	; 0x4a2e <_ZN6String4trimEv+0x50>
    4a46:	fe 01       	movw	r30, r28
    4a48:	31 96       	adiw	r30, 0x01	; 1
    4a4a:	e0 1b       	sub	r30, r16
    4a4c:	f1 0b       	sbc	r31, r17
    4a4e:	d6 01       	movw	r26, r12
    4a50:	15 96       	adiw	r26, 0x05	; 5
    4a52:	fc 93       	st	X, r31
    4a54:	ee 93       	st	-X, r30
    4a56:	14 97       	sbiw	r26, 0x04	; 4
    4a58:	2d 91       	ld	r18, X+
    4a5a:	3c 91       	ld	r19, X
    4a5c:	20 17       	cp	r18, r16
    4a5e:	31 07       	cpc	r19, r17
    4a60:	28 f4       	brcc	.+10     	; 0x4a6c <_ZN6String4trimEv+0x8e>
    4a62:	c9 01       	movw	r24, r18
    4a64:	b8 01       	movw	r22, r16
    4a66:	af 01       	movw	r20, r30
    4a68:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <memcpy>
    4a6c:	d6 01       	movw	r26, r12
    4a6e:	ed 91       	ld	r30, X+
    4a70:	fc 91       	ld	r31, X
    4a72:	11 97       	sbiw	r26, 0x01	; 1
    4a74:	14 96       	adiw	r26, 0x04	; 4
    4a76:	8d 91       	ld	r24, X+
    4a78:	9c 91       	ld	r25, X
    4a7a:	15 97       	sbiw	r26, 0x05	; 5
    4a7c:	e8 0f       	add	r30, r24
    4a7e:	f9 1f       	adc	r31, r25
    4a80:	10 82       	st	Z, r1
    4a82:	df 91       	pop	r29
    4a84:	cf 91       	pop	r28
    4a86:	1f 91       	pop	r17
    4a88:	0f 91       	pop	r16
    4a8a:	ff 90       	pop	r15
    4a8c:	ef 90       	pop	r14
    4a8e:	df 90       	pop	r13
    4a90:	cf 90       	pop	r12
    4a92:	08 95       	ret

00004a94 <_ZNK6String7indexOfERKS_j>:
    4a94:	cf 93       	push	r28
    4a96:	df 93       	push	r29
    4a98:	fc 01       	movw	r30, r24
    4a9a:	db 01       	movw	r26, r22
    4a9c:	84 81       	ldd	r24, Z+4	; 0x04
    4a9e:	95 81       	ldd	r25, Z+5	; 0x05
    4aa0:	48 17       	cp	r20, r24
    4aa2:	59 07       	cpc	r21, r25
    4aa4:	60 f4       	brcc	.+24     	; 0x4abe <_ZNK6String7indexOfERKS_j+0x2a>
    4aa6:	c0 81       	ld	r28, Z
    4aa8:	d1 81       	ldd	r29, Z+1	; 0x01
    4aaa:	6d 91       	ld	r22, X+
    4aac:	7c 91       	ld	r23, X
    4aae:	ce 01       	movw	r24, r28
    4ab0:	84 0f       	add	r24, r20
    4ab2:	95 1f       	adc	r25, r21
    4ab4:	0e 94 73 2d 	call	0x5ae6	; 0x5ae6 <strstr>
    4ab8:	9c 01       	movw	r18, r24
    4aba:	00 97       	sbiw	r24, 0x00	; 0
    4abc:	19 f4       	brne	.+6      	; 0x4ac4 <_ZNK6String7indexOfERKS_j+0x30>
    4abe:	2f ef       	ldi	r18, 0xFF	; 255
    4ac0:	3f ef       	ldi	r19, 0xFF	; 255
    4ac2:	02 c0       	rjmp	.+4      	; 0x4ac8 <_ZNK6String7indexOfERKS_j+0x34>
    4ac4:	2c 1b       	sub	r18, r28
    4ac6:	3d 0b       	sbc	r19, r29
    4ac8:	c9 01       	movw	r24, r18
    4aca:	df 91       	pop	r29
    4acc:	cf 91       	pop	r28
    4ace:	08 95       	ret

00004ad0 <_ZNK6String7indexOfERKS_>:
    4ad0:	40 e0       	ldi	r20, 0x00	; 0
    4ad2:	50 e0       	ldi	r21, 0x00	; 0
    4ad4:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <_ZNK6String7indexOfERKS_j>
    4ad8:	08 95       	ret

00004ada <_ZNK6String8getBytesEPhjj>:
    4ada:	0f 93       	push	r16
    4adc:	1f 93       	push	r17
    4ade:	cf 93       	push	r28
    4ae0:	df 93       	push	r29
    4ae2:	fc 01       	movw	r30, r24
    4ae4:	8b 01       	movw	r16, r22
    4ae6:	41 15       	cp	r20, r1
    4ae8:	51 05       	cpc	r21, r1
    4aea:	f9 f0       	breq	.+62     	; 0x4b2a <_ZNK6String8getBytesEPhjj+0x50>
    4aec:	61 15       	cp	r22, r1
    4aee:	71 05       	cpc	r23, r1
    4af0:	e1 f0       	breq	.+56     	; 0x4b2a <_ZNK6String8getBytesEPhjj+0x50>
    4af2:	84 81       	ldd	r24, Z+4	; 0x04
    4af4:	95 81       	ldd	r25, Z+5	; 0x05
    4af6:	28 17       	cp	r18, r24
    4af8:	39 07       	cpc	r19, r25
    4afa:	18 f0       	brcs	.+6      	; 0x4b02 <_ZNK6String8getBytesEPhjj+0x28>
    4afc:	fb 01       	movw	r30, r22
    4afe:	10 82       	st	Z, r1
    4b00:	14 c0       	rjmp	.+40     	; 0x4b2a <_ZNK6String8getBytesEPhjj+0x50>
    4b02:	41 50       	subi	r20, 0x01	; 1
    4b04:	50 40       	sbci	r21, 0x00	; 0
    4b06:	ec 01       	movw	r28, r24
    4b08:	c2 1b       	sub	r28, r18
    4b0a:	d3 0b       	sbc	r29, r19
    4b0c:	4c 17       	cp	r20, r28
    4b0e:	5d 07       	cpc	r21, r29
    4b10:	08 f4       	brcc	.+2      	; 0x4b14 <_ZNK6String8getBytesEPhjj+0x3a>
    4b12:	ea 01       	movw	r28, r20
    4b14:	60 81       	ld	r22, Z
    4b16:	71 81       	ldd	r23, Z+1	; 0x01
    4b18:	62 0f       	add	r22, r18
    4b1a:	73 1f       	adc	r23, r19
    4b1c:	c8 01       	movw	r24, r16
    4b1e:	ae 01       	movw	r20, r28
    4b20:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <strncpy>
    4b24:	c0 0f       	add	r28, r16
    4b26:	d1 1f       	adc	r29, r17
    4b28:	18 82       	st	Y, r1
    4b2a:	df 91       	pop	r29
    4b2c:	cf 91       	pop	r28
    4b2e:	1f 91       	pop	r17
    4b30:	0f 91       	pop	r16
    4b32:	08 95       	ret

00004b34 <_ZNK6String6equalsEPKc>:
    4b34:	dc 01       	movw	r26, r24
    4b36:	fb 01       	movw	r30, r22
    4b38:	14 96       	adiw	r26, 0x04	; 4
    4b3a:	8d 91       	ld	r24, X+
    4b3c:	9c 91       	ld	r25, X
    4b3e:	15 97       	sbiw	r26, 0x05	; 5
    4b40:	89 2b       	or	r24, r25
    4b42:	31 f4       	brne	.+12     	; 0x4b50 <_ZNK6String6equalsEPKc+0x1c>
    4b44:	61 15       	cp	r22, r1
    4b46:	71 05       	cpc	r23, r1
    4b48:	a9 f0       	breq	.+42     	; 0x4b74 <_ZNK6String6equalsEPKc+0x40>
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	80 81       	ld	r24, Z
    4b4e:	08 c0       	rjmp	.+16     	; 0x4b60 <_ZNK6String6equalsEPKc+0x2c>
    4b50:	0d 90       	ld	r0, X+
    4b52:	bc 91       	ld	r27, X
    4b54:	a0 2d       	mov	r26, r0
    4b56:	61 15       	cp	r22, r1
    4b58:	71 05       	cpc	r23, r1
    4b5a:	29 f4       	brne	.+10     	; 0x4b66 <_ZNK6String6equalsEPKc+0x32>
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	8c 91       	ld	r24, X
    4b60:	88 23       	and	r24, r24
    4b62:	49 f4       	brne	.+18     	; 0x4b76 <_ZNK6String6equalsEPKc+0x42>
    4b64:	07 c0       	rjmp	.+14     	; 0x4b74 <_ZNK6String6equalsEPKc+0x40>
    4b66:	cd 01       	movw	r24, r26
    4b68:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <strcmp>
    4b6c:	9c 01       	movw	r18, r24
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	23 2b       	or	r18, r19
    4b72:	09 f4       	brne	.+2      	; 0x4b76 <_ZNK6String6equalsEPKc+0x42>
    4b74:	91 e0       	ldi	r25, 0x01	; 1
    4b76:	89 2f       	mov	r24, r25
    4b78:	08 95       	ret

00004b7a <_ZNK6String9compareToERKS_>:
    4b7a:	cf 93       	push	r28
    4b7c:	df 93       	push	r29
    4b7e:	9c 01       	movw	r18, r24
    4b80:	fb 01       	movw	r30, r22
    4b82:	ec 01       	movw	r28, r24
    4b84:	a8 81       	ld	r26, Y
    4b86:	b9 81       	ldd	r27, Y+1	; 0x01
    4b88:	10 97       	sbiw	r26, 0x00	; 0
    4b8a:	29 f0       	breq	.+10     	; 0x4b96 <_ZNK6String9compareToERKS_+0x1c>
    4b8c:	60 81       	ld	r22, Z
    4b8e:	71 81       	ldd	r23, Z+1	; 0x01
    4b90:	61 15       	cp	r22, r1
    4b92:	71 05       	cpc	r23, r1
    4b94:	d1 f4       	brne	.+52     	; 0x4bca <_ZNK6String9compareToERKS_+0x50>
    4b96:	c0 81       	ld	r28, Z
    4b98:	d1 81       	ldd	r29, Z+1	; 0x01
    4b9a:	20 97       	sbiw	r28, 0x00	; 0
    4b9c:	59 f0       	breq	.+22     	; 0x4bb4 <_ZNK6String9compareToERKS_+0x3a>
    4b9e:	84 81       	ldd	r24, Z+4	; 0x04
    4ba0:	95 81       	ldd	r25, Z+5	; 0x05
    4ba2:	89 2b       	or	r24, r25
    4ba4:	39 f0       	breq	.+14     	; 0x4bb4 <_ZNK6String9compareToERKS_+0x3a>
    4ba6:	88 81       	ld	r24, Y
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	22 27       	eor	r18, r18
    4bac:	33 27       	eor	r19, r19
    4bae:	28 1b       	sub	r18, r24
    4bb0:	39 0b       	sbc	r19, r25
    4bb2:	12 c0       	rjmp	.+36     	; 0x4bd8 <_ZNK6String9compareToERKS_+0x5e>
    4bb4:	10 97       	sbiw	r26, 0x00	; 0
    4bb6:	71 f0       	breq	.+28     	; 0x4bd4 <_ZNK6String9compareToERKS_+0x5a>
    4bb8:	f9 01       	movw	r30, r18
    4bba:	84 81       	ldd	r24, Z+4	; 0x04
    4bbc:	95 81       	ldd	r25, Z+5	; 0x05
    4bbe:	89 2b       	or	r24, r25
    4bc0:	49 f0       	breq	.+18     	; 0x4bd4 <_ZNK6String9compareToERKS_+0x5a>
    4bc2:	8c 91       	ld	r24, X
    4bc4:	28 2f       	mov	r18, r24
    4bc6:	30 e0       	ldi	r19, 0x00	; 0
    4bc8:	07 c0       	rjmp	.+14     	; 0x4bd8 <_ZNK6String9compareToERKS_+0x5e>
    4bca:	cd 01       	movw	r24, r26
    4bcc:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <strcmp>
    4bd0:	9c 01       	movw	r18, r24
    4bd2:	02 c0       	rjmp	.+4      	; 0x4bd8 <_ZNK6String9compareToERKS_+0x5e>
    4bd4:	20 e0       	ldi	r18, 0x00	; 0
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	c9 01       	movw	r24, r18
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	08 95       	ret

00004be0 <_ZN6String12changeBufferEj>:
    4be0:	0f 93       	push	r16
    4be2:	1f 93       	push	r17
    4be4:	cf 93       	push	r28
    4be6:	df 93       	push	r29
    4be8:	ec 01       	movw	r28, r24
    4bea:	8b 01       	movw	r16, r22
    4bec:	6f 5f       	subi	r22, 0xFF	; 255
    4bee:	7f 4f       	sbci	r23, 0xFF	; 255
    4bf0:	88 81       	ld	r24, Y
    4bf2:	99 81       	ldd	r25, Y+1	; 0x01
    4bf4:	0e 94 4c 2c 	call	0x5898	; 0x5898 <realloc>
    4bf8:	00 97       	sbiw	r24, 0x00	; 0
    4bfa:	11 f4       	brne	.+4      	; 0x4c00 <_ZN6String12changeBufferEj+0x20>
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
    4bfe:	05 c0       	rjmp	.+10     	; 0x4c0a <_ZN6String12changeBufferEj+0x2a>
    4c00:	99 83       	std	Y+1, r25	; 0x01
    4c02:	88 83       	st	Y, r24
    4c04:	1b 83       	std	Y+3, r17	; 0x03
    4c06:	0a 83       	std	Y+2, r16	; 0x02
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	df 91       	pop	r29
    4c0c:	cf 91       	pop	r28
    4c0e:	1f 91       	pop	r17
    4c10:	0f 91       	pop	r16
    4c12:	08 95       	ret

00004c14 <_ZN6String7reserveEj>:
    4c14:	cf 93       	push	r28
    4c16:	df 93       	push	r29
    4c18:	ec 01       	movw	r28, r24
    4c1a:	88 81       	ld	r24, Y
    4c1c:	99 81       	ldd	r25, Y+1	; 0x01
    4c1e:	89 2b       	or	r24, r25
    4c20:	29 f0       	breq	.+10     	; 0x4c2c <_ZN6String7reserveEj+0x18>
    4c22:	8a 81       	ldd	r24, Y+2	; 0x02
    4c24:	9b 81       	ldd	r25, Y+3	; 0x03
    4c26:	86 17       	cp	r24, r22
    4c28:	97 07       	cpc	r25, r23
    4c2a:	60 f4       	brcc	.+24     	; 0x4c44 <_ZN6String7reserveEj+0x30>
    4c2c:	ce 01       	movw	r24, r28
    4c2e:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <_ZN6String12changeBufferEj>
    4c32:	88 23       	and	r24, r24
    4c34:	41 f0       	breq	.+16     	; 0x4c46 <_ZN6String7reserveEj+0x32>
    4c36:	8c 81       	ldd	r24, Y+4	; 0x04
    4c38:	9d 81       	ldd	r25, Y+5	; 0x05
    4c3a:	89 2b       	or	r24, r25
    4c3c:	19 f4       	brne	.+6      	; 0x4c44 <_ZN6String7reserveEj+0x30>
    4c3e:	e8 81       	ld	r30, Y
    4c40:	f9 81       	ldd	r31, Y+1	; 0x01
    4c42:	10 82       	st	Z, r1
    4c44:	81 e0       	ldi	r24, 0x01	; 1
    4c46:	df 91       	pop	r29
    4c48:	cf 91       	pop	r28
    4c4a:	08 95       	ret

00004c4c <_ZN6String6concatEPKcj>:
    4c4c:	ef 92       	push	r14
    4c4e:	ff 92       	push	r15
    4c50:	0f 93       	push	r16
    4c52:	1f 93       	push	r17
    4c54:	cf 93       	push	r28
    4c56:	df 93       	push	r29
    4c58:	ec 01       	movw	r28, r24
    4c5a:	7b 01       	movw	r14, r22
    4c5c:	6c 81       	ldd	r22, Y+4	; 0x04
    4c5e:	7d 81       	ldd	r23, Y+5	; 0x05
    4c60:	e1 14       	cp	r14, r1
    4c62:	f1 04       	cpc	r15, r1
    4c64:	c1 f0       	breq	.+48     	; 0x4c96 <_ZN6String6concatEPKcj+0x4a>
    4c66:	41 15       	cp	r20, r1
    4c68:	51 05       	cpc	r21, r1
    4c6a:	99 f0       	breq	.+38     	; 0x4c92 <_ZN6String6concatEPKcj+0x46>
    4c6c:	8a 01       	movw	r16, r20
    4c6e:	06 0f       	add	r16, r22
    4c70:	17 1f       	adc	r17, r23
    4c72:	b8 01       	movw	r22, r16
    4c74:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <_ZN6String7reserveEj>
    4c78:	88 23       	and	r24, r24
    4c7a:	69 f0       	breq	.+26     	; 0x4c96 <_ZN6String6concatEPKcj+0x4a>
    4c7c:	88 81       	ld	r24, Y
    4c7e:	99 81       	ldd	r25, Y+1	; 0x01
    4c80:	2c 81       	ldd	r18, Y+4	; 0x04
    4c82:	3d 81       	ldd	r19, Y+5	; 0x05
    4c84:	82 0f       	add	r24, r18
    4c86:	93 1f       	adc	r25, r19
    4c88:	b7 01       	movw	r22, r14
    4c8a:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <strcpy>
    4c8e:	1d 83       	std	Y+5, r17	; 0x05
    4c90:	0c 83       	std	Y+4, r16	; 0x04
    4c92:	81 e0       	ldi	r24, 0x01	; 1
    4c94:	01 c0       	rjmp	.+2      	; 0x4c98 <_ZN6String6concatEPKcj+0x4c>
    4c96:	80 e0       	ldi	r24, 0x00	; 0
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	1f 91       	pop	r17
    4c9e:	0f 91       	pop	r16
    4ca0:	ff 90       	pop	r15
    4ca2:	ef 90       	pop	r14
    4ca4:	08 95       	ret

00004ca6 <_ZN6String6concatEc>:
    4ca6:	df 93       	push	r29
    4ca8:	cf 93       	push	r28
    4caa:	00 d0       	rcall	.+0      	; 0x4cac <_ZN6String6concatEc+0x6>
    4cac:	cd b7       	in	r28, 0x3d	; 61
    4cae:	de b7       	in	r29, 0x3e	; 62
    4cb0:	69 83       	std	Y+1, r22	; 0x01
    4cb2:	1a 82       	std	Y+2, r1	; 0x02
    4cb4:	be 01       	movw	r22, r28
    4cb6:	6f 5f       	subi	r22, 0xFF	; 255
    4cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cba:	41 e0       	ldi	r20, 0x01	; 1
    4cbc:	50 e0       	ldi	r21, 0x00	; 0
    4cbe:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <_ZN6String6concatEPKcj>
    4cc2:	0f 90       	pop	r0
    4cc4:	0f 90       	pop	r0
    4cc6:	cf 91       	pop	r28
    4cc8:	df 91       	pop	r29
    4cca:	08 95       	ret

00004ccc <_ZN6String6concatERKS_>:
    4ccc:	fb 01       	movw	r30, r22
    4cce:	60 81       	ld	r22, Z
    4cd0:	71 81       	ldd	r23, Z+1	; 0x01
    4cd2:	44 81       	ldd	r20, Z+4	; 0x04
    4cd4:	55 81       	ldd	r21, Z+5	; 0x05
    4cd6:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <_ZN6String6concatEPKcj>
    4cda:	08 95       	ret

00004cdc <_ZN6String10invalidateEv>:
    4cdc:	cf 93       	push	r28
    4cde:	df 93       	push	r29
    4ce0:	ec 01       	movw	r28, r24
    4ce2:	88 81       	ld	r24, Y
    4ce4:	99 81       	ldd	r25, Y+1	; 0x01
    4ce6:	00 97       	sbiw	r24, 0x00	; 0
    4ce8:	11 f0       	breq	.+4      	; 0x4cee <_ZN6String10invalidateEv+0x12>
    4cea:	0e 94 b3 2b 	call	0x5766	; 0x5766 <free>
    4cee:	19 82       	std	Y+1, r1	; 0x01
    4cf0:	18 82       	st	Y, r1
    4cf2:	1d 82       	std	Y+5, r1	; 0x05
    4cf4:	1c 82       	std	Y+4, r1	; 0x04
    4cf6:	1b 82       	std	Y+3, r1	; 0x03
    4cf8:	1a 82       	std	Y+2, r1	; 0x02
    4cfa:	df 91       	pop	r29
    4cfc:	cf 91       	pop	r28
    4cfe:	08 95       	ret

00004d00 <_ZplRK15StringSumHelperPKc>:
    4d00:	0f 93       	push	r16
    4d02:	1f 93       	push	r17
    4d04:	18 2f       	mov	r17, r24
    4d06:	09 2f       	mov	r16, r25
    4d08:	61 15       	cp	r22, r1
    4d0a:	71 05       	cpc	r23, r1
    4d0c:	61 f0       	breq	.+24     	; 0x4d26 <_ZplRK15StringSumHelperPKc+0x26>
    4d0e:	db 01       	movw	r26, r22
    4d10:	0d 90       	ld	r0, X+
    4d12:	00 20       	and	r0, r0
    4d14:	e9 f7       	brne	.-6      	; 0x4d10 <_ZplRK15StringSumHelperPKc+0x10>
    4d16:	11 97       	sbiw	r26, 0x01	; 1
    4d18:	a6 1b       	sub	r26, r22
    4d1a:	b7 0b       	sbc	r27, r23
    4d1c:	ad 01       	movw	r20, r26
    4d1e:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <_ZN6String6concatEPKcj>
    4d22:	88 23       	and	r24, r24
    4d24:	21 f4       	brne	.+8      	; 0x4d2e <_ZplRK15StringSumHelperPKc+0x2e>
    4d26:	81 2f       	mov	r24, r17
    4d28:	90 2f       	mov	r25, r16
    4d2a:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN6String10invalidateEv>
    4d2e:	81 2f       	mov	r24, r17
    4d30:	90 2f       	mov	r25, r16
    4d32:	1f 91       	pop	r17
    4d34:	0f 91       	pop	r16
    4d36:	08 95       	ret

00004d38 <_ZplRK15StringSumHelperRK6String>:
    4d38:	0f 93       	push	r16
    4d3a:	1f 93       	push	r17
    4d3c:	18 2f       	mov	r17, r24
    4d3e:	09 2f       	mov	r16, r25
    4d40:	fb 01       	movw	r30, r22
    4d42:	60 81       	ld	r22, Z
    4d44:	71 81       	ldd	r23, Z+1	; 0x01
    4d46:	44 81       	ldd	r20, Z+4	; 0x04
    4d48:	55 81       	ldd	r21, Z+5	; 0x05
    4d4a:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <_ZN6String6concatEPKcj>
    4d4e:	88 23       	and	r24, r24
    4d50:	21 f4       	brne	.+8      	; 0x4d5a <_ZplRK15StringSumHelperRK6String+0x22>
    4d52:	81 2f       	mov	r24, r17
    4d54:	90 2f       	mov	r25, r16
    4d56:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN6String10invalidateEv>
    4d5a:	81 2f       	mov	r24, r17
    4d5c:	90 2f       	mov	r25, r16
    4d5e:	1f 91       	pop	r17
    4d60:	0f 91       	pop	r16
    4d62:	08 95       	ret

00004d64 <_ZN6String4copyEPKcj>:
    4d64:	ef 92       	push	r14
    4d66:	ff 92       	push	r15
    4d68:	0f 93       	push	r16
    4d6a:	1f 93       	push	r17
    4d6c:	cf 93       	push	r28
    4d6e:	df 93       	push	r29
    4d70:	ec 01       	movw	r28, r24
    4d72:	7b 01       	movw	r14, r22
    4d74:	8a 01       	movw	r16, r20
    4d76:	ba 01       	movw	r22, r20
    4d78:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <_ZN6String7reserveEj>
    4d7c:	88 23       	and	r24, r24
    4d7e:	21 f4       	brne	.+8      	; 0x4d88 <_ZN6String4copyEPKcj+0x24>
    4d80:	ce 01       	movw	r24, r28
    4d82:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN6String10invalidateEv>
    4d86:	07 c0       	rjmp	.+14     	; 0x4d96 <_ZN6String4copyEPKcj+0x32>
    4d88:	1d 83       	std	Y+5, r17	; 0x05
    4d8a:	0c 83       	std	Y+4, r16	; 0x04
    4d8c:	88 81       	ld	r24, Y
    4d8e:	99 81       	ldd	r25, Y+1	; 0x01
    4d90:	b7 01       	movw	r22, r14
    4d92:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <strcpy>
    4d96:	ce 01       	movw	r24, r28
    4d98:	df 91       	pop	r29
    4d9a:	cf 91       	pop	r28
    4d9c:	1f 91       	pop	r17
    4d9e:	0f 91       	pop	r16
    4da0:	ff 90       	pop	r15
    4da2:	ef 90       	pop	r14
    4da4:	08 95       	ret

00004da6 <_ZN6StringC1EPKc>:
    4da6:	cf 93       	push	r28
    4da8:	df 93       	push	r29
    4daa:	ec 01       	movw	r28, r24
    4dac:	19 82       	std	Y+1, r1	; 0x01
    4dae:	18 82       	st	Y, r1
    4db0:	1b 82       	std	Y+3, r1	; 0x03
    4db2:	1a 82       	std	Y+2, r1	; 0x02
    4db4:	1d 82       	std	Y+5, r1	; 0x05
    4db6:	1c 82       	std	Y+4, r1	; 0x04
    4db8:	1e 82       	std	Y+6, r1	; 0x06
    4dba:	61 15       	cp	r22, r1
    4dbc:	71 05       	cpc	r23, r1
    4dbe:	51 f0       	breq	.+20     	; 0x4dd4 <_ZN6StringC1EPKc+0x2e>
    4dc0:	db 01       	movw	r26, r22
    4dc2:	0d 90       	ld	r0, X+
    4dc4:	00 20       	and	r0, r0
    4dc6:	e9 f7       	brne	.-6      	; 0x4dc2 <_ZN6StringC1EPKc+0x1c>
    4dc8:	11 97       	sbiw	r26, 0x01	; 1
    4dca:	a6 1b       	sub	r26, r22
    4dcc:	b7 0b       	sbc	r27, r23
    4dce:	ad 01       	movw	r20, r26
    4dd0:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <_ZN6String4copyEPKcj>
    4dd4:	df 91       	pop	r29
    4dd6:	cf 91       	pop	r28
    4dd8:	08 95       	ret

00004dda <_ZN6StringC2EPKc>:
    4dda:	cf 93       	push	r28
    4ddc:	df 93       	push	r29
    4dde:	ec 01       	movw	r28, r24
    4de0:	19 82       	std	Y+1, r1	; 0x01
    4de2:	18 82       	st	Y, r1
    4de4:	1b 82       	std	Y+3, r1	; 0x03
    4de6:	1a 82       	std	Y+2, r1	; 0x02
    4de8:	1d 82       	std	Y+5, r1	; 0x05
    4dea:	1c 82       	std	Y+4, r1	; 0x04
    4dec:	1e 82       	std	Y+6, r1	; 0x06
    4dee:	61 15       	cp	r22, r1
    4df0:	71 05       	cpc	r23, r1
    4df2:	51 f0       	breq	.+20     	; 0x4e08 <_ZN6StringC2EPKc+0x2e>
    4df4:	db 01       	movw	r26, r22
    4df6:	0d 90       	ld	r0, X+
    4df8:	00 20       	and	r0, r0
    4dfa:	e9 f7       	brne	.-6      	; 0x4df6 <_ZN6StringC2EPKc+0x1c>
    4dfc:	11 97       	sbiw	r26, 0x01	; 1
    4dfe:	a6 1b       	sub	r26, r22
    4e00:	b7 0b       	sbc	r27, r23
    4e02:	ad 01       	movw	r20, r26
    4e04:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <_ZN6String4copyEPKcj>
    4e08:	df 91       	pop	r29
    4e0a:	cf 91       	pop	r28
    4e0c:	08 95       	ret

00004e0e <_ZN6StringaSEPKc>:
    4e0e:	0f 93       	push	r16
    4e10:	1f 93       	push	r17
    4e12:	18 2f       	mov	r17, r24
    4e14:	09 2f       	mov	r16, r25
    4e16:	61 15       	cp	r22, r1
    4e18:	71 05       	cpc	r23, r1
    4e1a:	59 f0       	breq	.+22     	; 0x4e32 <_ZN6StringaSEPKc+0x24>
    4e1c:	db 01       	movw	r26, r22
    4e1e:	0d 90       	ld	r0, X+
    4e20:	00 20       	and	r0, r0
    4e22:	e9 f7       	brne	.-6      	; 0x4e1e <_ZN6StringaSEPKc+0x10>
    4e24:	11 97       	sbiw	r26, 0x01	; 1
    4e26:	a6 1b       	sub	r26, r22
    4e28:	b7 0b       	sbc	r27, r23
    4e2a:	ad 01       	movw	r20, r26
    4e2c:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <_ZN6String4copyEPKcj>
    4e30:	02 c0       	rjmp	.+4      	; 0x4e36 <_ZN6StringaSEPKc+0x28>
    4e32:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN6String10invalidateEv>
    4e36:	81 2f       	mov	r24, r17
    4e38:	90 2f       	mov	r25, r16
    4e3a:	1f 91       	pop	r17
    4e3c:	0f 91       	pop	r16
    4e3e:	08 95       	ret

00004e40 <_ZN6StringC1Eih>:
    4e40:	ef 92       	push	r14
    4e42:	ff 92       	push	r15
    4e44:	0f 93       	push	r16
    4e46:	1f 93       	push	r17
    4e48:	df 93       	push	r29
    4e4a:	cf 93       	push	r28
    4e4c:	cd b7       	in	r28, 0x3d	; 61
    4e4e:	de b7       	in	r29, 0x3e	; 62
    4e50:	62 97       	sbiw	r28, 0x12	; 18
    4e52:	0f b6       	in	r0, 0x3f	; 63
    4e54:	f8 94       	cli
    4e56:	de bf       	out	0x3e, r29	; 62
    4e58:	0f be       	out	0x3f, r0	; 63
    4e5a:	cd bf       	out	0x3d, r28	; 61
    4e5c:	8c 01       	movw	r16, r24
    4e5e:	cb 01       	movw	r24, r22
    4e60:	f8 01       	movw	r30, r16
    4e62:	11 82       	std	Z+1, r1	; 0x01
    4e64:	10 82       	st	Z, r1
    4e66:	13 82       	std	Z+3, r1	; 0x03
    4e68:	12 82       	std	Z+2, r1	; 0x02
    4e6a:	15 82       	std	Z+5, r1	; 0x05
    4e6c:	14 82       	std	Z+4, r1	; 0x04
    4e6e:	16 82       	std	Z+6, r1	; 0x06
    4e70:	7e 01       	movw	r14, r28
    4e72:	08 94       	sec
    4e74:	e1 1c       	adc	r14, r1
    4e76:	f1 1c       	adc	r15, r1
    4e78:	b7 01       	movw	r22, r14
    4e7a:	50 e0       	ldi	r21, 0x00	; 0
    4e7c:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <itoa>
    4e80:	c8 01       	movw	r24, r16
    4e82:	b7 01       	movw	r22, r14
    4e84:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <_ZN6StringaSEPKc>
    4e88:	62 96       	adiw	r28, 0x12	; 18
    4e8a:	0f b6       	in	r0, 0x3f	; 63
    4e8c:	f8 94       	cli
    4e8e:	de bf       	out	0x3e, r29	; 62
    4e90:	0f be       	out	0x3f, r0	; 63
    4e92:	cd bf       	out	0x3d, r28	; 61
    4e94:	cf 91       	pop	r28
    4e96:	df 91       	pop	r29
    4e98:	1f 91       	pop	r17
    4e9a:	0f 91       	pop	r16
    4e9c:	ff 90       	pop	r15
    4e9e:	ef 90       	pop	r14
    4ea0:	08 95       	ret

00004ea2 <_ZNK6String9substringEjj>:
    4ea2:	bf 92       	push	r11
    4ea4:	cf 92       	push	r12
    4ea6:	df 92       	push	r13
    4ea8:	ef 92       	push	r14
    4eaa:	ff 92       	push	r15
    4eac:	0f 93       	push	r16
    4eae:	1f 93       	push	r17
    4eb0:	cf 93       	push	r28
    4eb2:	df 93       	push	r29
    4eb4:	08 2f       	mov	r16, r24
    4eb6:	b9 2e       	mov	r11, r25
    4eb8:	6b 01       	movw	r12, r22
    4eba:	7a 01       	movw	r14, r20
    4ebc:	e9 01       	movw	r28, r18
    4ebe:	24 17       	cp	r18, r20
    4ec0:	35 07       	cpc	r19, r21
    4ec2:	10 f4       	brcc	.+4      	; 0x4ec8 <_ZNK6String9substringEjj+0x26>
    4ec4:	ea 01       	movw	r28, r20
    4ec6:	79 01       	movw	r14, r18
    4ec8:	80 2f       	mov	r24, r16
    4eca:	9b 2d       	mov	r25, r11
    4ecc:	61 ec       	ldi	r22, 0xC1	; 193
    4ece:	73 e0       	ldi	r23, 0x03	; 3
    4ed0:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN6StringC1EPKc>
    4ed4:	d6 01       	movw	r26, r12
    4ed6:	14 96       	adiw	r26, 0x04	; 4
    4ed8:	8d 91       	ld	r24, X+
    4eda:	9c 91       	ld	r25, X
    4edc:	15 97       	sbiw	r26, 0x05	; 5
    4ede:	8e 15       	cp	r24, r14
    4ee0:	9f 05       	cpc	r25, r15
    4ee2:	d0 f0       	brcs	.+52     	; 0x4f18 <_ZNK6String9substringEjj+0x76>
    4ee4:	8c 17       	cp	r24, r28
    4ee6:	9d 07       	cpc	r25, r29
    4ee8:	08 f4       	brcc	.+2      	; 0x4eec <_ZNK6String9substringEjj+0x4a>
    4eea:	ec 01       	movw	r28, r24
    4eec:	d6 01       	movw	r26, r12
    4eee:	ed 91       	ld	r30, X+
    4ef0:	fc 91       	ld	r31, X
    4ef2:	11 97       	sbiw	r26, 0x01	; 1
    4ef4:	ec 0f       	add	r30, r28
    4ef6:	fd 1f       	adc	r31, r29
    4ef8:	10 81       	ld	r17, Z
    4efa:	10 82       	st	Z, r1
    4efc:	6d 91       	ld	r22, X+
    4efe:	7c 91       	ld	r23, X
    4f00:	6e 0d       	add	r22, r14
    4f02:	7f 1d       	adc	r23, r15
    4f04:	80 2f       	mov	r24, r16
    4f06:	9b 2d       	mov	r25, r11
    4f08:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <_ZN6StringaSEPKc>
    4f0c:	d6 01       	movw	r26, r12
    4f0e:	ed 91       	ld	r30, X+
    4f10:	fc 91       	ld	r31, X
    4f12:	ec 0f       	add	r30, r28
    4f14:	fd 1f       	adc	r31, r29
    4f16:	10 83       	st	Z, r17
    4f18:	80 2f       	mov	r24, r16
    4f1a:	9b 2d       	mov	r25, r11
    4f1c:	df 91       	pop	r29
    4f1e:	cf 91       	pop	r28
    4f20:	1f 91       	pop	r17
    4f22:	0f 91       	pop	r16
    4f24:	ff 90       	pop	r15
    4f26:	ef 90       	pop	r14
    4f28:	df 90       	pop	r13
    4f2a:	cf 90       	pop	r12
    4f2c:	bf 90       	pop	r11
    4f2e:	08 95       	ret

00004f30 <_ZN6StringaSERKS_>:
    4f30:	cf 93       	push	r28
    4f32:	df 93       	push	r29
    4f34:	ec 01       	movw	r28, r24
    4f36:	fb 01       	movw	r30, r22
    4f38:	86 17       	cp	r24, r22
    4f3a:	97 07       	cpc	r25, r23
    4f3c:	61 f0       	breq	.+24     	; 0x4f56 <_ZN6StringaSERKS_+0x26>
    4f3e:	60 81       	ld	r22, Z
    4f40:	71 81       	ldd	r23, Z+1	; 0x01
    4f42:	61 15       	cp	r22, r1
    4f44:	71 05       	cpc	r23, r1
    4f46:	29 f0       	breq	.+10     	; 0x4f52 <_ZN6StringaSERKS_+0x22>
    4f48:	44 81       	ldd	r20, Z+4	; 0x04
    4f4a:	55 81       	ldd	r21, Z+5	; 0x05
    4f4c:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <_ZN6String4copyEPKcj>
    4f50:	02 c0       	rjmp	.+4      	; 0x4f56 <_ZN6StringaSERKS_+0x26>
    4f52:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN6String10invalidateEv>
    4f56:	ce 01       	movw	r24, r28
    4f58:	df 91       	pop	r29
    4f5a:	cf 91       	pop	r28
    4f5c:	08 95       	ret

00004f5e <_ZN6StringC1ERKS_>:
    4f5e:	fc 01       	movw	r30, r24
    4f60:	11 82       	std	Z+1, r1	; 0x01
    4f62:	10 82       	st	Z, r1
    4f64:	13 82       	std	Z+3, r1	; 0x03
    4f66:	12 82       	std	Z+2, r1	; 0x02
    4f68:	15 82       	std	Z+5, r1	; 0x05
    4f6a:	14 82       	std	Z+4, r1	; 0x04
    4f6c:	16 82       	std	Z+6, r1	; 0x06
    4f6e:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN6StringaSERKS_>
    4f72:	08 95       	ret

00004f74 <_ZN6StringC2ERKS_>:
    4f74:	fc 01       	movw	r30, r24
    4f76:	11 82       	std	Z+1, r1	; 0x01
    4f78:	10 82       	st	Z, r1
    4f7a:	13 82       	std	Z+3, r1	; 0x03
    4f7c:	12 82       	std	Z+2, r1	; 0x02
    4f7e:	15 82       	std	Z+5, r1	; 0x05
    4f80:	14 82       	std	Z+4, r1	; 0x04
    4f82:	16 82       	std	Z+6, r1	; 0x06
    4f84:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_ZN6StringaSERKS_>
    4f88:	08 95       	ret

00004f8a <_ZN6StringD1Ev>:
    4f8a:	fc 01       	movw	r30, r24
    4f8c:	80 81       	ld	r24, Z
    4f8e:	91 81       	ldd	r25, Z+1	; 0x01
    4f90:	0e 94 b3 2b 	call	0x5766	; 0x5766 <free>
    4f94:	08 95       	ret

00004f96 <_ZN6StringD2Ev>:
    4f96:	fc 01       	movw	r30, r24
    4f98:	80 81       	ld	r24, Z
    4f9a:	91 81       	ldd	r25, Z+1	; 0x01
    4f9c:	0e 94 b3 2b 	call	0x5766	; 0x5766 <free>
    4fa0:	08 95       	ret

00004fa2 <_GLOBAL__sub_I__ZN12ClockMethods6clockHE>:
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
    4fa4:	90 e0       	ldi	r25, 0x00	; 0
    4fa6:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <_Z41__static_initialization_and_destruction_0ii.constprop.2>
    4faa:	08 95       	ret

00004fac <_GLOBAL__sub_D__ZN12ClockMethods6clockHE>:
    4fac:	80 e0       	ldi	r24, 0x00	; 0
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <_Z41__static_initialization_and_destruction_0ii.constprop.2>
    4fb4:	08 95       	ret

00004fb6 <pinMode>:
    4fb6:	cf 93       	push	r28
    4fb8:	df 93       	push	r29
    4fba:	48 2f       	mov	r20, r24
    4fbc:	50 e0       	ldi	r21, 0x00	; 0
    4fbe:	ca 01       	movw	r24, r20
    4fc0:	88 51       	subi	r24, 0x18	; 24
    4fc2:	9e 4f       	sbci	r25, 0xFE	; 254
    4fc4:	fc 01       	movw	r30, r24
    4fc6:	34 91       	lpm	r19, Z
    4fc8:	4c 52       	subi	r20, 0x2C	; 44
    4fca:	5e 4f       	sbci	r21, 0xFE	; 254
    4fcc:	fa 01       	movw	r30, r20
    4fce:	84 91       	lpm	r24, Z
    4fd0:	88 23       	and	r24, r24
    4fd2:	69 f1       	breq	.+90     	; 0x502e <pinMode+0x78>
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	88 0f       	add	r24, r24
    4fd8:	99 1f       	adc	r25, r25
    4fda:	fc 01       	movw	r30, r24
    4fdc:	ea 54       	subi	r30, 0x4A	; 74
    4fde:	fe 4f       	sbci	r31, 0xFE	; 254
    4fe0:	a5 91       	lpm	r26, Z+
    4fe2:	b4 91       	lpm	r27, Z
    4fe4:	fc 01       	movw	r30, r24
    4fe6:	e0 54       	subi	r30, 0x40	; 64
    4fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    4fea:	c5 91       	lpm	r28, Z+
    4fec:	d4 91       	lpm	r29, Z
    4fee:	66 23       	and	r22, r22
    4ff0:	51 f4       	brne	.+20     	; 0x5006 <pinMode+0x50>
    4ff2:	2f b7       	in	r18, 0x3f	; 63
    4ff4:	f8 94       	cli
    4ff6:	8c 91       	ld	r24, X
    4ff8:	93 2f       	mov	r25, r19
    4ffa:	90 95       	com	r25
    4ffc:	89 23       	and	r24, r25
    4ffe:	8c 93       	st	X, r24
    5000:	88 81       	ld	r24, Y
    5002:	89 23       	and	r24, r25
    5004:	0b c0       	rjmp	.+22     	; 0x501c <pinMode+0x66>
    5006:	62 30       	cpi	r22, 0x02	; 2
    5008:	61 f4       	brne	.+24     	; 0x5022 <pinMode+0x6c>
    500a:	2f b7       	in	r18, 0x3f	; 63
    500c:	f8 94       	cli
    500e:	8c 91       	ld	r24, X
    5010:	93 2f       	mov	r25, r19
    5012:	90 95       	com	r25
    5014:	89 23       	and	r24, r25
    5016:	8c 93       	st	X, r24
    5018:	88 81       	ld	r24, Y
    501a:	83 2b       	or	r24, r19
    501c:	88 83       	st	Y, r24
    501e:	2f bf       	out	0x3f, r18	; 63
    5020:	06 c0       	rjmp	.+12     	; 0x502e <pinMode+0x78>
    5022:	9f b7       	in	r25, 0x3f	; 63
    5024:	f8 94       	cli
    5026:	8c 91       	ld	r24, X
    5028:	83 2b       	or	r24, r19
    502a:	8c 93       	st	X, r24
    502c:	9f bf       	out	0x3f, r25	; 63
    502e:	df 91       	pop	r29
    5030:	cf 91       	pop	r28
    5032:	08 95       	ret

00005034 <digitalWrite>:
    5034:	48 2f       	mov	r20, r24
    5036:	50 e0       	ldi	r21, 0x00	; 0
    5038:	ca 01       	movw	r24, r20
    503a:	84 50       	subi	r24, 0x04	; 4
    503c:	9e 4f       	sbci	r25, 0xFE	; 254
    503e:	fc 01       	movw	r30, r24
    5040:	24 91       	lpm	r18, Z
    5042:	ca 01       	movw	r24, r20
    5044:	88 51       	subi	r24, 0x18	; 24
    5046:	9e 4f       	sbci	r25, 0xFE	; 254
    5048:	fc 01       	movw	r30, r24
    504a:	94 91       	lpm	r25, Z
    504c:	4c 52       	subi	r20, 0x2C	; 44
    504e:	5e 4f       	sbci	r21, 0xFE	; 254
    5050:	fa 01       	movw	r30, r20
    5052:	34 91       	lpm	r19, Z
    5054:	33 23       	and	r19, r19
    5056:	09 f4       	brne	.+2      	; 0x505a <digitalWrite+0x26>
    5058:	40 c0       	rjmp	.+128    	; 0x50da <digitalWrite+0xa6>
    505a:	22 23       	and	r18, r18
    505c:	51 f1       	breq	.+84     	; 0x50b2 <digitalWrite+0x7e>
    505e:	23 30       	cpi	r18, 0x03	; 3
    5060:	71 f0       	breq	.+28     	; 0x507e <digitalWrite+0x4a>
    5062:	24 30       	cpi	r18, 0x04	; 4
    5064:	28 f4       	brcc	.+10     	; 0x5070 <digitalWrite+0x3c>
    5066:	21 30       	cpi	r18, 0x01	; 1
    5068:	a1 f0       	breq	.+40     	; 0x5092 <digitalWrite+0x5e>
    506a:	22 30       	cpi	r18, 0x02	; 2
    506c:	11 f5       	brne	.+68     	; 0x50b2 <digitalWrite+0x7e>
    506e:	14 c0       	rjmp	.+40     	; 0x5098 <digitalWrite+0x64>
    5070:	26 30       	cpi	r18, 0x06	; 6
    5072:	b1 f0       	breq	.+44     	; 0x50a0 <digitalWrite+0x6c>
    5074:	27 30       	cpi	r18, 0x07	; 7
    5076:	c1 f0       	breq	.+48     	; 0x50a8 <digitalWrite+0x74>
    5078:	24 30       	cpi	r18, 0x04	; 4
    507a:	d9 f4       	brne	.+54     	; 0x50b2 <digitalWrite+0x7e>
    507c:	04 c0       	rjmp	.+8      	; 0x5086 <digitalWrite+0x52>
    507e:	80 91 80 00 	lds	r24, 0x0080
    5082:	8f 77       	andi	r24, 0x7F	; 127
    5084:	03 c0       	rjmp	.+6      	; 0x508c <digitalWrite+0x58>
    5086:	80 91 80 00 	lds	r24, 0x0080
    508a:	8f 7d       	andi	r24, 0xDF	; 223
    508c:	80 93 80 00 	sts	0x0080, r24
    5090:	10 c0       	rjmp	.+32     	; 0x50b2 <digitalWrite+0x7e>
    5092:	84 b5       	in	r24, 0x24	; 36
    5094:	8f 77       	andi	r24, 0x7F	; 127
    5096:	02 c0       	rjmp	.+4      	; 0x509c <digitalWrite+0x68>
    5098:	84 b5       	in	r24, 0x24	; 36
    509a:	8f 7d       	andi	r24, 0xDF	; 223
    509c:	84 bd       	out	0x24, r24	; 36
    509e:	09 c0       	rjmp	.+18     	; 0x50b2 <digitalWrite+0x7e>
    50a0:	80 91 b0 00 	lds	r24, 0x00B0
    50a4:	8f 77       	andi	r24, 0x7F	; 127
    50a6:	03 c0       	rjmp	.+6      	; 0x50ae <digitalWrite+0x7a>
    50a8:	80 91 b0 00 	lds	r24, 0x00B0
    50ac:	8f 7d       	andi	r24, 0xDF	; 223
    50ae:	80 93 b0 00 	sts	0x00B0, r24
    50b2:	e3 2f       	mov	r30, r19
    50b4:	f0 e0       	ldi	r31, 0x00	; 0
    50b6:	ee 0f       	add	r30, r30
    50b8:	ff 1f       	adc	r31, r31
    50ba:	e0 54       	subi	r30, 0x40	; 64
    50bc:	fe 4f       	sbci	r31, 0xFE	; 254
    50be:	a5 91       	lpm	r26, Z+
    50c0:	b4 91       	lpm	r27, Z
    50c2:	2f b7       	in	r18, 0x3f	; 63
    50c4:	f8 94       	cli
    50c6:	66 23       	and	r22, r22
    50c8:	21 f4       	brne	.+8      	; 0x50d2 <digitalWrite+0x9e>
    50ca:	8c 91       	ld	r24, X
    50cc:	90 95       	com	r25
    50ce:	89 23       	and	r24, r25
    50d0:	02 c0       	rjmp	.+4      	; 0x50d6 <digitalWrite+0xa2>
    50d2:	8c 91       	ld	r24, X
    50d4:	89 2b       	or	r24, r25
    50d6:	8c 93       	st	X, r24
    50d8:	2f bf       	out	0x3f, r18	; 63
    50da:	08 95       	ret

000050dc <__subsf3>:
    50dc:	50 58       	subi	r21, 0x80	; 128

000050de <__addsf3>:
    50de:	bb 27       	eor	r27, r27
    50e0:	aa 27       	eor	r26, r26
    50e2:	0e d0       	rcall	.+28     	; 0x5100 <__addsf3x>
    50e4:	75 c1       	rjmp	.+746    	; 0x53d0 <__fp_round>
    50e6:	66 d1       	rcall	.+716    	; 0x53b4 <__fp_pscA>
    50e8:	30 f0       	brcs	.+12     	; 0x50f6 <__addsf3+0x18>
    50ea:	6b d1       	rcall	.+726    	; 0x53c2 <__fp_pscB>
    50ec:	20 f0       	brcs	.+8      	; 0x50f6 <__addsf3+0x18>
    50ee:	31 f4       	brne	.+12     	; 0x50fc <__addsf3+0x1e>
    50f0:	9f 3f       	cpi	r25, 0xFF	; 255
    50f2:	11 f4       	brne	.+4      	; 0x50f8 <__addsf3+0x1a>
    50f4:	1e f4       	brtc	.+6      	; 0x50fc <__addsf3+0x1e>
    50f6:	5b c1       	rjmp	.+694    	; 0x53ae <__fp_nan>
    50f8:	0e f4       	brtc	.+2      	; 0x50fc <__addsf3+0x1e>
    50fa:	e0 95       	com	r30
    50fc:	e7 fb       	bst	r30, 7
    50fe:	51 c1       	rjmp	.+674    	; 0x53a2 <__fp_inf>

00005100 <__addsf3x>:
    5100:	e9 2f       	mov	r30, r25
    5102:	77 d1       	rcall	.+750    	; 0x53f2 <__fp_split3>
    5104:	80 f3       	brcs	.-32     	; 0x50e6 <__addsf3+0x8>
    5106:	ba 17       	cp	r27, r26
    5108:	62 07       	cpc	r22, r18
    510a:	73 07       	cpc	r23, r19
    510c:	84 07       	cpc	r24, r20
    510e:	95 07       	cpc	r25, r21
    5110:	18 f0       	brcs	.+6      	; 0x5118 <__addsf3x+0x18>
    5112:	71 f4       	brne	.+28     	; 0x5130 <__addsf3x+0x30>
    5114:	9e f5       	brtc	.+102    	; 0x517c <__addsf3x+0x7c>
    5116:	8f c1       	rjmp	.+798    	; 0x5436 <__fp_zero>
    5118:	0e f4       	brtc	.+2      	; 0x511c <__addsf3x+0x1c>
    511a:	e0 95       	com	r30
    511c:	0b 2e       	mov	r0, r27
    511e:	ba 2f       	mov	r27, r26
    5120:	a0 2d       	mov	r26, r0
    5122:	0b 01       	movw	r0, r22
    5124:	b9 01       	movw	r22, r18
    5126:	90 01       	movw	r18, r0
    5128:	0c 01       	movw	r0, r24
    512a:	ca 01       	movw	r24, r20
    512c:	a0 01       	movw	r20, r0
    512e:	11 24       	eor	r1, r1
    5130:	ff 27       	eor	r31, r31
    5132:	59 1b       	sub	r21, r25
    5134:	99 f0       	breq	.+38     	; 0x515c <__addsf3x+0x5c>
    5136:	59 3f       	cpi	r21, 0xF9	; 249
    5138:	50 f4       	brcc	.+20     	; 0x514e <__addsf3x+0x4e>
    513a:	50 3e       	cpi	r21, 0xE0	; 224
    513c:	68 f1       	brcs	.+90     	; 0x5198 <__addsf3x+0x98>
    513e:	1a 16       	cp	r1, r26
    5140:	f0 40       	sbci	r31, 0x00	; 0
    5142:	a2 2f       	mov	r26, r18
    5144:	23 2f       	mov	r18, r19
    5146:	34 2f       	mov	r19, r20
    5148:	44 27       	eor	r20, r20
    514a:	58 5f       	subi	r21, 0xF8	; 248
    514c:	f3 cf       	rjmp	.-26     	; 0x5134 <__addsf3x+0x34>
    514e:	46 95       	lsr	r20
    5150:	37 95       	ror	r19
    5152:	27 95       	ror	r18
    5154:	a7 95       	ror	r26
    5156:	f0 40       	sbci	r31, 0x00	; 0
    5158:	53 95       	inc	r21
    515a:	c9 f7       	brne	.-14     	; 0x514e <__addsf3x+0x4e>
    515c:	7e f4       	brtc	.+30     	; 0x517c <__addsf3x+0x7c>
    515e:	1f 16       	cp	r1, r31
    5160:	ba 0b       	sbc	r27, r26
    5162:	62 0b       	sbc	r22, r18
    5164:	73 0b       	sbc	r23, r19
    5166:	84 0b       	sbc	r24, r20
    5168:	ba f0       	brmi	.+46     	; 0x5198 <__addsf3x+0x98>
    516a:	91 50       	subi	r25, 0x01	; 1
    516c:	a1 f0       	breq	.+40     	; 0x5196 <__addsf3x+0x96>
    516e:	ff 0f       	add	r31, r31
    5170:	bb 1f       	adc	r27, r27
    5172:	66 1f       	adc	r22, r22
    5174:	77 1f       	adc	r23, r23
    5176:	88 1f       	adc	r24, r24
    5178:	c2 f7       	brpl	.-16     	; 0x516a <__addsf3x+0x6a>
    517a:	0e c0       	rjmp	.+28     	; 0x5198 <__addsf3x+0x98>
    517c:	ba 0f       	add	r27, r26
    517e:	62 1f       	adc	r22, r18
    5180:	73 1f       	adc	r23, r19
    5182:	84 1f       	adc	r24, r20
    5184:	48 f4       	brcc	.+18     	; 0x5198 <__addsf3x+0x98>
    5186:	87 95       	ror	r24
    5188:	77 95       	ror	r23
    518a:	67 95       	ror	r22
    518c:	b7 95       	ror	r27
    518e:	f7 95       	ror	r31
    5190:	9e 3f       	cpi	r25, 0xFE	; 254
    5192:	08 f0       	brcs	.+2      	; 0x5196 <__addsf3x+0x96>
    5194:	b3 cf       	rjmp	.-154    	; 0x50fc <__addsf3+0x1e>
    5196:	93 95       	inc	r25
    5198:	88 0f       	add	r24, r24
    519a:	08 f0       	brcs	.+2      	; 0x519e <__addsf3x+0x9e>
    519c:	99 27       	eor	r25, r25
    519e:	ee 0f       	add	r30, r30
    51a0:	97 95       	ror	r25
    51a2:	87 95       	ror	r24
    51a4:	08 95       	ret

000051a6 <__cmpsf2>:
    51a6:	d9 d0       	rcall	.+434    	; 0x535a <__fp_cmp>
    51a8:	08 f4       	brcc	.+2      	; 0x51ac <__cmpsf2+0x6>
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	08 95       	ret

000051ae <__divsf3>:
    51ae:	0c d0       	rcall	.+24     	; 0x51c8 <__divsf3x>
    51b0:	0f c1       	rjmp	.+542    	; 0x53d0 <__fp_round>
    51b2:	07 d1       	rcall	.+526    	; 0x53c2 <__fp_pscB>
    51b4:	40 f0       	brcs	.+16     	; 0x51c6 <__divsf3+0x18>
    51b6:	fe d0       	rcall	.+508    	; 0x53b4 <__fp_pscA>
    51b8:	30 f0       	brcs	.+12     	; 0x51c6 <__divsf3+0x18>
    51ba:	21 f4       	brne	.+8      	; 0x51c4 <__divsf3+0x16>
    51bc:	5f 3f       	cpi	r21, 0xFF	; 255
    51be:	19 f0       	breq	.+6      	; 0x51c6 <__divsf3+0x18>
    51c0:	f0 c0       	rjmp	.+480    	; 0x53a2 <__fp_inf>
    51c2:	51 11       	cpse	r21, r1
    51c4:	39 c1       	rjmp	.+626    	; 0x5438 <__fp_szero>
    51c6:	f3 c0       	rjmp	.+486    	; 0x53ae <__fp_nan>

000051c8 <__divsf3x>:
    51c8:	14 d1       	rcall	.+552    	; 0x53f2 <__fp_split3>
    51ca:	98 f3       	brcs	.-26     	; 0x51b2 <__divsf3+0x4>

000051cc <__divsf3_pse>:
    51cc:	99 23       	and	r25, r25
    51ce:	c9 f3       	breq	.-14     	; 0x51c2 <__divsf3+0x14>
    51d0:	55 23       	and	r21, r21
    51d2:	b1 f3       	breq	.-20     	; 0x51c0 <__divsf3+0x12>
    51d4:	95 1b       	sub	r25, r21
    51d6:	55 0b       	sbc	r21, r21
    51d8:	bb 27       	eor	r27, r27
    51da:	aa 27       	eor	r26, r26
    51dc:	62 17       	cp	r22, r18
    51de:	73 07       	cpc	r23, r19
    51e0:	84 07       	cpc	r24, r20
    51e2:	38 f0       	brcs	.+14     	; 0x51f2 <__divsf3_pse+0x26>
    51e4:	9f 5f       	subi	r25, 0xFF	; 255
    51e6:	5f 4f       	sbci	r21, 0xFF	; 255
    51e8:	22 0f       	add	r18, r18
    51ea:	33 1f       	adc	r19, r19
    51ec:	44 1f       	adc	r20, r20
    51ee:	aa 1f       	adc	r26, r26
    51f0:	a9 f3       	breq	.-22     	; 0x51dc <__divsf3_pse+0x10>
    51f2:	33 d0       	rcall	.+102    	; 0x525a <__divsf3_pse+0x8e>
    51f4:	0e 2e       	mov	r0, r30
    51f6:	3a f0       	brmi	.+14     	; 0x5206 <__divsf3_pse+0x3a>
    51f8:	e0 e8       	ldi	r30, 0x80	; 128
    51fa:	30 d0       	rcall	.+96     	; 0x525c <__divsf3_pse+0x90>
    51fc:	91 50       	subi	r25, 0x01	; 1
    51fe:	50 40       	sbci	r21, 0x00	; 0
    5200:	e6 95       	lsr	r30
    5202:	00 1c       	adc	r0, r0
    5204:	ca f7       	brpl	.-14     	; 0x51f8 <__divsf3_pse+0x2c>
    5206:	29 d0       	rcall	.+82     	; 0x525a <__divsf3_pse+0x8e>
    5208:	fe 2f       	mov	r31, r30
    520a:	27 d0       	rcall	.+78     	; 0x525a <__divsf3_pse+0x8e>
    520c:	66 0f       	add	r22, r22
    520e:	77 1f       	adc	r23, r23
    5210:	88 1f       	adc	r24, r24
    5212:	bb 1f       	adc	r27, r27
    5214:	26 17       	cp	r18, r22
    5216:	37 07       	cpc	r19, r23
    5218:	48 07       	cpc	r20, r24
    521a:	ab 07       	cpc	r26, r27
    521c:	b0 e8       	ldi	r27, 0x80	; 128
    521e:	09 f0       	breq	.+2      	; 0x5222 <__divsf3_pse+0x56>
    5220:	bb 0b       	sbc	r27, r27
    5222:	80 2d       	mov	r24, r0
    5224:	bf 01       	movw	r22, r30
    5226:	ff 27       	eor	r31, r31
    5228:	93 58       	subi	r25, 0x83	; 131
    522a:	5f 4f       	sbci	r21, 0xFF	; 255
    522c:	2a f0       	brmi	.+10     	; 0x5238 <__divsf3_pse+0x6c>
    522e:	9e 3f       	cpi	r25, 0xFE	; 254
    5230:	51 05       	cpc	r21, r1
    5232:	68 f0       	brcs	.+26     	; 0x524e <__divsf3_pse+0x82>
    5234:	b6 c0       	rjmp	.+364    	; 0x53a2 <__fp_inf>
    5236:	00 c1       	rjmp	.+512    	; 0x5438 <__fp_szero>
    5238:	5f 3f       	cpi	r21, 0xFF	; 255
    523a:	ec f3       	brlt	.-6      	; 0x5236 <__divsf3_pse+0x6a>
    523c:	98 3e       	cpi	r25, 0xE8	; 232
    523e:	dc f3       	brlt	.-10     	; 0x5236 <__divsf3_pse+0x6a>
    5240:	86 95       	lsr	r24
    5242:	77 95       	ror	r23
    5244:	67 95       	ror	r22
    5246:	b7 95       	ror	r27
    5248:	f7 95       	ror	r31
    524a:	9f 5f       	subi	r25, 0xFF	; 255
    524c:	c9 f7       	brne	.-14     	; 0x5240 <__divsf3_pse+0x74>
    524e:	88 0f       	add	r24, r24
    5250:	91 1d       	adc	r25, r1
    5252:	96 95       	lsr	r25
    5254:	87 95       	ror	r24
    5256:	97 f9       	bld	r25, 7
    5258:	08 95       	ret
    525a:	e1 e0       	ldi	r30, 0x01	; 1
    525c:	66 0f       	add	r22, r22
    525e:	77 1f       	adc	r23, r23
    5260:	88 1f       	adc	r24, r24
    5262:	bb 1f       	adc	r27, r27
    5264:	62 17       	cp	r22, r18
    5266:	73 07       	cpc	r23, r19
    5268:	84 07       	cpc	r24, r20
    526a:	ba 07       	cpc	r27, r26
    526c:	20 f0       	brcs	.+8      	; 0x5276 <__divsf3_pse+0xaa>
    526e:	62 1b       	sub	r22, r18
    5270:	73 0b       	sbc	r23, r19
    5272:	84 0b       	sbc	r24, r20
    5274:	ba 0b       	sbc	r27, r26
    5276:	ee 1f       	adc	r30, r30
    5278:	88 f7       	brcc	.-30     	; 0x525c <__divsf3_pse+0x90>
    527a:	e0 95       	com	r30
    527c:	08 95       	ret

0000527e <__fixsfsi>:
    527e:	04 d0       	rcall	.+8      	; 0x5288 <__fixunssfsi>
    5280:	68 94       	set
    5282:	b1 11       	cpse	r27, r1
    5284:	d9 c0       	rjmp	.+434    	; 0x5438 <__fp_szero>
    5286:	08 95       	ret

00005288 <__fixunssfsi>:
    5288:	bc d0       	rcall	.+376    	; 0x5402 <__fp_splitA>
    528a:	88 f0       	brcs	.+34     	; 0x52ae <__fixunssfsi+0x26>
    528c:	9f 57       	subi	r25, 0x7F	; 127
    528e:	90 f0       	brcs	.+36     	; 0x52b4 <__fixunssfsi+0x2c>
    5290:	b9 2f       	mov	r27, r25
    5292:	99 27       	eor	r25, r25
    5294:	b7 51       	subi	r27, 0x17	; 23
    5296:	a0 f0       	brcs	.+40     	; 0x52c0 <__fixunssfsi+0x38>
    5298:	d1 f0       	breq	.+52     	; 0x52ce <__fixunssfsi+0x46>
    529a:	66 0f       	add	r22, r22
    529c:	77 1f       	adc	r23, r23
    529e:	88 1f       	adc	r24, r24
    52a0:	99 1f       	adc	r25, r25
    52a2:	1a f0       	brmi	.+6      	; 0x52aa <__fixunssfsi+0x22>
    52a4:	ba 95       	dec	r27
    52a6:	c9 f7       	brne	.-14     	; 0x529a <__fixunssfsi+0x12>
    52a8:	12 c0       	rjmp	.+36     	; 0x52ce <__fixunssfsi+0x46>
    52aa:	b1 30       	cpi	r27, 0x01	; 1
    52ac:	81 f0       	breq	.+32     	; 0x52ce <__fixunssfsi+0x46>
    52ae:	c3 d0       	rcall	.+390    	; 0x5436 <__fp_zero>
    52b0:	b1 e0       	ldi	r27, 0x01	; 1
    52b2:	08 95       	ret
    52b4:	c0 c0       	rjmp	.+384    	; 0x5436 <__fp_zero>
    52b6:	67 2f       	mov	r22, r23
    52b8:	78 2f       	mov	r23, r24
    52ba:	88 27       	eor	r24, r24
    52bc:	b8 5f       	subi	r27, 0xF8	; 248
    52be:	39 f0       	breq	.+14     	; 0x52ce <__fixunssfsi+0x46>
    52c0:	b9 3f       	cpi	r27, 0xF9	; 249
    52c2:	cc f3       	brlt	.-14     	; 0x52b6 <__fixunssfsi+0x2e>
    52c4:	86 95       	lsr	r24
    52c6:	77 95       	ror	r23
    52c8:	67 95       	ror	r22
    52ca:	b3 95       	inc	r27
    52cc:	d9 f7       	brne	.-10     	; 0x52c4 <__fixunssfsi+0x3c>
    52ce:	3e f4       	brtc	.+14     	; 0x52de <__fixunssfsi+0x56>
    52d0:	90 95       	com	r25
    52d2:	80 95       	com	r24
    52d4:	70 95       	com	r23
    52d6:	61 95       	neg	r22
    52d8:	7f 4f       	sbci	r23, 0xFF	; 255
    52da:	8f 4f       	sbci	r24, 0xFF	; 255
    52dc:	9f 4f       	sbci	r25, 0xFF	; 255
    52de:	08 95       	ret

000052e0 <__floatunsisf>:
    52e0:	e8 94       	clt
    52e2:	09 c0       	rjmp	.+18     	; 0x52f6 <__floatsisf+0x12>

000052e4 <__floatsisf>:
    52e4:	97 fb       	bst	r25, 7
    52e6:	3e f4       	brtc	.+14     	; 0x52f6 <__floatsisf+0x12>
    52e8:	90 95       	com	r25
    52ea:	80 95       	com	r24
    52ec:	70 95       	com	r23
    52ee:	61 95       	neg	r22
    52f0:	7f 4f       	sbci	r23, 0xFF	; 255
    52f2:	8f 4f       	sbci	r24, 0xFF	; 255
    52f4:	9f 4f       	sbci	r25, 0xFF	; 255
    52f6:	99 23       	and	r25, r25
    52f8:	a9 f0       	breq	.+42     	; 0x5324 <__floatsisf+0x40>
    52fa:	f9 2f       	mov	r31, r25
    52fc:	96 e9       	ldi	r25, 0x96	; 150
    52fe:	bb 27       	eor	r27, r27
    5300:	93 95       	inc	r25
    5302:	f6 95       	lsr	r31
    5304:	87 95       	ror	r24
    5306:	77 95       	ror	r23
    5308:	67 95       	ror	r22
    530a:	b7 95       	ror	r27
    530c:	f1 11       	cpse	r31, r1
    530e:	f8 cf       	rjmp	.-16     	; 0x5300 <__floatsisf+0x1c>
    5310:	fa f4       	brpl	.+62     	; 0x5350 <__floatsisf+0x6c>
    5312:	bb 0f       	add	r27, r27
    5314:	11 f4       	brne	.+4      	; 0x531a <__floatsisf+0x36>
    5316:	60 ff       	sbrs	r22, 0
    5318:	1b c0       	rjmp	.+54     	; 0x5350 <__floatsisf+0x6c>
    531a:	6f 5f       	subi	r22, 0xFF	; 255
    531c:	7f 4f       	sbci	r23, 0xFF	; 255
    531e:	8f 4f       	sbci	r24, 0xFF	; 255
    5320:	9f 4f       	sbci	r25, 0xFF	; 255
    5322:	16 c0       	rjmp	.+44     	; 0x5350 <__floatsisf+0x6c>
    5324:	88 23       	and	r24, r24
    5326:	11 f0       	breq	.+4      	; 0x532c <__floatsisf+0x48>
    5328:	96 e9       	ldi	r25, 0x96	; 150
    532a:	11 c0       	rjmp	.+34     	; 0x534e <__floatsisf+0x6a>
    532c:	77 23       	and	r23, r23
    532e:	21 f0       	breq	.+8      	; 0x5338 <__floatsisf+0x54>
    5330:	9e e8       	ldi	r25, 0x8E	; 142
    5332:	87 2f       	mov	r24, r23
    5334:	76 2f       	mov	r23, r22
    5336:	05 c0       	rjmp	.+10     	; 0x5342 <__floatsisf+0x5e>
    5338:	66 23       	and	r22, r22
    533a:	71 f0       	breq	.+28     	; 0x5358 <__floatsisf+0x74>
    533c:	96 e8       	ldi	r25, 0x86	; 134
    533e:	86 2f       	mov	r24, r22
    5340:	70 e0       	ldi	r23, 0x00	; 0
    5342:	60 e0       	ldi	r22, 0x00	; 0
    5344:	2a f0       	brmi	.+10     	; 0x5350 <__floatsisf+0x6c>
    5346:	9a 95       	dec	r25
    5348:	66 0f       	add	r22, r22
    534a:	77 1f       	adc	r23, r23
    534c:	88 1f       	adc	r24, r24
    534e:	da f7       	brpl	.-10     	; 0x5346 <__floatsisf+0x62>
    5350:	88 0f       	add	r24, r24
    5352:	96 95       	lsr	r25
    5354:	87 95       	ror	r24
    5356:	97 f9       	bld	r25, 7
    5358:	08 95       	ret

0000535a <__fp_cmp>:
    535a:	99 0f       	add	r25, r25
    535c:	00 08       	sbc	r0, r0
    535e:	55 0f       	add	r21, r21
    5360:	aa 0b       	sbc	r26, r26
    5362:	e0 e8       	ldi	r30, 0x80	; 128
    5364:	fe ef       	ldi	r31, 0xFE	; 254
    5366:	16 16       	cp	r1, r22
    5368:	17 06       	cpc	r1, r23
    536a:	e8 07       	cpc	r30, r24
    536c:	f9 07       	cpc	r31, r25
    536e:	c0 f0       	brcs	.+48     	; 0x53a0 <__fp_cmp+0x46>
    5370:	12 16       	cp	r1, r18
    5372:	13 06       	cpc	r1, r19
    5374:	e4 07       	cpc	r30, r20
    5376:	f5 07       	cpc	r31, r21
    5378:	98 f0       	brcs	.+38     	; 0x53a0 <__fp_cmp+0x46>
    537a:	62 1b       	sub	r22, r18
    537c:	73 0b       	sbc	r23, r19
    537e:	84 0b       	sbc	r24, r20
    5380:	95 0b       	sbc	r25, r21
    5382:	39 f4       	brne	.+14     	; 0x5392 <__fp_cmp+0x38>
    5384:	0a 26       	eor	r0, r26
    5386:	61 f0       	breq	.+24     	; 0x53a0 <__fp_cmp+0x46>
    5388:	23 2b       	or	r18, r19
    538a:	24 2b       	or	r18, r20
    538c:	25 2b       	or	r18, r21
    538e:	21 f4       	brne	.+8      	; 0x5398 <__fp_cmp+0x3e>
    5390:	08 95       	ret
    5392:	0a 26       	eor	r0, r26
    5394:	09 f4       	brne	.+2      	; 0x5398 <__fp_cmp+0x3e>
    5396:	a1 40       	sbci	r26, 0x01	; 1
    5398:	a6 95       	lsr	r26
    539a:	8f ef       	ldi	r24, 0xFF	; 255
    539c:	81 1d       	adc	r24, r1
    539e:	81 1d       	adc	r24, r1
    53a0:	08 95       	ret

000053a2 <__fp_inf>:
    53a2:	97 f9       	bld	r25, 7
    53a4:	9f 67       	ori	r25, 0x7F	; 127
    53a6:	80 e8       	ldi	r24, 0x80	; 128
    53a8:	70 e0       	ldi	r23, 0x00	; 0
    53aa:	60 e0       	ldi	r22, 0x00	; 0
    53ac:	08 95       	ret

000053ae <__fp_nan>:
    53ae:	9f ef       	ldi	r25, 0xFF	; 255
    53b0:	80 ec       	ldi	r24, 0xC0	; 192
    53b2:	08 95       	ret

000053b4 <__fp_pscA>:
    53b4:	00 24       	eor	r0, r0
    53b6:	0a 94       	dec	r0
    53b8:	16 16       	cp	r1, r22
    53ba:	17 06       	cpc	r1, r23
    53bc:	18 06       	cpc	r1, r24
    53be:	09 06       	cpc	r0, r25
    53c0:	08 95       	ret

000053c2 <__fp_pscB>:
    53c2:	00 24       	eor	r0, r0
    53c4:	0a 94       	dec	r0
    53c6:	12 16       	cp	r1, r18
    53c8:	13 06       	cpc	r1, r19
    53ca:	14 06       	cpc	r1, r20
    53cc:	05 06       	cpc	r0, r21
    53ce:	08 95       	ret

000053d0 <__fp_round>:
    53d0:	09 2e       	mov	r0, r25
    53d2:	03 94       	inc	r0
    53d4:	00 0c       	add	r0, r0
    53d6:	11 f4       	brne	.+4      	; 0x53dc <__fp_round+0xc>
    53d8:	88 23       	and	r24, r24
    53da:	52 f0       	brmi	.+20     	; 0x53f0 <__fp_round+0x20>
    53dc:	bb 0f       	add	r27, r27
    53de:	40 f4       	brcc	.+16     	; 0x53f0 <__fp_round+0x20>
    53e0:	bf 2b       	or	r27, r31
    53e2:	11 f4       	brne	.+4      	; 0x53e8 <__fp_round+0x18>
    53e4:	60 ff       	sbrs	r22, 0
    53e6:	04 c0       	rjmp	.+8      	; 0x53f0 <__fp_round+0x20>
    53e8:	6f 5f       	subi	r22, 0xFF	; 255
    53ea:	7f 4f       	sbci	r23, 0xFF	; 255
    53ec:	8f 4f       	sbci	r24, 0xFF	; 255
    53ee:	9f 4f       	sbci	r25, 0xFF	; 255
    53f0:	08 95       	ret

000053f2 <__fp_split3>:
    53f2:	57 fd       	sbrc	r21, 7
    53f4:	90 58       	subi	r25, 0x80	; 128
    53f6:	44 0f       	add	r20, r20
    53f8:	55 1f       	adc	r21, r21
    53fa:	59 f0       	breq	.+22     	; 0x5412 <__fp_splitA+0x10>
    53fc:	5f 3f       	cpi	r21, 0xFF	; 255
    53fe:	71 f0       	breq	.+28     	; 0x541c <__fp_splitA+0x1a>
    5400:	47 95       	ror	r20

00005402 <__fp_splitA>:
    5402:	88 0f       	add	r24, r24
    5404:	97 fb       	bst	r25, 7
    5406:	99 1f       	adc	r25, r25
    5408:	61 f0       	breq	.+24     	; 0x5422 <__fp_splitA+0x20>
    540a:	9f 3f       	cpi	r25, 0xFF	; 255
    540c:	79 f0       	breq	.+30     	; 0x542c <__fp_splitA+0x2a>
    540e:	87 95       	ror	r24
    5410:	08 95       	ret
    5412:	12 16       	cp	r1, r18
    5414:	13 06       	cpc	r1, r19
    5416:	14 06       	cpc	r1, r20
    5418:	55 1f       	adc	r21, r21
    541a:	f2 cf       	rjmp	.-28     	; 0x5400 <__fp_split3+0xe>
    541c:	46 95       	lsr	r20
    541e:	f1 df       	rcall	.-30     	; 0x5402 <__fp_splitA>
    5420:	08 c0       	rjmp	.+16     	; 0x5432 <__fp_splitA+0x30>
    5422:	16 16       	cp	r1, r22
    5424:	17 06       	cpc	r1, r23
    5426:	18 06       	cpc	r1, r24
    5428:	99 1f       	adc	r25, r25
    542a:	f1 cf       	rjmp	.-30     	; 0x540e <__fp_splitA+0xc>
    542c:	86 95       	lsr	r24
    542e:	71 05       	cpc	r23, r1
    5430:	61 05       	cpc	r22, r1
    5432:	08 94       	sec
    5434:	08 95       	ret

00005436 <__fp_zero>:
    5436:	e8 94       	clt

00005438 <__fp_szero>:
    5438:	bb 27       	eor	r27, r27
    543a:	66 27       	eor	r22, r22
    543c:	77 27       	eor	r23, r23
    543e:	cb 01       	movw	r24, r22
    5440:	97 f9       	bld	r25, 7
    5442:	08 95       	ret

00005444 <__gesf2>:
    5444:	8a df       	rcall	.-236    	; 0x535a <__fp_cmp>
    5446:	08 f4       	brcc	.+2      	; 0x544a <__gesf2+0x6>
    5448:	8f ef       	ldi	r24, 0xFF	; 255
    544a:	08 95       	ret

0000544c <__mulsf3>:
    544c:	0b d0       	rcall	.+22     	; 0x5464 <__mulsf3x>
    544e:	c0 cf       	rjmp	.-128    	; 0x53d0 <__fp_round>
    5450:	b1 df       	rcall	.-158    	; 0x53b4 <__fp_pscA>
    5452:	28 f0       	brcs	.+10     	; 0x545e <__mulsf3+0x12>
    5454:	b6 df       	rcall	.-148    	; 0x53c2 <__fp_pscB>
    5456:	18 f0       	brcs	.+6      	; 0x545e <__mulsf3+0x12>
    5458:	95 23       	and	r25, r21
    545a:	09 f0       	breq	.+2      	; 0x545e <__mulsf3+0x12>
    545c:	a2 cf       	rjmp	.-188    	; 0x53a2 <__fp_inf>
    545e:	a7 cf       	rjmp	.-178    	; 0x53ae <__fp_nan>
    5460:	11 24       	eor	r1, r1
    5462:	ea cf       	rjmp	.-44     	; 0x5438 <__fp_szero>

00005464 <__mulsf3x>:
    5464:	c6 df       	rcall	.-116    	; 0x53f2 <__fp_split3>
    5466:	a0 f3       	brcs	.-24     	; 0x5450 <__mulsf3+0x4>

00005468 <__mulsf3_pse>:
    5468:	95 9f       	mul	r25, r21
    546a:	d1 f3       	breq	.-12     	; 0x5460 <__mulsf3+0x14>
    546c:	95 0f       	add	r25, r21
    546e:	50 e0       	ldi	r21, 0x00	; 0
    5470:	55 1f       	adc	r21, r21
    5472:	62 9f       	mul	r22, r18
    5474:	f0 01       	movw	r30, r0
    5476:	72 9f       	mul	r23, r18
    5478:	bb 27       	eor	r27, r27
    547a:	f0 0d       	add	r31, r0
    547c:	b1 1d       	adc	r27, r1
    547e:	63 9f       	mul	r22, r19
    5480:	aa 27       	eor	r26, r26
    5482:	f0 0d       	add	r31, r0
    5484:	b1 1d       	adc	r27, r1
    5486:	aa 1f       	adc	r26, r26
    5488:	64 9f       	mul	r22, r20
    548a:	66 27       	eor	r22, r22
    548c:	b0 0d       	add	r27, r0
    548e:	a1 1d       	adc	r26, r1
    5490:	66 1f       	adc	r22, r22
    5492:	82 9f       	mul	r24, r18
    5494:	22 27       	eor	r18, r18
    5496:	b0 0d       	add	r27, r0
    5498:	a1 1d       	adc	r26, r1
    549a:	62 1f       	adc	r22, r18
    549c:	73 9f       	mul	r23, r19
    549e:	b0 0d       	add	r27, r0
    54a0:	a1 1d       	adc	r26, r1
    54a2:	62 1f       	adc	r22, r18
    54a4:	83 9f       	mul	r24, r19
    54a6:	a0 0d       	add	r26, r0
    54a8:	61 1d       	adc	r22, r1
    54aa:	22 1f       	adc	r18, r18
    54ac:	74 9f       	mul	r23, r20
    54ae:	33 27       	eor	r19, r19
    54b0:	a0 0d       	add	r26, r0
    54b2:	61 1d       	adc	r22, r1
    54b4:	23 1f       	adc	r18, r19
    54b6:	84 9f       	mul	r24, r20
    54b8:	60 0d       	add	r22, r0
    54ba:	21 1d       	adc	r18, r1
    54bc:	82 2f       	mov	r24, r18
    54be:	76 2f       	mov	r23, r22
    54c0:	6a 2f       	mov	r22, r26
    54c2:	11 24       	eor	r1, r1
    54c4:	9f 57       	subi	r25, 0x7F	; 127
    54c6:	50 40       	sbci	r21, 0x00	; 0
    54c8:	8a f0       	brmi	.+34     	; 0x54ec <__mulsf3_pse+0x84>
    54ca:	e1 f0       	breq	.+56     	; 0x5504 <__mulsf3_pse+0x9c>
    54cc:	88 23       	and	r24, r24
    54ce:	4a f0       	brmi	.+18     	; 0x54e2 <__mulsf3_pse+0x7a>
    54d0:	ee 0f       	add	r30, r30
    54d2:	ff 1f       	adc	r31, r31
    54d4:	bb 1f       	adc	r27, r27
    54d6:	66 1f       	adc	r22, r22
    54d8:	77 1f       	adc	r23, r23
    54da:	88 1f       	adc	r24, r24
    54dc:	91 50       	subi	r25, 0x01	; 1
    54de:	50 40       	sbci	r21, 0x00	; 0
    54e0:	a9 f7       	brne	.-22     	; 0x54cc <__mulsf3_pse+0x64>
    54e2:	9e 3f       	cpi	r25, 0xFE	; 254
    54e4:	51 05       	cpc	r21, r1
    54e6:	70 f0       	brcs	.+28     	; 0x5504 <__mulsf3_pse+0x9c>
    54e8:	5c cf       	rjmp	.-328    	; 0x53a2 <__fp_inf>
    54ea:	a6 cf       	rjmp	.-180    	; 0x5438 <__fp_szero>
    54ec:	5f 3f       	cpi	r21, 0xFF	; 255
    54ee:	ec f3       	brlt	.-6      	; 0x54ea <__mulsf3_pse+0x82>
    54f0:	98 3e       	cpi	r25, 0xE8	; 232
    54f2:	dc f3       	brlt	.-10     	; 0x54ea <__mulsf3_pse+0x82>
    54f4:	86 95       	lsr	r24
    54f6:	77 95       	ror	r23
    54f8:	67 95       	ror	r22
    54fa:	b7 95       	ror	r27
    54fc:	f7 95       	ror	r31
    54fe:	e7 95       	ror	r30
    5500:	9f 5f       	subi	r25, 0xFF	; 255
    5502:	c1 f7       	brne	.-16     	; 0x54f4 <__mulsf3_pse+0x8c>
    5504:	fe 2b       	or	r31, r30
    5506:	88 0f       	add	r24, r24
    5508:	91 1d       	adc	r25, r1
    550a:	96 95       	lsr	r25
    550c:	87 95       	ror	r24
    550e:	97 f9       	bld	r25, 7
    5510:	08 95       	ret

00005512 <__unordsf2>:
    5512:	23 df       	rcall	.-442    	; 0x535a <__fp_cmp>
    5514:	88 0b       	sbc	r24, r24
    5516:	99 0b       	sbc	r25, r25
    5518:	08 95       	ret

0000551a <__mulsi3>:
    551a:	62 9f       	mul	r22, r18
    551c:	d0 01       	movw	r26, r0
    551e:	73 9f       	mul	r23, r19
    5520:	f0 01       	movw	r30, r0
    5522:	82 9f       	mul	r24, r18
    5524:	e0 0d       	add	r30, r0
    5526:	f1 1d       	adc	r31, r1
    5528:	64 9f       	mul	r22, r20
    552a:	e0 0d       	add	r30, r0
    552c:	f1 1d       	adc	r31, r1
    552e:	92 9f       	mul	r25, r18
    5530:	f0 0d       	add	r31, r0
    5532:	83 9f       	mul	r24, r19
    5534:	f0 0d       	add	r31, r0
    5536:	74 9f       	mul	r23, r20
    5538:	f0 0d       	add	r31, r0
    553a:	65 9f       	mul	r22, r21
    553c:	f0 0d       	add	r31, r0
    553e:	99 27       	eor	r25, r25
    5540:	72 9f       	mul	r23, r18
    5542:	b0 0d       	add	r27, r0
    5544:	e1 1d       	adc	r30, r1
    5546:	f9 1f       	adc	r31, r25
    5548:	63 9f       	mul	r22, r19
    554a:	b0 0d       	add	r27, r0
    554c:	e1 1d       	adc	r30, r1
    554e:	f9 1f       	adc	r31, r25
    5550:	bd 01       	movw	r22, r26
    5552:	cf 01       	movw	r24, r30
    5554:	11 24       	eor	r1, r1
    5556:	08 95       	ret

00005558 <__divmodhi4>:
    5558:	97 fb       	bst	r25, 7
    555a:	09 2e       	mov	r0, r25
    555c:	07 26       	eor	r0, r23
    555e:	0a d0       	rcall	.+20     	; 0x5574 <__divmodhi4_neg1>
    5560:	77 fd       	sbrc	r23, 7
    5562:	04 d0       	rcall	.+8      	; 0x556c <__divmodhi4_neg2>
    5564:	2e d0       	rcall	.+92     	; 0x55c2 <__udivmodhi4>
    5566:	06 d0       	rcall	.+12     	; 0x5574 <__divmodhi4_neg1>
    5568:	00 20       	and	r0, r0
    556a:	1a f4       	brpl	.+6      	; 0x5572 <__divmodhi4_exit>

0000556c <__divmodhi4_neg2>:
    556c:	70 95       	com	r23
    556e:	61 95       	neg	r22
    5570:	7f 4f       	sbci	r23, 0xFF	; 255

00005572 <__divmodhi4_exit>:
    5572:	08 95       	ret

00005574 <__divmodhi4_neg1>:
    5574:	f6 f7       	brtc	.-4      	; 0x5572 <__divmodhi4_exit>
    5576:	90 95       	com	r25
    5578:	81 95       	neg	r24
    557a:	9f 4f       	sbci	r25, 0xFF	; 255
    557c:	08 95       	ret

0000557e <__udivmodsi4>:
    557e:	a1 e2       	ldi	r26, 0x21	; 33
    5580:	1a 2e       	mov	r1, r26
    5582:	aa 1b       	sub	r26, r26
    5584:	bb 1b       	sub	r27, r27
    5586:	fd 01       	movw	r30, r26
    5588:	0d c0       	rjmp	.+26     	; 0x55a4 <__udivmodsi4_ep>

0000558a <__udivmodsi4_loop>:
    558a:	aa 1f       	adc	r26, r26
    558c:	bb 1f       	adc	r27, r27
    558e:	ee 1f       	adc	r30, r30
    5590:	ff 1f       	adc	r31, r31
    5592:	a2 17       	cp	r26, r18
    5594:	b3 07       	cpc	r27, r19
    5596:	e4 07       	cpc	r30, r20
    5598:	f5 07       	cpc	r31, r21
    559a:	20 f0       	brcs	.+8      	; 0x55a4 <__udivmodsi4_ep>
    559c:	a2 1b       	sub	r26, r18
    559e:	b3 0b       	sbc	r27, r19
    55a0:	e4 0b       	sbc	r30, r20
    55a2:	f5 0b       	sbc	r31, r21

000055a4 <__udivmodsi4_ep>:
    55a4:	66 1f       	adc	r22, r22
    55a6:	77 1f       	adc	r23, r23
    55a8:	88 1f       	adc	r24, r24
    55aa:	99 1f       	adc	r25, r25
    55ac:	1a 94       	dec	r1
    55ae:	69 f7       	brne	.-38     	; 0x558a <__udivmodsi4_loop>
    55b0:	60 95       	com	r22
    55b2:	70 95       	com	r23
    55b4:	80 95       	com	r24
    55b6:	90 95       	com	r25
    55b8:	9b 01       	movw	r18, r22
    55ba:	ac 01       	movw	r20, r24
    55bc:	bd 01       	movw	r22, r26
    55be:	cf 01       	movw	r24, r30
    55c0:	08 95       	ret

000055c2 <__udivmodhi4>:
    55c2:	aa 1b       	sub	r26, r26
    55c4:	bb 1b       	sub	r27, r27
    55c6:	51 e1       	ldi	r21, 0x11	; 17
    55c8:	07 c0       	rjmp	.+14     	; 0x55d8 <__udivmodhi4_ep>

000055ca <__udivmodhi4_loop>:
    55ca:	aa 1f       	adc	r26, r26
    55cc:	bb 1f       	adc	r27, r27
    55ce:	a6 17       	cp	r26, r22
    55d0:	b7 07       	cpc	r27, r23
    55d2:	10 f0       	brcs	.+4      	; 0x55d8 <__udivmodhi4_ep>
    55d4:	a6 1b       	sub	r26, r22
    55d6:	b7 0b       	sbc	r27, r23

000055d8 <__udivmodhi4_ep>:
    55d8:	88 1f       	adc	r24, r24
    55da:	99 1f       	adc	r25, r25
    55dc:	5a 95       	dec	r21
    55de:	a9 f7       	brne	.-22     	; 0x55ca <__udivmodhi4_loop>
    55e0:	80 95       	com	r24
    55e2:	90 95       	com	r25
    55e4:	bc 01       	movw	r22, r24
    55e6:	cd 01       	movw	r24, r26
    55e8:	08 95       	ret

000055ea <__tablejump2__>:
    55ea:	ee 0f       	add	r30, r30
    55ec:	ff 1f       	adc	r31, r31

000055ee <__tablejump__>:
    55ee:	05 90       	lpm	r0, Z+
    55f0:	f4 91       	lpm	r31, Z
    55f2:	e0 2d       	mov	r30, r0
    55f4:	09 94       	ijmp

000055f6 <dtostrf>:
    55f6:	ef 92       	push	r14
    55f8:	0f 93       	push	r16
    55fa:	1f 93       	push	r17
    55fc:	cf 93       	push	r28
    55fe:	32 2f       	mov	r19, r18
    5600:	c0 2f       	mov	r28, r16
    5602:	47 ff       	sbrs	r20, 7
    5604:	02 c0       	rjmp	.+4      	; 0x560a <dtostrf+0x14>
    5606:	a4 e1       	ldi	r26, 0x14	; 20
    5608:	01 c0       	rjmp	.+2      	; 0x560c <dtostrf+0x16>
    560a:	a4 e0       	ldi	r26, 0x04	; 4
    560c:	e4 2f       	mov	r30, r20
    560e:	ff 27       	eor	r31, r31
    5610:	e7 fd       	sbrc	r30, 7
    5612:	f0 95       	com	r31
    5614:	f7 ff       	sbrs	r31, 7
    5616:	03 c0       	rjmp	.+6      	; 0x561e <dtostrf+0x28>
    5618:	f0 95       	com	r31
    561a:	e1 95       	neg	r30
    561c:	ff 4f       	sbci	r31, 0xFF	; 255
    561e:	4c 2f       	mov	r20, r28
    5620:	51 2f       	mov	r21, r17
    5622:	2e 2f       	mov	r18, r30
    5624:	03 2f       	mov	r16, r19
    5626:	ea 2e       	mov	r14, r26
    5628:	0e 94 09 30 	call	0x6012	; 0x6012 <dtoa_prf>
    562c:	8c 2f       	mov	r24, r28
    562e:	91 2f       	mov	r25, r17
    5630:	cf 91       	pop	r28
    5632:	1f 91       	pop	r17
    5634:	0f 91       	pop	r16
    5636:	ef 90       	pop	r14
    5638:	08 95       	ret

0000563a <malloc>:
    563a:	cf 93       	push	r28
    563c:	df 93       	push	r29
    563e:	ac 01       	movw	r20, r24
    5640:	82 30       	cpi	r24, 0x02	; 2
    5642:	91 05       	cpc	r25, r1
    5644:	10 f4       	brcc	.+4      	; 0x564a <malloc+0x10>
    5646:	42 e0       	ldi	r20, 0x02	; 2
    5648:	50 e0       	ldi	r21, 0x00	; 0
    564a:	e0 91 eb 06 	lds	r30, 0x06EB
    564e:	f0 91 ec 06 	lds	r31, 0x06EC
    5652:	20 e0       	ldi	r18, 0x00	; 0
    5654:	30 e0       	ldi	r19, 0x00	; 0
    5656:	a0 e0       	ldi	r26, 0x00	; 0
    5658:	b0 e0       	ldi	r27, 0x00	; 0
    565a:	24 c0       	rjmp	.+72     	; 0x56a4 <malloc+0x6a>
    565c:	80 81       	ld	r24, Z
    565e:	91 81       	ldd	r25, Z+1	; 0x01
    5660:	84 17       	cp	r24, r20
    5662:	95 07       	cpc	r25, r21
    5664:	d0 f0       	brcs	.+52     	; 0x569a <malloc+0x60>
    5666:	84 17       	cp	r24, r20
    5668:	95 07       	cpc	r25, r21
    566a:	71 f4       	brne	.+28     	; 0x5688 <malloc+0x4e>
    566c:	82 81       	ldd	r24, Z+2	; 0x02
    566e:	93 81       	ldd	r25, Z+3	; 0x03
    5670:	10 97       	sbiw	r26, 0x00	; 0
    5672:	29 f0       	breq	.+10     	; 0x567e <malloc+0x44>
    5674:	13 96       	adiw	r26, 0x03	; 3
    5676:	9c 93       	st	X, r25
    5678:	8e 93       	st	-X, r24
    567a:	12 97       	sbiw	r26, 0x02	; 2
    567c:	2c c0       	rjmp	.+88     	; 0x56d6 <malloc+0x9c>
    567e:	90 93 ec 06 	sts	0x06EC, r25
    5682:	80 93 eb 06 	sts	0x06EB, r24
    5686:	27 c0       	rjmp	.+78     	; 0x56d6 <malloc+0x9c>
    5688:	21 15       	cp	r18, r1
    568a:	31 05       	cpc	r19, r1
    568c:	19 f0       	breq	.+6      	; 0x5694 <malloc+0x5a>
    568e:	82 17       	cp	r24, r18
    5690:	93 07       	cpc	r25, r19
    5692:	18 f4       	brcc	.+6      	; 0x569a <malloc+0x60>
    5694:	9c 01       	movw	r18, r24
    5696:	bd 01       	movw	r22, r26
    5698:	ef 01       	movw	r28, r30
    569a:	92 81       	ldd	r25, Z+2	; 0x02
    569c:	83 81       	ldd	r24, Z+3	; 0x03
    569e:	df 01       	movw	r26, r30
    56a0:	e9 2f       	mov	r30, r25
    56a2:	f8 2f       	mov	r31, r24
    56a4:	30 97       	sbiw	r30, 0x00	; 0
    56a6:	d1 f6       	brne	.-76     	; 0x565c <malloc+0x22>
    56a8:	21 15       	cp	r18, r1
    56aa:	31 05       	cpc	r19, r1
    56ac:	f9 f0       	breq	.+62     	; 0x56ec <malloc+0xb2>
    56ae:	c9 01       	movw	r24, r18
    56b0:	84 1b       	sub	r24, r20
    56b2:	95 0b       	sbc	r25, r21
    56b4:	84 30       	cpi	r24, 0x04	; 4
    56b6:	91 05       	cpc	r25, r1
    56b8:	80 f4       	brcc	.+32     	; 0x56da <malloc+0xa0>
    56ba:	8a 81       	ldd	r24, Y+2	; 0x02
    56bc:	9b 81       	ldd	r25, Y+3	; 0x03
    56be:	61 15       	cp	r22, r1
    56c0:	71 05       	cpc	r23, r1
    56c2:	21 f0       	breq	.+8      	; 0x56cc <malloc+0x92>
    56c4:	fb 01       	movw	r30, r22
    56c6:	93 83       	std	Z+3, r25	; 0x03
    56c8:	82 83       	std	Z+2, r24	; 0x02
    56ca:	04 c0       	rjmp	.+8      	; 0x56d4 <malloc+0x9a>
    56cc:	90 93 ec 06 	sts	0x06EC, r25
    56d0:	80 93 eb 06 	sts	0x06EB, r24
    56d4:	fe 01       	movw	r30, r28
    56d6:	32 96       	adiw	r30, 0x02	; 2
    56d8:	42 c0       	rjmp	.+132    	; 0x575e <malloc+0x124>
    56da:	fe 01       	movw	r30, r28
    56dc:	e8 0f       	add	r30, r24
    56de:	f9 1f       	adc	r31, r25
    56e0:	41 93       	st	Z+, r20
    56e2:	51 93       	st	Z+, r21
    56e4:	02 97       	sbiw	r24, 0x02	; 2
    56e6:	99 83       	std	Y+1, r25	; 0x01
    56e8:	88 83       	st	Y, r24
    56ea:	39 c0       	rjmp	.+114    	; 0x575e <malloc+0x124>
    56ec:	80 91 e9 06 	lds	r24, 0x06E9
    56f0:	90 91 ea 06 	lds	r25, 0x06EA
    56f4:	00 97       	sbiw	r24, 0x00	; 0
    56f6:	41 f4       	brne	.+16     	; 0x5708 <malloc+0xce>
    56f8:	80 91 91 05 	lds	r24, 0x0591
    56fc:	90 91 92 05 	lds	r25, 0x0592
    5700:	90 93 ea 06 	sts	0x06EA, r25
    5704:	80 93 e9 06 	sts	0x06E9, r24
    5708:	20 91 8f 05 	lds	r18, 0x058F
    570c:	30 91 90 05 	lds	r19, 0x0590
    5710:	21 15       	cp	r18, r1
    5712:	31 05       	cpc	r19, r1
    5714:	41 f4       	brne	.+16     	; 0x5726 <malloc+0xec>
    5716:	2d b7       	in	r18, 0x3d	; 61
    5718:	3e b7       	in	r19, 0x3e	; 62
    571a:	80 91 93 05 	lds	r24, 0x0593
    571e:	90 91 94 05 	lds	r25, 0x0594
    5722:	28 1b       	sub	r18, r24
    5724:	39 0b       	sbc	r19, r25
    5726:	e0 91 e9 06 	lds	r30, 0x06E9
    572a:	f0 91 ea 06 	lds	r31, 0x06EA
    572e:	e2 17       	cp	r30, r18
    5730:	f3 07       	cpc	r31, r19
    5732:	98 f4       	brcc	.+38     	; 0x575a <malloc+0x120>
    5734:	2e 1b       	sub	r18, r30
    5736:	3f 0b       	sbc	r19, r31
    5738:	24 17       	cp	r18, r20
    573a:	35 07       	cpc	r19, r21
    573c:	70 f0       	brcs	.+28     	; 0x575a <malloc+0x120>
    573e:	ca 01       	movw	r24, r20
    5740:	02 96       	adiw	r24, 0x02	; 2
    5742:	28 17       	cp	r18, r24
    5744:	39 07       	cpc	r19, r25
    5746:	48 f0       	brcs	.+18     	; 0x575a <malloc+0x120>
    5748:	8e 0f       	add	r24, r30
    574a:	9f 1f       	adc	r25, r31
    574c:	90 93 ea 06 	sts	0x06EA, r25
    5750:	80 93 e9 06 	sts	0x06E9, r24
    5754:	41 93       	st	Z+, r20
    5756:	51 93       	st	Z+, r21
    5758:	02 c0       	rjmp	.+4      	; 0x575e <malloc+0x124>
    575a:	e0 e0       	ldi	r30, 0x00	; 0
    575c:	f0 e0       	ldi	r31, 0x00	; 0
    575e:	cf 01       	movw	r24, r30
    5760:	df 91       	pop	r29
    5762:	cf 91       	pop	r28
    5764:	08 95       	ret

00005766 <free>:
    5766:	0f 93       	push	r16
    5768:	1f 93       	push	r17
    576a:	cf 93       	push	r28
    576c:	df 93       	push	r29
    576e:	9c 01       	movw	r18, r24
    5770:	00 97       	sbiw	r24, 0x00	; 0
    5772:	09 f4       	brne	.+2      	; 0x5776 <free+0x10>
    5774:	8c c0       	rjmp	.+280    	; 0x588e <free+0x128>
    5776:	dc 01       	movw	r26, r24
    5778:	12 97       	sbiw	r26, 0x02	; 2
    577a:	13 96       	adiw	r26, 0x03	; 3
    577c:	1c 92       	st	X, r1
    577e:	1e 92       	st	-X, r1
    5780:	12 97       	sbiw	r26, 0x02	; 2
    5782:	60 91 eb 06 	lds	r22, 0x06EB
    5786:	70 91 ec 06 	lds	r23, 0x06EC
    578a:	61 15       	cp	r22, r1
    578c:	71 05       	cpc	r23, r1
    578e:	89 f4       	brne	.+34     	; 0x57b2 <free+0x4c>
    5790:	8d 91       	ld	r24, X+
    5792:	9c 91       	ld	r25, X
    5794:	11 97       	sbiw	r26, 0x01	; 1
    5796:	82 0f       	add	r24, r18
    5798:	93 1f       	adc	r25, r19
    579a:	20 91 e9 06 	lds	r18, 0x06E9
    579e:	30 91 ea 06 	lds	r19, 0x06EA
    57a2:	28 17       	cp	r18, r24
    57a4:	39 07       	cpc	r19, r25
    57a6:	69 f5       	brne	.+90     	; 0x5802 <free+0x9c>
    57a8:	b0 93 ea 06 	sts	0x06EA, r27
    57ac:	a0 93 e9 06 	sts	0x06E9, r26
    57b0:	6e c0       	rjmp	.+220    	; 0x588e <free+0x128>
    57b2:	fb 01       	movw	r30, r22
    57b4:	40 e0       	ldi	r20, 0x00	; 0
    57b6:	50 e0       	ldi	r21, 0x00	; 0
    57b8:	01 c0       	rjmp	.+2      	; 0x57bc <free+0x56>
    57ba:	fc 01       	movw	r30, r24
    57bc:	ea 17       	cp	r30, r26
    57be:	fb 07       	cpc	r31, r27
    57c0:	30 f4       	brcc	.+12     	; 0x57ce <free+0x68>
    57c2:	82 81       	ldd	r24, Z+2	; 0x02
    57c4:	93 81       	ldd	r25, Z+3	; 0x03
    57c6:	af 01       	movw	r20, r30
    57c8:	00 97       	sbiw	r24, 0x00	; 0
    57ca:	b9 f7       	brne	.-18     	; 0x57ba <free+0x54>
    57cc:	1f c0       	rjmp	.+62     	; 0x580c <free+0xa6>
    57ce:	e9 01       	movw	r28, r18
    57d0:	22 97       	sbiw	r28, 0x02	; 2
    57d2:	fb 83       	std	Y+3, r31	; 0x03
    57d4:	ea 83       	std	Y+2, r30	; 0x02
    57d6:	08 81       	ld	r16, Y
    57d8:	19 81       	ldd	r17, Y+1	; 0x01
    57da:	c9 01       	movw	r24, r18
    57dc:	80 0f       	add	r24, r16
    57de:	91 1f       	adc	r25, r17
    57e0:	8e 17       	cp	r24, r30
    57e2:	9f 07       	cpc	r25, r31
    57e4:	59 f4       	brne	.+22     	; 0x57fc <free+0x96>
    57e6:	80 81       	ld	r24, Z
    57e8:	91 81       	ldd	r25, Z+1	; 0x01
    57ea:	80 0f       	add	r24, r16
    57ec:	91 1f       	adc	r25, r17
    57ee:	02 96       	adiw	r24, 0x02	; 2
    57f0:	99 83       	std	Y+1, r25	; 0x01
    57f2:	88 83       	st	Y, r24
    57f4:	82 81       	ldd	r24, Z+2	; 0x02
    57f6:	93 81       	ldd	r25, Z+3	; 0x03
    57f8:	9b 83       	std	Y+3, r25	; 0x03
    57fa:	8a 83       	std	Y+2, r24	; 0x02
    57fc:	41 15       	cp	r20, r1
    57fe:	51 05       	cpc	r21, r1
    5800:	29 f4       	brne	.+10     	; 0x580c <free+0xa6>
    5802:	b0 93 ec 06 	sts	0x06EC, r27
    5806:	a0 93 eb 06 	sts	0x06EB, r26
    580a:	41 c0       	rjmp	.+130    	; 0x588e <free+0x128>
    580c:	fa 01       	movw	r30, r20
    580e:	b3 83       	std	Z+3, r27	; 0x03
    5810:	a2 83       	std	Z+2, r26	; 0x02
    5812:	c1 91       	ld	r28, Z+
    5814:	d1 91       	ld	r29, Z+
    5816:	ec 0f       	add	r30, r28
    5818:	fd 1f       	adc	r31, r29
    581a:	ae 17       	cp	r26, r30
    581c:	bf 07       	cpc	r27, r31
    581e:	81 f4       	brne	.+32     	; 0x5840 <free+0xda>
    5820:	f9 01       	movw	r30, r18
    5822:	92 91       	ld	r25, -Z
    5824:	82 91       	ld	r24, -Z
    5826:	8c 0f       	add	r24, r28
    5828:	9d 1f       	adc	r25, r29
    582a:	02 96       	adiw	r24, 0x02	; 2
    582c:	da 01       	movw	r26, r20
    582e:	11 96       	adiw	r26, 0x01	; 1
    5830:	9c 93       	st	X, r25
    5832:	8e 93       	st	-X, r24
    5834:	82 81       	ldd	r24, Z+2	; 0x02
    5836:	93 81       	ldd	r25, Z+3	; 0x03
    5838:	13 96       	adiw	r26, 0x03	; 3
    583a:	9c 93       	st	X, r25
    583c:	8e 93       	st	-X, r24
    583e:	12 97       	sbiw	r26, 0x02	; 2
    5840:	e0 e0       	ldi	r30, 0x00	; 0
    5842:	f0 e0       	ldi	r31, 0x00	; 0
    5844:	02 c0       	rjmp	.+4      	; 0x584a <free+0xe4>
    5846:	fb 01       	movw	r30, r22
    5848:	bc 01       	movw	r22, r24
    584a:	db 01       	movw	r26, r22
    584c:	12 96       	adiw	r26, 0x02	; 2
    584e:	8d 91       	ld	r24, X+
    5850:	9c 91       	ld	r25, X
    5852:	13 97       	sbiw	r26, 0x03	; 3
    5854:	00 97       	sbiw	r24, 0x00	; 0
    5856:	b9 f7       	brne	.-18     	; 0x5846 <free+0xe0>
    5858:	cb 01       	movw	r24, r22
    585a:	02 96       	adiw	r24, 0x02	; 2
    585c:	2d 91       	ld	r18, X+
    585e:	3c 91       	ld	r19, X
    5860:	11 97       	sbiw	r26, 0x01	; 1
    5862:	82 0f       	add	r24, r18
    5864:	93 1f       	adc	r25, r19
    5866:	20 91 e9 06 	lds	r18, 0x06E9
    586a:	30 91 ea 06 	lds	r19, 0x06EA
    586e:	28 17       	cp	r18, r24
    5870:	39 07       	cpc	r19, r25
    5872:	69 f4       	brne	.+26     	; 0x588e <free+0x128>
    5874:	30 97       	sbiw	r30, 0x00	; 0
    5876:	29 f4       	brne	.+10     	; 0x5882 <free+0x11c>
    5878:	10 92 ec 06 	sts	0x06EC, r1
    587c:	10 92 eb 06 	sts	0x06EB, r1
    5880:	02 c0       	rjmp	.+4      	; 0x5886 <free+0x120>
    5882:	13 82       	std	Z+3, r1	; 0x03
    5884:	12 82       	std	Z+2, r1	; 0x02
    5886:	70 93 ea 06 	sts	0x06EA, r23
    588a:	60 93 e9 06 	sts	0x06E9, r22
    588e:	df 91       	pop	r29
    5890:	cf 91       	pop	r28
    5892:	1f 91       	pop	r17
    5894:	0f 91       	pop	r16
    5896:	08 95       	ret

00005898 <realloc>:
    5898:	a2 e0       	ldi	r26, 0x02	; 2
    589a:	b0 e0       	ldi	r27, 0x00	; 0
    589c:	e2 e5       	ldi	r30, 0x52	; 82
    589e:	fc e2       	ldi	r31, 0x2C	; 44
    58a0:	0c 94 f2 32 	jmp	0x65e4	; 0x65e4 <__prologue_saves__+0xc>
    58a4:	8c 01       	movw	r16, r24
    58a6:	00 97       	sbiw	r24, 0x00	; 0
    58a8:	29 f4       	brne	.+10     	; 0x58b4 <realloc+0x1c>
    58aa:	cb 01       	movw	r24, r22
    58ac:	0e 94 1d 2b 	call	0x563a	; 0x563a <malloc>
    58b0:	8c 01       	movw	r16, r24
    58b2:	b8 c0       	rjmp	.+368    	; 0x5a24 <realloc+0x18c>
    58b4:	dc 01       	movw	r26, r24
    58b6:	a6 0f       	add	r26, r22
    58b8:	b7 1f       	adc	r27, r23
    58ba:	fc 01       	movw	r30, r24
    58bc:	32 97       	sbiw	r30, 0x02	; 2
    58be:	ae 17       	cp	r26, r30
    58c0:	bf 07       	cpc	r27, r31
    58c2:	08 f4       	brcc	.+2      	; 0x58c6 <realloc+0x2e>
    58c4:	ad c0       	rjmp	.+346    	; 0x5a20 <realloc+0x188>
    58c6:	20 81       	ld	r18, Z
    58c8:	31 81       	ldd	r19, Z+1	; 0x01
    58ca:	26 17       	cp	r18, r22
    58cc:	37 07       	cpc	r19, r23
    58ce:	b0 f0       	brcs	.+44     	; 0x58fc <realloc+0x64>
    58d0:	25 30       	cpi	r18, 0x05	; 5
    58d2:	31 05       	cpc	r19, r1
    58d4:	08 f4       	brcc	.+2      	; 0x58d8 <realloc+0x40>
    58d6:	a6 c0       	rjmp	.+332    	; 0x5a24 <realloc+0x18c>
    58d8:	c9 01       	movw	r24, r18
    58da:	04 97       	sbiw	r24, 0x04	; 4
    58dc:	86 17       	cp	r24, r22
    58de:	97 07       	cpc	r25, r23
    58e0:	08 f4       	brcc	.+2      	; 0x58e4 <realloc+0x4c>
    58e2:	a0 c0       	rjmp	.+320    	; 0x5a24 <realloc+0x18c>
    58e4:	22 50       	subi	r18, 0x02	; 2
    58e6:	30 40       	sbci	r19, 0x00	; 0
    58e8:	26 1b       	sub	r18, r22
    58ea:	37 0b       	sbc	r19, r23
    58ec:	2d 93       	st	X+, r18
    58ee:	3d 93       	st	X+, r19
    58f0:	cd 01       	movw	r24, r26
    58f2:	71 83       	std	Z+1, r23	; 0x01
    58f4:	60 83       	st	Z, r22
    58f6:	0e 94 b3 2b 	call	0x5766	; 0x5766 <free>
    58fa:	94 c0       	rjmp	.+296    	; 0x5a24 <realloc+0x18c>
    58fc:	6b 01       	movw	r12, r22
    58fe:	c2 1a       	sub	r12, r18
    5900:	d3 0a       	sbc	r13, r19
    5902:	5c 01       	movw	r10, r24
    5904:	a2 0e       	add	r10, r18
    5906:	b3 1e       	adc	r11, r19
    5908:	e0 91 eb 06 	lds	r30, 0x06EB
    590c:	f0 91 ec 06 	lds	r31, 0x06EC
    5910:	40 e0       	ldi	r20, 0x00	; 0
    5912:	50 e0       	ldi	r21, 0x00	; 0
    5914:	88 24       	eor	r8, r8
    5916:	99 24       	eor	r9, r9
    5918:	49 c0       	rjmp	.+146    	; 0x59ac <realloc+0x114>
    591a:	ea 15       	cp	r30, r10
    591c:	fb 05       	cpc	r31, r11
    591e:	e1 f5       	brne	.+120    	; 0x5998 <realloc+0x100>
    5920:	e0 80       	ld	r14, Z
    5922:	f1 80       	ldd	r15, Z+1	; 0x01
    5924:	c7 01       	movw	r24, r14
    5926:	02 96       	adiw	r24, 0x02	; 2
    5928:	8c 15       	cp	r24, r12
    592a:	9d 05       	cpc	r25, r13
    592c:	a8 f1       	brcs	.+106    	; 0x5998 <realloc+0x100>
    592e:	a7 01       	movw	r20, r14
    5930:	4c 19       	sub	r20, r12
    5932:	5d 09       	sbc	r21, r13
    5934:	ca 01       	movw	r24, r20
    5936:	02 96       	adiw	r24, 0x02	; 2
    5938:	0f 2e       	mov	r0, r31
    593a:	fe ef       	ldi	r31, 0xFE	; 254
    593c:	cf 2e       	mov	r12, r31
    593e:	ff ef       	ldi	r31, 0xFF	; 255
    5940:	df 2e       	mov	r13, r31
    5942:	f0 2d       	mov	r31, r0
    5944:	c0 0e       	add	r12, r16
    5946:	d1 1e       	adc	r13, r17
    5948:	85 30       	cpi	r24, 0x05	; 5
    594a:	91 05       	cpc	r25, r1
    594c:	78 f0       	brcs	.+30     	; 0x596c <realloc+0xd4>
    594e:	82 81       	ldd	r24, Z+2	; 0x02
    5950:	93 81       	ldd	r25, Z+3	; 0x03
    5952:	13 96       	adiw	r26, 0x03	; 3
    5954:	9c 93       	st	X, r25
    5956:	8e 93       	st	-X, r24
    5958:	12 97       	sbiw	r26, 0x02	; 2
    595a:	11 96       	adiw	r26, 0x01	; 1
    595c:	5c 93       	st	X, r21
    595e:	4e 93       	st	-X, r20
    5960:	f6 01       	movw	r30, r12
    5962:	71 83       	std	Z+1, r23	; 0x01
    5964:	60 83       	st	Z, r22
    5966:	9a 2f       	mov	r25, r26
    5968:	8b 2f       	mov	r24, r27
    596a:	0a c0       	rjmp	.+20     	; 0x5980 <realloc+0xe8>
    596c:	c9 01       	movw	r24, r18
    596e:	02 96       	adiw	r24, 0x02	; 2
    5970:	8e 0d       	add	r24, r14
    5972:	9f 1d       	adc	r25, r15
    5974:	d6 01       	movw	r26, r12
    5976:	11 96       	adiw	r26, 0x01	; 1
    5978:	9c 93       	st	X, r25
    597a:	8e 93       	st	-X, r24
    597c:	92 81       	ldd	r25, Z+2	; 0x02
    597e:	83 81       	ldd	r24, Z+3	; 0x03
    5980:	81 14       	cp	r8, r1
    5982:	91 04       	cpc	r9, r1
    5984:	21 f0       	breq	.+8      	; 0x598e <realloc+0xf6>
    5986:	f4 01       	movw	r30, r8
    5988:	92 83       	std	Z+2, r25	; 0x02
    598a:	83 83       	std	Z+3, r24	; 0x03
    598c:	4b c0       	rjmp	.+150    	; 0x5a24 <realloc+0x18c>
    598e:	90 93 eb 06 	sts	0x06EB, r25
    5992:	80 93 ec 06 	sts	0x06EC, r24
    5996:	46 c0       	rjmp	.+140    	; 0x5a24 <realloc+0x18c>
    5998:	80 81       	ld	r24, Z
    599a:	91 81       	ldd	r25, Z+1	; 0x01
    599c:	48 17       	cp	r20, r24
    599e:	59 07       	cpc	r21, r25
    59a0:	08 f4       	brcc	.+2      	; 0x59a4 <realloc+0x10c>
    59a2:	ac 01       	movw	r20, r24
    59a4:	82 81       	ldd	r24, Z+2	; 0x02
    59a6:	93 81       	ldd	r25, Z+3	; 0x03
    59a8:	4f 01       	movw	r8, r30
    59aa:	fc 01       	movw	r30, r24
    59ac:	30 97       	sbiw	r30, 0x00	; 0
    59ae:	09 f0       	breq	.+2      	; 0x59b2 <realloc+0x11a>
    59b0:	b4 cf       	rjmp	.-152    	; 0x591a <realloc+0x82>
    59b2:	80 91 e9 06 	lds	r24, 0x06E9
    59b6:	90 91 ea 06 	lds	r25, 0x06EA
    59ba:	8a 15       	cp	r24, r10
    59bc:	9b 05       	cpc	r25, r11
    59be:	e9 f4       	brne	.+58     	; 0x59fa <realloc+0x162>
    59c0:	46 17       	cp	r20, r22
    59c2:	57 07       	cpc	r21, r23
    59c4:	d0 f4       	brcc	.+52     	; 0x59fa <realloc+0x162>
    59c6:	80 91 8f 05 	lds	r24, 0x058F
    59ca:	90 91 90 05 	lds	r25, 0x0590
    59ce:	00 97       	sbiw	r24, 0x00	; 0
    59d0:	41 f4       	brne	.+16     	; 0x59e2 <realloc+0x14a>
    59d2:	8d b7       	in	r24, 0x3d	; 61
    59d4:	9e b7       	in	r25, 0x3e	; 62
    59d6:	20 91 93 05 	lds	r18, 0x0593
    59da:	30 91 94 05 	lds	r19, 0x0594
    59de:	82 1b       	sub	r24, r18
    59e0:	93 0b       	sbc	r25, r19
    59e2:	a8 17       	cp	r26, r24
    59e4:	b9 07       	cpc	r27, r25
    59e6:	e0 f4       	brcc	.+56     	; 0x5a20 <realloc+0x188>
    59e8:	b0 93 ea 06 	sts	0x06EA, r27
    59ec:	a0 93 e9 06 	sts	0x06E9, r26
    59f0:	f8 01       	movw	r30, r16
    59f2:	32 97       	sbiw	r30, 0x02	; 2
    59f4:	71 83       	std	Z+1, r23	; 0x01
    59f6:	60 83       	st	Z, r22
    59f8:	15 c0       	rjmp	.+42     	; 0x5a24 <realloc+0x18c>
    59fa:	cb 01       	movw	r24, r22
    59fc:	29 83       	std	Y+1, r18	; 0x01
    59fe:	3a 83       	std	Y+2, r19	; 0x02
    5a00:	0e 94 1d 2b 	call	0x563a	; 0x563a <malloc>
    5a04:	7c 01       	movw	r14, r24
    5a06:	29 81       	ldd	r18, Y+1	; 0x01
    5a08:	3a 81       	ldd	r19, Y+2	; 0x02
    5a0a:	00 97       	sbiw	r24, 0x00	; 0
    5a0c:	49 f0       	breq	.+18     	; 0x5a20 <realloc+0x188>
    5a0e:	b8 01       	movw	r22, r16
    5a10:	a9 01       	movw	r20, r18
    5a12:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <memcpy>
    5a16:	c8 01       	movw	r24, r16
    5a18:	0e 94 b3 2b 	call	0x5766	; 0x5766 <free>
    5a1c:	87 01       	movw	r16, r14
    5a1e:	02 c0       	rjmp	.+4      	; 0x5a24 <realloc+0x18c>
    5a20:	00 e0       	ldi	r16, 0x00	; 0
    5a22:	10 e0       	ldi	r17, 0x00	; 0
    5a24:	c8 01       	movw	r24, r16
    5a26:	22 96       	adiw	r28, 0x02	; 2
    5a28:	ec e0       	ldi	r30, 0x0C	; 12
    5a2a:	0c 94 0e 33 	jmp	0x661c	; 0x661c <__epilogue_restores__+0xc>

00005a2e <atoi>:
    5a2e:	fc 01       	movw	r30, r24
    5a30:	88 27       	eor	r24, r24
    5a32:	99 27       	eor	r25, r25
    5a34:	e8 94       	clt
    5a36:	21 91       	ld	r18, Z+
    5a38:	20 32       	cpi	r18, 0x20	; 32
    5a3a:	e9 f3       	breq	.-6      	; 0x5a36 <atoi+0x8>
    5a3c:	29 30       	cpi	r18, 0x09	; 9
    5a3e:	10 f0       	brcs	.+4      	; 0x5a44 <atoi+0x16>
    5a40:	2e 30       	cpi	r18, 0x0E	; 14
    5a42:	c8 f3       	brcs	.-14     	; 0x5a36 <atoi+0x8>
    5a44:	2b 32       	cpi	r18, 0x2B	; 43
    5a46:	41 f0       	breq	.+16     	; 0x5a58 <atoi+0x2a>
    5a48:	2d 32       	cpi	r18, 0x2D	; 45
    5a4a:	39 f4       	brne	.+14     	; 0x5a5a <atoi+0x2c>
    5a4c:	68 94       	set
    5a4e:	04 c0       	rjmp	.+8      	; 0x5a58 <atoi+0x2a>
    5a50:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__mulhi_const_10>
    5a54:	82 0f       	add	r24, r18
    5a56:	91 1d       	adc	r25, r1
    5a58:	21 91       	ld	r18, Z+
    5a5a:	20 53       	subi	r18, 0x30	; 48
    5a5c:	2a 30       	cpi	r18, 0x0A	; 10
    5a5e:	c0 f3       	brcs	.-16     	; 0x5a50 <atoi+0x22>
    5a60:	1e f4       	brtc	.+6      	; 0x5a68 <atoi+0x3a>
    5a62:	90 95       	com	r25
    5a64:	81 95       	neg	r24
    5a66:	9f 4f       	sbci	r25, 0xFF	; 255
    5a68:	08 95       	ret

00005a6a <isspace>:
    5a6a:	91 11       	cpse	r25, r1
    5a6c:	02 c5       	rjmp	.+2564   	; 0x6472 <__ctype_isfalse>
    5a6e:	80 32       	cpi	r24, 0x20	; 32
    5a70:	19 f0       	breq	.+6      	; 0x5a78 <isspace+0xe>
    5a72:	89 50       	subi	r24, 0x09	; 9
    5a74:	85 50       	subi	r24, 0x05	; 5
    5a76:	d0 f7       	brcc	.-12     	; 0x5a6c <isspace+0x2>
    5a78:	08 95       	ret

00005a7a <strcpy_P>:
    5a7a:	fb 01       	movw	r30, r22
    5a7c:	dc 01       	movw	r26, r24
    5a7e:	05 90       	lpm	r0, Z+
    5a80:	0d 92       	st	X+, r0
    5a82:	00 20       	and	r0, r0
    5a84:	e1 f7       	brne	.-8      	; 0x5a7e <strcpy_P+0x4>
    5a86:	08 95       	ret

00005a88 <memcpy>:
    5a88:	fb 01       	movw	r30, r22
    5a8a:	dc 01       	movw	r26, r24
    5a8c:	02 c0       	rjmp	.+4      	; 0x5a92 <memcpy+0xa>
    5a8e:	01 90       	ld	r0, Z+
    5a90:	0d 92       	st	X+, r0
    5a92:	41 50       	subi	r20, 0x01	; 1
    5a94:	50 40       	sbci	r21, 0x00	; 0
    5a96:	d8 f7       	brcc	.-10     	; 0x5a8e <memcpy+0x6>
    5a98:	08 95       	ret

00005a9a <memset>:
    5a9a:	dc 01       	movw	r26, r24
    5a9c:	01 c0       	rjmp	.+2      	; 0x5aa0 <memset+0x6>
    5a9e:	6d 93       	st	X+, r22
    5aa0:	41 50       	subi	r20, 0x01	; 1
    5aa2:	50 40       	sbci	r21, 0x00	; 0
    5aa4:	e0 f7       	brcc	.-8      	; 0x5a9e <memset+0x4>
    5aa6:	08 95       	ret

00005aa8 <strcmp>:
    5aa8:	fb 01       	movw	r30, r22
    5aaa:	dc 01       	movw	r26, r24
    5aac:	8d 91       	ld	r24, X+
    5aae:	01 90       	ld	r0, Z+
    5ab0:	80 19       	sub	r24, r0
    5ab2:	01 10       	cpse	r0, r1
    5ab4:	d9 f3       	breq	.-10     	; 0x5aac <strcmp+0x4>
    5ab6:	99 0b       	sbc	r25, r25
    5ab8:	08 95       	ret

00005aba <strcpy>:
    5aba:	fb 01       	movw	r30, r22
    5abc:	dc 01       	movw	r26, r24
    5abe:	01 90       	ld	r0, Z+
    5ac0:	0d 92       	st	X+, r0
    5ac2:	00 20       	and	r0, r0
    5ac4:	e1 f7       	brne	.-8      	; 0x5abe <strcpy+0x4>
    5ac6:	08 95       	ret

00005ac8 <strncpy>:
    5ac8:	fb 01       	movw	r30, r22
    5aca:	dc 01       	movw	r26, r24
    5acc:	41 50       	subi	r20, 0x01	; 1
    5ace:	50 40       	sbci	r21, 0x00	; 0
    5ad0:	48 f0       	brcs	.+18     	; 0x5ae4 <strncpy+0x1c>
    5ad2:	01 90       	ld	r0, Z+
    5ad4:	0d 92       	st	X+, r0
    5ad6:	00 20       	and	r0, r0
    5ad8:	c9 f7       	brne	.-14     	; 0x5acc <strncpy+0x4>
    5ada:	01 c0       	rjmp	.+2      	; 0x5ade <strncpy+0x16>
    5adc:	1d 92       	st	X+, r1
    5ade:	41 50       	subi	r20, 0x01	; 1
    5ae0:	50 40       	sbci	r21, 0x00	; 0
    5ae2:	e0 f7       	brcc	.-8      	; 0x5adc <strncpy+0x14>
    5ae4:	08 95       	ret

00005ae6 <strstr>:
    5ae6:	fb 01       	movw	r30, r22
    5ae8:	51 91       	ld	r21, Z+
    5aea:	55 23       	and	r21, r21
    5aec:	a9 f0       	breq	.+42     	; 0x5b18 <strstr+0x32>
    5aee:	bf 01       	movw	r22, r30
    5af0:	dc 01       	movw	r26, r24
    5af2:	4d 91       	ld	r20, X+
    5af4:	45 17       	cp	r20, r21
    5af6:	41 11       	cpse	r20, r1
    5af8:	e1 f7       	brne	.-8      	; 0x5af2 <strstr+0xc>
    5afa:	59 f4       	brne	.+22     	; 0x5b12 <strstr+0x2c>
    5afc:	cd 01       	movw	r24, r26
    5afe:	01 90       	ld	r0, Z+
    5b00:	00 20       	and	r0, r0
    5b02:	49 f0       	breq	.+18     	; 0x5b16 <strstr+0x30>
    5b04:	4d 91       	ld	r20, X+
    5b06:	40 15       	cp	r20, r0
    5b08:	41 11       	cpse	r20, r1
    5b0a:	c9 f3       	breq	.-14     	; 0x5afe <strstr+0x18>
    5b0c:	fb 01       	movw	r30, r22
    5b0e:	41 11       	cpse	r20, r1
    5b10:	ef cf       	rjmp	.-34     	; 0x5af0 <strstr+0xa>
    5b12:	81 e0       	ldi	r24, 0x01	; 1
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	01 97       	sbiw	r24, 0x01	; 1
    5b18:	08 95       	ret

00005b1a <itoa>:
    5b1a:	fb 01       	movw	r30, r22
    5b1c:	9f 01       	movw	r18, r30
    5b1e:	e8 94       	clt
    5b20:	42 30       	cpi	r20, 0x02	; 2
    5b22:	c4 f0       	brlt	.+48     	; 0x5b54 <itoa+0x3a>
    5b24:	45 32       	cpi	r20, 0x25	; 37
    5b26:	b4 f4       	brge	.+44     	; 0x5b54 <itoa+0x3a>
    5b28:	4a 30       	cpi	r20, 0x0A	; 10
    5b2a:	29 f4       	brne	.+10     	; 0x5b36 <itoa+0x1c>
    5b2c:	97 fb       	bst	r25, 7
    5b2e:	1e f4       	brtc	.+6      	; 0x5b36 <itoa+0x1c>
    5b30:	90 95       	com	r25
    5b32:	81 95       	neg	r24
    5b34:	9f 4f       	sbci	r25, 0xFF	; 255
    5b36:	64 2f       	mov	r22, r20
    5b38:	77 27       	eor	r23, r23
    5b3a:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__udivmodhi4>
    5b3e:	80 5d       	subi	r24, 0xD0	; 208
    5b40:	8a 33       	cpi	r24, 0x3A	; 58
    5b42:	0c f0       	brlt	.+2      	; 0x5b46 <itoa+0x2c>
    5b44:	89 5d       	subi	r24, 0xD9	; 217
    5b46:	81 93       	st	Z+, r24
    5b48:	cb 01       	movw	r24, r22
    5b4a:	00 97       	sbiw	r24, 0x00	; 0
    5b4c:	a1 f7       	brne	.-24     	; 0x5b36 <itoa+0x1c>
    5b4e:	16 f4       	brtc	.+4      	; 0x5b54 <itoa+0x3a>
    5b50:	5d e2       	ldi	r21, 0x2D	; 45
    5b52:	51 93       	st	Z+, r21
    5b54:	10 82       	st	Z, r1
    5b56:	c9 01       	movw	r24, r18
    5b58:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <strrev>

00005b5c <__mulhi_const_10>:
    5b5c:	7a e0       	ldi	r23, 0x0A	; 10
    5b5e:	97 9f       	mul	r25, r23
    5b60:	90 2d       	mov	r25, r0
    5b62:	87 9f       	mul	r24, r23
    5b64:	80 2d       	mov	r24, r0
    5b66:	91 0d       	add	r25, r1
    5b68:	11 24       	eor	r1, r1
    5b6a:	08 95       	ret

00005b6c <sprintf>:
    5b6c:	ae e0       	ldi	r26, 0x0E	; 14
    5b6e:	b0 e0       	ldi	r27, 0x00	; 0
    5b70:	ec eb       	ldi	r30, 0xBC	; 188
    5b72:	fd e2       	ldi	r31, 0x2D	; 45
    5b74:	0c 94 fa 32 	jmp	0x65f4	; 0x65f4 <__prologue_saves__+0x1c>
    5b78:	0d 89       	ldd	r16, Y+21	; 0x15
    5b7a:	1e 89       	ldd	r17, Y+22	; 0x16
    5b7c:	86 e0       	ldi	r24, 0x06	; 6
    5b7e:	8c 83       	std	Y+4, r24	; 0x04
    5b80:	1a 83       	std	Y+2, r17	; 0x02
    5b82:	09 83       	std	Y+1, r16	; 0x01
    5b84:	8f ef       	ldi	r24, 0xFF	; 255
    5b86:	9f e7       	ldi	r25, 0x7F	; 127
    5b88:	9e 83       	std	Y+6, r25	; 0x06
    5b8a:	8d 83       	std	Y+5, r24	; 0x05
    5b8c:	ae 01       	movw	r20, r28
    5b8e:	47 5e       	subi	r20, 0xE7	; 231
    5b90:	5f 4f       	sbci	r21, 0xFF	; 255
    5b92:	ce 01       	movw	r24, r28
    5b94:	01 96       	adiw	r24, 0x01	; 1
    5b96:	6f 89       	ldd	r22, Y+23	; 0x17
    5b98:	78 8d       	ldd	r23, Y+24	; 0x18
    5b9a:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <vfprintf>
    5b9e:	ef 81       	ldd	r30, Y+7	; 0x07
    5ba0:	f8 85       	ldd	r31, Y+8	; 0x08
    5ba2:	e0 0f       	add	r30, r16
    5ba4:	f1 1f       	adc	r31, r17
    5ba6:	10 82       	st	Z, r1
    5ba8:	2e 96       	adiw	r28, 0x0e	; 14
    5baa:	e4 e0       	ldi	r30, 0x04	; 4
    5bac:	0c 94 16 33 	jmp	0x662c	; 0x662c <__epilogue_restores__+0x1c>

00005bb0 <vsnprintf>:
    5bb0:	ae e0       	ldi	r26, 0x0E	; 14
    5bb2:	b0 e0       	ldi	r27, 0x00	; 0
    5bb4:	ee ed       	ldi	r30, 0xDE	; 222
    5bb6:	fd e2       	ldi	r31, 0x2D	; 45
    5bb8:	0c 94 fa 32 	jmp	0x65f4	; 0x65f4 <__prologue_saves__+0x1c>
    5bbc:	8c 01       	movw	r16, r24
    5bbe:	86 e0       	ldi	r24, 0x06	; 6
    5bc0:	8c 83       	std	Y+4, r24	; 0x04
    5bc2:	1a 83       	std	Y+2, r17	; 0x02
    5bc4:	09 83       	std	Y+1, r16	; 0x01
    5bc6:	77 ff       	sbrs	r23, 7
    5bc8:	02 c0       	rjmp	.+4      	; 0x5bce <vsnprintf+0x1e>
    5bca:	60 e0       	ldi	r22, 0x00	; 0
    5bcc:	70 e8       	ldi	r23, 0x80	; 128
    5bce:	61 50       	subi	r22, 0x01	; 1
    5bd0:	70 40       	sbci	r23, 0x00	; 0
    5bd2:	7e 83       	std	Y+6, r23	; 0x06
    5bd4:	6d 83       	std	Y+5, r22	; 0x05
    5bd6:	ce 01       	movw	r24, r28
    5bd8:	01 96       	adiw	r24, 0x01	; 1
    5bda:	ba 01       	movw	r22, r20
    5bdc:	a9 01       	movw	r20, r18
    5bde:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <vfprintf>
    5be2:	4d 81       	ldd	r20, Y+5	; 0x05
    5be4:	5e 81       	ldd	r21, Y+6	; 0x06
    5be6:	57 fd       	sbrc	r21, 7
    5be8:	0a c0       	rjmp	.+20     	; 0x5bfe <vsnprintf+0x4e>
    5bea:	2f 81       	ldd	r18, Y+7	; 0x07
    5bec:	38 85       	ldd	r19, Y+8	; 0x08
    5bee:	42 17       	cp	r20, r18
    5bf0:	53 07       	cpc	r21, r19
    5bf2:	0c f4       	brge	.+2      	; 0x5bf6 <vsnprintf+0x46>
    5bf4:	9a 01       	movw	r18, r20
    5bf6:	02 0f       	add	r16, r18
    5bf8:	13 1f       	adc	r17, r19
    5bfa:	f8 01       	movw	r30, r16
    5bfc:	10 82       	st	Z, r1
    5bfe:	2e 96       	adiw	r28, 0x0e	; 14
    5c00:	e4 e0       	ldi	r30, 0x04	; 4
    5c02:	0c 94 16 33 	jmp	0x662c	; 0x662c <__epilogue_restores__+0x1c>

00005c06 <vfprintf>:
    5c06:	ad e0       	ldi	r26, 0x0D	; 13
    5c08:	b0 e0       	ldi	r27, 0x00	; 0
    5c0a:	e9 e0       	ldi	r30, 0x09	; 9
    5c0c:	fe e2       	ldi	r31, 0x2E	; 46
    5c0e:	0c 94 ec 32 	jmp	0x65d8	; 0x65d8 <__prologue_saves__>
    5c12:	3c 01       	movw	r6, r24
    5c14:	7d 87       	std	Y+13, r23	; 0x0d
    5c16:	6c 87       	std	Y+12, r22	; 0x0c
    5c18:	5a 01       	movw	r10, r20
    5c1a:	fc 01       	movw	r30, r24
    5c1c:	17 82       	std	Z+7, r1	; 0x07
    5c1e:	16 82       	std	Z+6, r1	; 0x06
    5c20:	83 81       	ldd	r24, Z+3	; 0x03
    5c22:	81 ff       	sbrs	r24, 1
    5c24:	c8 c1       	rjmp	.+912    	; 0x5fb6 <vfprintf+0x3b0>
    5c26:	2e 01       	movw	r4, r28
    5c28:	08 94       	sec
    5c2a:	41 1c       	adc	r4, r1
    5c2c:	51 1c       	adc	r5, r1
    5c2e:	f3 01       	movw	r30, r6
    5c30:	93 81       	ldd	r25, Z+3	; 0x03
    5c32:	ec 85       	ldd	r30, Y+12	; 0x0c
    5c34:	fd 85       	ldd	r31, Y+13	; 0x0d
    5c36:	93 fd       	sbrc	r25, 3
    5c38:	85 91       	lpm	r24, Z+
    5c3a:	93 ff       	sbrs	r25, 3
    5c3c:	81 91       	ld	r24, Z+
    5c3e:	fd 87       	std	Y+13, r31	; 0x0d
    5c40:	ec 87       	std	Y+12, r30	; 0x0c
    5c42:	88 23       	and	r24, r24
    5c44:	09 f4       	brne	.+2      	; 0x5c48 <vfprintf+0x42>
    5c46:	b3 c1       	rjmp	.+870    	; 0x5fae <vfprintf+0x3a8>
    5c48:	85 32       	cpi	r24, 0x25	; 37
    5c4a:	41 f4       	brne	.+16     	; 0x5c5c <vfprintf+0x56>
    5c4c:	93 fd       	sbrc	r25, 3
    5c4e:	85 91       	lpm	r24, Z+
    5c50:	93 ff       	sbrs	r25, 3
    5c52:	81 91       	ld	r24, Z+
    5c54:	fd 87       	std	Y+13, r31	; 0x0d
    5c56:	ec 87       	std	Y+12, r30	; 0x0c
    5c58:	85 32       	cpi	r24, 0x25	; 37
    5c5a:	29 f4       	brne	.+10     	; 0x5c66 <vfprintf+0x60>
    5c5c:	90 e0       	ldi	r25, 0x00	; 0
    5c5e:	b3 01       	movw	r22, r6
    5c60:	0e 94 62 32 	call	0x64c4	; 0x64c4 <fputc>
    5c64:	e4 cf       	rjmp	.-56     	; 0x5c2e <vfprintf+0x28>
    5c66:	ff 24       	eor	r15, r15
    5c68:	ee 24       	eor	r14, r14
    5c6a:	10 e0       	ldi	r17, 0x00	; 0
    5c6c:	10 32       	cpi	r17, 0x20	; 32
    5c6e:	b0 f4       	brcc	.+44     	; 0x5c9c <vfprintf+0x96>
    5c70:	8b 32       	cpi	r24, 0x2B	; 43
    5c72:	69 f0       	breq	.+26     	; 0x5c8e <vfprintf+0x88>
    5c74:	8c 32       	cpi	r24, 0x2C	; 44
    5c76:	28 f4       	brcc	.+10     	; 0x5c82 <vfprintf+0x7c>
    5c78:	80 32       	cpi	r24, 0x20	; 32
    5c7a:	51 f0       	breq	.+20     	; 0x5c90 <vfprintf+0x8a>
    5c7c:	83 32       	cpi	r24, 0x23	; 35
    5c7e:	71 f4       	brne	.+28     	; 0x5c9c <vfprintf+0x96>
    5c80:	0b c0       	rjmp	.+22     	; 0x5c98 <vfprintf+0x92>
    5c82:	8d 32       	cpi	r24, 0x2D	; 45
    5c84:	39 f0       	breq	.+14     	; 0x5c94 <vfprintf+0x8e>
    5c86:	80 33       	cpi	r24, 0x30	; 48
    5c88:	49 f4       	brne	.+18     	; 0x5c9c <vfprintf+0x96>
    5c8a:	11 60       	ori	r17, 0x01	; 1
    5c8c:	2c c0       	rjmp	.+88     	; 0x5ce6 <vfprintf+0xe0>
    5c8e:	12 60       	ori	r17, 0x02	; 2
    5c90:	14 60       	ori	r17, 0x04	; 4
    5c92:	29 c0       	rjmp	.+82     	; 0x5ce6 <vfprintf+0xe0>
    5c94:	18 60       	ori	r17, 0x08	; 8
    5c96:	27 c0       	rjmp	.+78     	; 0x5ce6 <vfprintf+0xe0>
    5c98:	10 61       	ori	r17, 0x10	; 16
    5c9a:	25 c0       	rjmp	.+74     	; 0x5ce6 <vfprintf+0xe0>
    5c9c:	17 fd       	sbrc	r17, 7
    5c9e:	2e c0       	rjmp	.+92     	; 0x5cfc <vfprintf+0xf6>
    5ca0:	28 2f       	mov	r18, r24
    5ca2:	20 53       	subi	r18, 0x30	; 48
    5ca4:	2a 30       	cpi	r18, 0x0A	; 10
    5ca6:	98 f4       	brcc	.+38     	; 0x5cce <vfprintf+0xc8>
    5ca8:	16 ff       	sbrs	r17, 6
    5caa:	08 c0       	rjmp	.+16     	; 0x5cbc <vfprintf+0xb6>
    5cac:	8f 2d       	mov	r24, r15
    5cae:	88 0f       	add	r24, r24
    5cb0:	f8 2e       	mov	r15, r24
    5cb2:	ff 0c       	add	r15, r15
    5cb4:	ff 0c       	add	r15, r15
    5cb6:	f8 0e       	add	r15, r24
    5cb8:	f2 0e       	add	r15, r18
    5cba:	15 c0       	rjmp	.+42     	; 0x5ce6 <vfprintf+0xe0>
    5cbc:	8e 2d       	mov	r24, r14
    5cbe:	88 0f       	add	r24, r24
    5cc0:	e8 2e       	mov	r14, r24
    5cc2:	ee 0c       	add	r14, r14
    5cc4:	ee 0c       	add	r14, r14
    5cc6:	e8 0e       	add	r14, r24
    5cc8:	e2 0e       	add	r14, r18
    5cca:	10 62       	ori	r17, 0x20	; 32
    5ccc:	0c c0       	rjmp	.+24     	; 0x5ce6 <vfprintf+0xe0>
    5cce:	8e 32       	cpi	r24, 0x2E	; 46
    5cd0:	21 f4       	brne	.+8      	; 0x5cda <vfprintf+0xd4>
    5cd2:	16 fd       	sbrc	r17, 6
    5cd4:	6c c1       	rjmp	.+728    	; 0x5fae <vfprintf+0x3a8>
    5cd6:	10 64       	ori	r17, 0x40	; 64
    5cd8:	06 c0       	rjmp	.+12     	; 0x5ce6 <vfprintf+0xe0>
    5cda:	8c 36       	cpi	r24, 0x6C	; 108
    5cdc:	11 f4       	brne	.+4      	; 0x5ce2 <vfprintf+0xdc>
    5cde:	10 68       	ori	r17, 0x80	; 128
    5ce0:	02 c0       	rjmp	.+4      	; 0x5ce6 <vfprintf+0xe0>
    5ce2:	88 36       	cpi	r24, 0x68	; 104
    5ce4:	59 f4       	brne	.+22     	; 0x5cfc <vfprintf+0xf6>
    5ce6:	ec 85       	ldd	r30, Y+12	; 0x0c
    5ce8:	fd 85       	ldd	r31, Y+13	; 0x0d
    5cea:	93 fd       	sbrc	r25, 3
    5cec:	85 91       	lpm	r24, Z+
    5cee:	93 ff       	sbrs	r25, 3
    5cf0:	81 91       	ld	r24, Z+
    5cf2:	fd 87       	std	Y+13, r31	; 0x0d
    5cf4:	ec 87       	std	Y+12, r30	; 0x0c
    5cf6:	88 23       	and	r24, r24
    5cf8:	09 f0       	breq	.+2      	; 0x5cfc <vfprintf+0xf6>
    5cfa:	b8 cf       	rjmp	.-144    	; 0x5c6c <vfprintf+0x66>
    5cfc:	98 2f       	mov	r25, r24
    5cfe:	95 54       	subi	r25, 0x45	; 69
    5d00:	93 30       	cpi	r25, 0x03	; 3
    5d02:	18 f0       	brcs	.+6      	; 0x5d0a <vfprintf+0x104>
    5d04:	90 52       	subi	r25, 0x20	; 32
    5d06:	93 30       	cpi	r25, 0x03	; 3
    5d08:	38 f4       	brcc	.+14     	; 0x5d18 <vfprintf+0x112>
    5d0a:	24 e0       	ldi	r18, 0x04	; 4
    5d0c:	30 e0       	ldi	r19, 0x00	; 0
    5d0e:	a2 0e       	add	r10, r18
    5d10:	b3 1e       	adc	r11, r19
    5d12:	3f e3       	ldi	r19, 0x3F	; 63
    5d14:	39 83       	std	Y+1, r19	; 0x01
    5d16:	0f c0       	rjmp	.+30     	; 0x5d36 <vfprintf+0x130>
    5d18:	83 36       	cpi	r24, 0x63	; 99
    5d1a:	31 f0       	breq	.+12     	; 0x5d28 <vfprintf+0x122>
    5d1c:	83 37       	cpi	r24, 0x73	; 115
    5d1e:	81 f0       	breq	.+32     	; 0x5d40 <vfprintf+0x13a>
    5d20:	83 35       	cpi	r24, 0x53	; 83
    5d22:	09 f0       	breq	.+2      	; 0x5d26 <vfprintf+0x120>
    5d24:	5a c0       	rjmp	.+180    	; 0x5dda <vfprintf+0x1d4>
    5d26:	22 c0       	rjmp	.+68     	; 0x5d6c <vfprintf+0x166>
    5d28:	f5 01       	movw	r30, r10
    5d2a:	80 81       	ld	r24, Z
    5d2c:	89 83       	std	Y+1, r24	; 0x01
    5d2e:	22 e0       	ldi	r18, 0x02	; 2
    5d30:	30 e0       	ldi	r19, 0x00	; 0
    5d32:	a2 0e       	add	r10, r18
    5d34:	b3 1e       	adc	r11, r19
    5d36:	21 e0       	ldi	r18, 0x01	; 1
    5d38:	c2 2e       	mov	r12, r18
    5d3a:	d1 2c       	mov	r13, r1
    5d3c:	42 01       	movw	r8, r4
    5d3e:	14 c0       	rjmp	.+40     	; 0x5d68 <vfprintf+0x162>
    5d40:	92 e0       	ldi	r25, 0x02	; 2
    5d42:	29 2e       	mov	r2, r25
    5d44:	31 2c       	mov	r3, r1
    5d46:	2a 0c       	add	r2, r10
    5d48:	3b 1c       	adc	r3, r11
    5d4a:	f5 01       	movw	r30, r10
    5d4c:	80 80       	ld	r8, Z
    5d4e:	91 80       	ldd	r9, Z+1	; 0x01
    5d50:	16 ff       	sbrs	r17, 6
    5d52:	03 c0       	rjmp	.+6      	; 0x5d5a <vfprintf+0x154>
    5d54:	6f 2d       	mov	r22, r15
    5d56:	70 e0       	ldi	r23, 0x00	; 0
    5d58:	02 c0       	rjmp	.+4      	; 0x5d5e <vfprintf+0x158>
    5d5a:	6f ef       	ldi	r22, 0xFF	; 255
    5d5c:	7f ef       	ldi	r23, 0xFF	; 255
    5d5e:	c4 01       	movw	r24, r8
    5d60:	0e 94 47 32 	call	0x648e	; 0x648e <strnlen>
    5d64:	6c 01       	movw	r12, r24
    5d66:	51 01       	movw	r10, r2
    5d68:	1f 77       	andi	r17, 0x7F	; 127
    5d6a:	15 c0       	rjmp	.+42     	; 0x5d96 <vfprintf+0x190>
    5d6c:	82 e0       	ldi	r24, 0x02	; 2
    5d6e:	28 2e       	mov	r2, r24
    5d70:	31 2c       	mov	r3, r1
    5d72:	2a 0c       	add	r2, r10
    5d74:	3b 1c       	adc	r3, r11
    5d76:	f5 01       	movw	r30, r10
    5d78:	80 80       	ld	r8, Z
    5d7a:	91 80       	ldd	r9, Z+1	; 0x01
    5d7c:	16 ff       	sbrs	r17, 6
    5d7e:	03 c0       	rjmp	.+6      	; 0x5d86 <vfprintf+0x180>
    5d80:	6f 2d       	mov	r22, r15
    5d82:	70 e0       	ldi	r23, 0x00	; 0
    5d84:	02 c0       	rjmp	.+4      	; 0x5d8a <vfprintf+0x184>
    5d86:	6f ef       	ldi	r22, 0xFF	; 255
    5d88:	7f ef       	ldi	r23, 0xFF	; 255
    5d8a:	c4 01       	movw	r24, r8
    5d8c:	0e 94 3c 32 	call	0x6478	; 0x6478 <strnlen_P>
    5d90:	6c 01       	movw	r12, r24
    5d92:	10 68       	ori	r17, 0x80	; 128
    5d94:	51 01       	movw	r10, r2
    5d96:	13 fd       	sbrc	r17, 3
    5d98:	1c c0       	rjmp	.+56     	; 0x5dd2 <vfprintf+0x1cc>
    5d9a:	06 c0       	rjmp	.+12     	; 0x5da8 <vfprintf+0x1a2>
    5d9c:	80 e2       	ldi	r24, 0x20	; 32
    5d9e:	90 e0       	ldi	r25, 0x00	; 0
    5da0:	b3 01       	movw	r22, r6
    5da2:	0e 94 62 32 	call	0x64c4	; 0x64c4 <fputc>
    5da6:	ea 94       	dec	r14
    5da8:	8e 2d       	mov	r24, r14
    5daa:	90 e0       	ldi	r25, 0x00	; 0
    5dac:	c8 16       	cp	r12, r24
    5dae:	d9 06       	cpc	r13, r25
    5db0:	a8 f3       	brcs	.-22     	; 0x5d9c <vfprintf+0x196>
    5db2:	0f c0       	rjmp	.+30     	; 0x5dd2 <vfprintf+0x1cc>
    5db4:	f4 01       	movw	r30, r8
    5db6:	17 fd       	sbrc	r17, 7
    5db8:	85 91       	lpm	r24, Z+
    5dba:	17 ff       	sbrs	r17, 7
    5dbc:	81 91       	ld	r24, Z+
    5dbe:	4f 01       	movw	r8, r30
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	b3 01       	movw	r22, r6
    5dc4:	0e 94 62 32 	call	0x64c4	; 0x64c4 <fputc>
    5dc8:	e1 10       	cpse	r14, r1
    5dca:	ea 94       	dec	r14
    5dcc:	08 94       	sec
    5dce:	c1 08       	sbc	r12, r1
    5dd0:	d1 08       	sbc	r13, r1
    5dd2:	c1 14       	cp	r12, r1
    5dd4:	d1 04       	cpc	r13, r1
    5dd6:	71 f7       	brne	.-36     	; 0x5db4 <vfprintf+0x1ae>
    5dd8:	e7 c0       	rjmp	.+462    	; 0x5fa8 <vfprintf+0x3a2>
    5dda:	84 36       	cpi	r24, 0x64	; 100
    5ddc:	11 f0       	breq	.+4      	; 0x5de2 <vfprintf+0x1dc>
    5dde:	89 36       	cpi	r24, 0x69	; 105
    5de0:	51 f5       	brne	.+84     	; 0x5e36 <vfprintf+0x230>
    5de2:	f5 01       	movw	r30, r10
    5de4:	17 ff       	sbrs	r17, 7
    5de6:	07 c0       	rjmp	.+14     	; 0x5df6 <vfprintf+0x1f0>
    5de8:	80 81       	ld	r24, Z
    5dea:	91 81       	ldd	r25, Z+1	; 0x01
    5dec:	a2 81       	ldd	r26, Z+2	; 0x02
    5dee:	b3 81       	ldd	r27, Z+3	; 0x03
    5df0:	24 e0       	ldi	r18, 0x04	; 4
    5df2:	30 e0       	ldi	r19, 0x00	; 0
    5df4:	08 c0       	rjmp	.+16     	; 0x5e06 <vfprintf+0x200>
    5df6:	80 81       	ld	r24, Z
    5df8:	91 81       	ldd	r25, Z+1	; 0x01
    5dfa:	aa 27       	eor	r26, r26
    5dfc:	97 fd       	sbrc	r25, 7
    5dfe:	a0 95       	com	r26
    5e00:	ba 2f       	mov	r27, r26
    5e02:	22 e0       	ldi	r18, 0x02	; 2
    5e04:	30 e0       	ldi	r19, 0x00	; 0
    5e06:	a2 0e       	add	r10, r18
    5e08:	b3 1e       	adc	r11, r19
    5e0a:	01 2f       	mov	r16, r17
    5e0c:	0f 76       	andi	r16, 0x6F	; 111
    5e0e:	b7 ff       	sbrs	r27, 7
    5e10:	08 c0       	rjmp	.+16     	; 0x5e22 <vfprintf+0x21c>
    5e12:	b0 95       	com	r27
    5e14:	a0 95       	com	r26
    5e16:	90 95       	com	r25
    5e18:	81 95       	neg	r24
    5e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5e1c:	af 4f       	sbci	r26, 0xFF	; 255
    5e1e:	bf 4f       	sbci	r27, 0xFF	; 255
    5e20:	00 68       	ori	r16, 0x80	; 128
    5e22:	bc 01       	movw	r22, r24
    5e24:	cd 01       	movw	r24, r26
    5e26:	a2 01       	movw	r20, r4
    5e28:	2a e0       	ldi	r18, 0x0A	; 10
    5e2a:	30 e0       	ldi	r19, 0x00	; 0
    5e2c:	0e 94 8e 32 	call	0x651c	; 0x651c <__ultoa_invert>
    5e30:	d8 2e       	mov	r13, r24
    5e32:	d4 18       	sub	r13, r4
    5e34:	3f c0       	rjmp	.+126    	; 0x5eb4 <vfprintf+0x2ae>
    5e36:	85 37       	cpi	r24, 0x75	; 117
    5e38:	21 f4       	brne	.+8      	; 0x5e42 <vfprintf+0x23c>
    5e3a:	1f 7e       	andi	r17, 0xEF	; 239
    5e3c:	2a e0       	ldi	r18, 0x0A	; 10
    5e3e:	30 e0       	ldi	r19, 0x00	; 0
    5e40:	20 c0       	rjmp	.+64     	; 0x5e82 <vfprintf+0x27c>
    5e42:	19 7f       	andi	r17, 0xF9	; 249
    5e44:	8f 36       	cpi	r24, 0x6F	; 111
    5e46:	a9 f0       	breq	.+42     	; 0x5e72 <vfprintf+0x26c>
    5e48:	80 37       	cpi	r24, 0x70	; 112
    5e4a:	20 f4       	brcc	.+8      	; 0x5e54 <vfprintf+0x24e>
    5e4c:	88 35       	cpi	r24, 0x58	; 88
    5e4e:	09 f0       	breq	.+2      	; 0x5e52 <vfprintf+0x24c>
    5e50:	ae c0       	rjmp	.+348    	; 0x5fae <vfprintf+0x3a8>
    5e52:	0b c0       	rjmp	.+22     	; 0x5e6a <vfprintf+0x264>
    5e54:	80 37       	cpi	r24, 0x70	; 112
    5e56:	21 f0       	breq	.+8      	; 0x5e60 <vfprintf+0x25a>
    5e58:	88 37       	cpi	r24, 0x78	; 120
    5e5a:	09 f0       	breq	.+2      	; 0x5e5e <vfprintf+0x258>
    5e5c:	a8 c0       	rjmp	.+336    	; 0x5fae <vfprintf+0x3a8>
    5e5e:	01 c0       	rjmp	.+2      	; 0x5e62 <vfprintf+0x25c>
    5e60:	10 61       	ori	r17, 0x10	; 16
    5e62:	14 ff       	sbrs	r17, 4
    5e64:	09 c0       	rjmp	.+18     	; 0x5e78 <vfprintf+0x272>
    5e66:	14 60       	ori	r17, 0x04	; 4
    5e68:	07 c0       	rjmp	.+14     	; 0x5e78 <vfprintf+0x272>
    5e6a:	14 ff       	sbrs	r17, 4
    5e6c:	08 c0       	rjmp	.+16     	; 0x5e7e <vfprintf+0x278>
    5e6e:	16 60       	ori	r17, 0x06	; 6
    5e70:	06 c0       	rjmp	.+12     	; 0x5e7e <vfprintf+0x278>
    5e72:	28 e0       	ldi	r18, 0x08	; 8
    5e74:	30 e0       	ldi	r19, 0x00	; 0
    5e76:	05 c0       	rjmp	.+10     	; 0x5e82 <vfprintf+0x27c>
    5e78:	20 e1       	ldi	r18, 0x10	; 16
    5e7a:	30 e0       	ldi	r19, 0x00	; 0
    5e7c:	02 c0       	rjmp	.+4      	; 0x5e82 <vfprintf+0x27c>
    5e7e:	20 e1       	ldi	r18, 0x10	; 16
    5e80:	32 e0       	ldi	r19, 0x02	; 2
    5e82:	f5 01       	movw	r30, r10
    5e84:	17 ff       	sbrs	r17, 7
    5e86:	07 c0       	rjmp	.+14     	; 0x5e96 <vfprintf+0x290>
    5e88:	60 81       	ld	r22, Z
    5e8a:	71 81       	ldd	r23, Z+1	; 0x01
    5e8c:	82 81       	ldd	r24, Z+2	; 0x02
    5e8e:	93 81       	ldd	r25, Z+3	; 0x03
    5e90:	44 e0       	ldi	r20, 0x04	; 4
    5e92:	50 e0       	ldi	r21, 0x00	; 0
    5e94:	06 c0       	rjmp	.+12     	; 0x5ea2 <vfprintf+0x29c>
    5e96:	60 81       	ld	r22, Z
    5e98:	71 81       	ldd	r23, Z+1	; 0x01
    5e9a:	80 e0       	ldi	r24, 0x00	; 0
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	42 e0       	ldi	r20, 0x02	; 2
    5ea0:	50 e0       	ldi	r21, 0x00	; 0
    5ea2:	a4 0e       	add	r10, r20
    5ea4:	b5 1e       	adc	r11, r21
    5ea6:	a2 01       	movw	r20, r4
    5ea8:	0e 94 8e 32 	call	0x651c	; 0x651c <__ultoa_invert>
    5eac:	d8 2e       	mov	r13, r24
    5eae:	d4 18       	sub	r13, r4
    5eb0:	01 2f       	mov	r16, r17
    5eb2:	0f 77       	andi	r16, 0x7F	; 127
    5eb4:	06 ff       	sbrs	r16, 6
    5eb6:	09 c0       	rjmp	.+18     	; 0x5eca <vfprintf+0x2c4>
    5eb8:	0e 7f       	andi	r16, 0xFE	; 254
    5eba:	df 14       	cp	r13, r15
    5ebc:	30 f4       	brcc	.+12     	; 0x5eca <vfprintf+0x2c4>
    5ebe:	04 ff       	sbrs	r16, 4
    5ec0:	06 c0       	rjmp	.+12     	; 0x5ece <vfprintf+0x2c8>
    5ec2:	02 fd       	sbrc	r16, 2
    5ec4:	04 c0       	rjmp	.+8      	; 0x5ece <vfprintf+0x2c8>
    5ec6:	0f 7e       	andi	r16, 0xEF	; 239
    5ec8:	02 c0       	rjmp	.+4      	; 0x5ece <vfprintf+0x2c8>
    5eca:	1d 2d       	mov	r17, r13
    5ecc:	01 c0       	rjmp	.+2      	; 0x5ed0 <vfprintf+0x2ca>
    5ece:	1f 2d       	mov	r17, r15
    5ed0:	80 2f       	mov	r24, r16
    5ed2:	90 e0       	ldi	r25, 0x00	; 0
    5ed4:	04 ff       	sbrs	r16, 4
    5ed6:	0c c0       	rjmp	.+24     	; 0x5ef0 <vfprintf+0x2ea>
    5ed8:	fe 01       	movw	r30, r28
    5eda:	ed 0d       	add	r30, r13
    5edc:	f1 1d       	adc	r31, r1
    5ede:	20 81       	ld	r18, Z
    5ee0:	20 33       	cpi	r18, 0x30	; 48
    5ee2:	11 f4       	brne	.+4      	; 0x5ee8 <vfprintf+0x2e2>
    5ee4:	09 7e       	andi	r16, 0xE9	; 233
    5ee6:	09 c0       	rjmp	.+18     	; 0x5efa <vfprintf+0x2f4>
    5ee8:	02 ff       	sbrs	r16, 2
    5eea:	06 c0       	rjmp	.+12     	; 0x5ef8 <vfprintf+0x2f2>
    5eec:	1e 5f       	subi	r17, 0xFE	; 254
    5eee:	05 c0       	rjmp	.+10     	; 0x5efa <vfprintf+0x2f4>
    5ef0:	86 78       	andi	r24, 0x86	; 134
    5ef2:	90 70       	andi	r25, 0x00	; 0
    5ef4:	00 97       	sbiw	r24, 0x00	; 0
    5ef6:	09 f0       	breq	.+2      	; 0x5efa <vfprintf+0x2f4>
    5ef8:	1f 5f       	subi	r17, 0xFF	; 255
    5efa:	80 2e       	mov	r8, r16
    5efc:	99 24       	eor	r9, r9
    5efe:	03 fd       	sbrc	r16, 3
    5f00:	12 c0       	rjmp	.+36     	; 0x5f26 <vfprintf+0x320>
    5f02:	00 ff       	sbrs	r16, 0
    5f04:	0d c0       	rjmp	.+26     	; 0x5f20 <vfprintf+0x31a>
    5f06:	fd 2c       	mov	r15, r13
    5f08:	1e 15       	cp	r17, r14
    5f0a:	50 f4       	brcc	.+20     	; 0x5f20 <vfprintf+0x31a>
    5f0c:	fe 0c       	add	r15, r14
    5f0e:	f1 1a       	sub	r15, r17
    5f10:	1e 2d       	mov	r17, r14
    5f12:	06 c0       	rjmp	.+12     	; 0x5f20 <vfprintf+0x31a>
    5f14:	80 e2       	ldi	r24, 0x20	; 32
    5f16:	90 e0       	ldi	r25, 0x00	; 0
    5f18:	b3 01       	movw	r22, r6
    5f1a:	0e 94 62 32 	call	0x64c4	; 0x64c4 <fputc>
    5f1e:	1f 5f       	subi	r17, 0xFF	; 255
    5f20:	1e 15       	cp	r17, r14
    5f22:	c0 f3       	brcs	.-16     	; 0x5f14 <vfprintf+0x30e>
    5f24:	04 c0       	rjmp	.+8      	; 0x5f2e <vfprintf+0x328>
    5f26:	1e 15       	cp	r17, r14
    5f28:	10 f4       	brcc	.+4      	; 0x5f2e <vfprintf+0x328>
    5f2a:	e1 1a       	sub	r14, r17
    5f2c:	01 c0       	rjmp	.+2      	; 0x5f30 <vfprintf+0x32a>
    5f2e:	ee 24       	eor	r14, r14
    5f30:	84 fe       	sbrs	r8, 4
    5f32:	0f c0       	rjmp	.+30     	; 0x5f52 <vfprintf+0x34c>
    5f34:	80 e3       	ldi	r24, 0x30	; 48
    5f36:	90 e0       	ldi	r25, 0x00	; 0
    5f38:	b3 01       	movw	r22, r6
    5f3a:	0e 94 62 32 	call	0x64c4	; 0x64c4 <fputc>
    5f3e:	82 fe       	sbrs	r8, 2
    5f40:	1f c0       	rjmp	.+62     	; 0x5f80 <vfprintf+0x37a>
    5f42:	81 fe       	sbrs	r8, 1
    5f44:	03 c0       	rjmp	.+6      	; 0x5f4c <vfprintf+0x346>
    5f46:	88 e5       	ldi	r24, 0x58	; 88
    5f48:	90 e0       	ldi	r25, 0x00	; 0
    5f4a:	10 c0       	rjmp	.+32     	; 0x5f6c <vfprintf+0x366>
    5f4c:	88 e7       	ldi	r24, 0x78	; 120
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	0d c0       	rjmp	.+26     	; 0x5f6c <vfprintf+0x366>
    5f52:	c4 01       	movw	r24, r8
    5f54:	86 78       	andi	r24, 0x86	; 134
    5f56:	90 70       	andi	r25, 0x00	; 0
    5f58:	00 97       	sbiw	r24, 0x00	; 0
    5f5a:	91 f0       	breq	.+36     	; 0x5f80 <vfprintf+0x37a>
    5f5c:	81 fc       	sbrc	r8, 1
    5f5e:	02 c0       	rjmp	.+4      	; 0x5f64 <vfprintf+0x35e>
    5f60:	80 e2       	ldi	r24, 0x20	; 32
    5f62:	01 c0       	rjmp	.+2      	; 0x5f66 <vfprintf+0x360>
    5f64:	8b e2       	ldi	r24, 0x2B	; 43
    5f66:	07 fd       	sbrc	r16, 7
    5f68:	8d e2       	ldi	r24, 0x2D	; 45
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	b3 01       	movw	r22, r6
    5f6e:	0e 94 62 32 	call	0x64c4	; 0x64c4 <fputc>
    5f72:	06 c0       	rjmp	.+12     	; 0x5f80 <vfprintf+0x37a>
    5f74:	80 e3       	ldi	r24, 0x30	; 48
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	b3 01       	movw	r22, r6
    5f7a:	0e 94 62 32 	call	0x64c4	; 0x64c4 <fputc>
    5f7e:	fa 94       	dec	r15
    5f80:	df 14       	cp	r13, r15
    5f82:	c0 f3       	brcs	.-16     	; 0x5f74 <vfprintf+0x36e>
    5f84:	da 94       	dec	r13
    5f86:	f2 01       	movw	r30, r4
    5f88:	ed 0d       	add	r30, r13
    5f8a:	f1 1d       	adc	r31, r1
    5f8c:	80 81       	ld	r24, Z
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	b3 01       	movw	r22, r6
    5f92:	0e 94 62 32 	call	0x64c4	; 0x64c4 <fputc>
    5f96:	dd 20       	and	r13, r13
    5f98:	a9 f7       	brne	.-22     	; 0x5f84 <vfprintf+0x37e>
    5f9a:	06 c0       	rjmp	.+12     	; 0x5fa8 <vfprintf+0x3a2>
    5f9c:	80 e2       	ldi	r24, 0x20	; 32
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	b3 01       	movw	r22, r6
    5fa2:	0e 94 62 32 	call	0x64c4	; 0x64c4 <fputc>
    5fa6:	ea 94       	dec	r14
    5fa8:	ee 20       	and	r14, r14
    5faa:	c1 f7       	brne	.-16     	; 0x5f9c <vfprintf+0x396>
    5fac:	40 ce       	rjmp	.-896    	; 0x5c2e <vfprintf+0x28>
    5fae:	f3 01       	movw	r30, r6
    5fb0:	86 81       	ldd	r24, Z+6	; 0x06
    5fb2:	97 81       	ldd	r25, Z+7	; 0x07
    5fb4:	02 c0       	rjmp	.+4      	; 0x5fba <vfprintf+0x3b4>
    5fb6:	8f ef       	ldi	r24, 0xFF	; 255
    5fb8:	9f ef       	ldi	r25, 0xFF	; 255
    5fba:	2d 96       	adiw	r28, 0x0d	; 13
    5fbc:	e2 e1       	ldi	r30, 0x12	; 18
    5fbe:	0c 94 08 33 	jmp	0x6610	; 0x6610 <__epilogue_restores__>

00005fc2 <__eerd_block_m328p>:
    5fc2:	dc 01       	movw	r26, r24
    5fc4:	cb 01       	movw	r24, r22

00005fc6 <__eerd_blraw_m328p>:
    5fc6:	fc 01       	movw	r30, r24
    5fc8:	f9 99       	sbic	0x1f, 1	; 31
    5fca:	fe cf       	rjmp	.-4      	; 0x5fc8 <__eerd_blraw_m328p+0x2>
    5fcc:	06 c0       	rjmp	.+12     	; 0x5fda <__eerd_blraw_m328p+0x14>
    5fce:	f2 bd       	out	0x22, r31	; 34
    5fd0:	e1 bd       	out	0x21, r30	; 33
    5fd2:	f8 9a       	sbi	0x1f, 0	; 31
    5fd4:	31 96       	adiw	r30, 0x01	; 1
    5fd6:	00 b4       	in	r0, 0x20	; 32
    5fd8:	0d 92       	st	X+, r0
    5fda:	41 50       	subi	r20, 0x01	; 1
    5fdc:	50 40       	sbci	r21, 0x00	; 0
    5fde:	b8 f7       	brcc	.-18     	; 0x5fce <__eerd_blraw_m328p+0x8>
    5fe0:	08 95       	ret

00005fe2 <__eewr_block_m328p>:
    5fe2:	dc 01       	movw	r26, r24
    5fe4:	cb 01       	movw	r24, r22
    5fe6:	03 c0       	rjmp	.+6      	; 0x5fee <__eewr_block_m328p+0xc>
    5fe8:	2d 91       	ld	r18, X+
    5fea:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__eewr_r18_m328p>
    5fee:	41 50       	subi	r20, 0x01	; 1
    5ff0:	50 40       	sbci	r21, 0x00	; 0
    5ff2:	d0 f7       	brcc	.-12     	; 0x5fe8 <__eewr_block_m328p+0x6>
    5ff4:	08 95       	ret

00005ff6 <__eewr_byte_m328p>:
    5ff6:	26 2f       	mov	r18, r22

00005ff8 <__eewr_r18_m328p>:
    5ff8:	f9 99       	sbic	0x1f, 1	; 31
    5ffa:	fe cf       	rjmp	.-4      	; 0x5ff8 <__eewr_r18_m328p>
    5ffc:	1f ba       	out	0x1f, r1	; 31
    5ffe:	92 bd       	out	0x22, r25	; 34
    6000:	81 bd       	out	0x21, r24	; 33
    6002:	20 bd       	out	0x20, r18	; 32
    6004:	0f b6       	in	r0, 0x3f	; 63
    6006:	f8 94       	cli
    6008:	fa 9a       	sbi	0x1f, 2	; 31
    600a:	f9 9a       	sbi	0x1f, 1	; 31
    600c:	0f be       	out	0x3f, r0	; 63
    600e:	01 96       	adiw	r24, 0x01	; 1
    6010:	08 95       	ret

00006012 <dtoa_prf>:
    6012:	a9 e0       	ldi	r26, 0x09	; 9
    6014:	b0 e0       	ldi	r27, 0x00	; 0
    6016:	ef e0       	ldi	r30, 0x0F	; 15
    6018:	f0 e3       	ldi	r31, 0x30	; 48
    601a:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__prologue_saves__+0x8>
    601e:	6a 01       	movw	r12, r20
    6020:	12 2f       	mov	r17, r18
    6022:	f0 2e       	mov	r15, r16
    6024:	2b e3       	ldi	r18, 0x3B	; 59
    6026:	20 17       	cp	r18, r16
    6028:	18 f0       	brcs	.+6      	; 0x6030 <dtoa_prf+0x1e>
    602a:	b0 2e       	mov	r11, r16
    602c:	b3 94       	inc	r11
    602e:	02 c0       	rjmp	.+4      	; 0x6034 <dtoa_prf+0x22>
    6030:	3c e3       	ldi	r19, 0x3C	; 60
    6032:	b3 2e       	mov	r11, r19
    6034:	ae 01       	movw	r20, r28
    6036:	4f 5f       	subi	r20, 0xFF	; 255
    6038:	5f 4f       	sbci	r21, 0xFF	; 255
    603a:	27 e0       	ldi	r18, 0x07	; 7
    603c:	0b 2d       	mov	r16, r11
    603e:	0e 94 61 31 	call	0x62c2	; 0x62c2 <__ftoa_engine>
    6042:	bc 01       	movw	r22, r24
    6044:	a9 81       	ldd	r26, Y+1	; 0x01
    6046:	b0 e0       	ldi	r27, 0x00	; 0
    6048:	cd 01       	movw	r24, r26
    604a:	89 70       	andi	r24, 0x09	; 9
    604c:	90 70       	andi	r25, 0x00	; 0
    604e:	81 30       	cpi	r24, 0x01	; 1
    6050:	91 05       	cpc	r25, r1
    6052:	31 f0       	breq	.+12     	; 0x6060 <dtoa_prf+0x4e>
    6054:	e1 fc       	sbrc	r14, 1
    6056:	06 c0       	rjmp	.+12     	; 0x6064 <dtoa_prf+0x52>
    6058:	e0 fe       	sbrs	r14, 0
    605a:	06 c0       	rjmp	.+12     	; 0x6068 <dtoa_prf+0x56>
    605c:	40 e2       	ldi	r20, 0x20	; 32
    605e:	05 c0       	rjmp	.+10     	; 0x606a <dtoa_prf+0x58>
    6060:	4d e2       	ldi	r20, 0x2D	; 45
    6062:	03 c0       	rjmp	.+6      	; 0x606a <dtoa_prf+0x58>
    6064:	4b e2       	ldi	r20, 0x2B	; 43
    6066:	01 c0       	rjmp	.+2      	; 0x606a <dtoa_prf+0x58>
    6068:	40 e0       	ldi	r20, 0x00	; 0
    606a:	a3 ff       	sbrs	r26, 3
    606c:	36 c0       	rjmp	.+108    	; 0x60da <dtoa_prf+0xc8>
    606e:	44 23       	and	r20, r20
    6070:	11 f0       	breq	.+4      	; 0x6076 <dtoa_prf+0x64>
    6072:	84 e0       	ldi	r24, 0x04	; 4
    6074:	01 c0       	rjmp	.+2      	; 0x6078 <dtoa_prf+0x66>
    6076:	83 e0       	ldi	r24, 0x03	; 3
    6078:	81 17       	cp	r24, r17
    607a:	10 f4       	brcc	.+4      	; 0x6080 <dtoa_prf+0x6e>
    607c:	18 1b       	sub	r17, r24
    607e:	01 c0       	rjmp	.+2      	; 0x6082 <dtoa_prf+0x70>
    6080:	10 e0       	ldi	r17, 0x00	; 0
    6082:	e4 fc       	sbrc	r14, 4
    6084:	0b c0       	rjmp	.+22     	; 0x609c <dtoa_prf+0x8a>
    6086:	91 2f       	mov	r25, r17
    6088:	f6 01       	movw	r30, r12
    608a:	80 e2       	ldi	r24, 0x20	; 32
    608c:	02 c0       	rjmp	.+4      	; 0x6092 <dtoa_prf+0x80>
    608e:	81 93       	st	Z+, r24
    6090:	91 50       	subi	r25, 0x01	; 1
    6092:	99 23       	and	r25, r25
    6094:	e1 f7       	brne	.-8      	; 0x608e <dtoa_prf+0x7c>
    6096:	c1 0e       	add	r12, r17
    6098:	d1 1c       	adc	r13, r1
    609a:	10 e0       	ldi	r17, 0x00	; 0
    609c:	44 23       	and	r20, r20
    609e:	19 f0       	breq	.+6      	; 0x60a6 <dtoa_prf+0x94>
    60a0:	f6 01       	movw	r30, r12
    60a2:	41 93       	st	Z+, r20
    60a4:	6f 01       	movw	r12, r30
    60a6:	e2 fe       	sbrs	r14, 2
    60a8:	05 c0       	rjmp	.+10     	; 0x60b4 <dtoa_prf+0xa2>
    60aa:	8e e4       	ldi	r24, 0x4E	; 78
    60ac:	f6 01       	movw	r30, r12
    60ae:	80 83       	st	Z, r24
    60b0:	91 e4       	ldi	r25, 0x41	; 65
    60b2:	04 c0       	rjmp	.+8      	; 0x60bc <dtoa_prf+0xaa>
    60b4:	8e e6       	ldi	r24, 0x6E	; 110
    60b6:	f6 01       	movw	r30, r12
    60b8:	80 83       	st	Z, r24
    60ba:	91 e6       	ldi	r25, 0x61	; 97
    60bc:	91 83       	std	Z+1, r25	; 0x01
    60be:	82 83       	std	Z+2, r24	; 0x02
    60c0:	83 e0       	ldi	r24, 0x03	; 3
    60c2:	90 e0       	ldi	r25, 0x00	; 0
    60c4:	c8 0e       	add	r12, r24
    60c6:	d9 1e       	adc	r13, r25
    60c8:	81 2f       	mov	r24, r17
    60ca:	f6 01       	movw	r30, r12
    60cc:	90 e2       	ldi	r25, 0x20	; 32
    60ce:	02 c0       	rjmp	.+4      	; 0x60d4 <dtoa_prf+0xc2>
    60d0:	91 93       	st	Z+, r25
    60d2:	81 50       	subi	r24, 0x01	; 1
    60d4:	88 23       	and	r24, r24
    60d6:	e1 f7       	brne	.-8      	; 0x60d0 <dtoa_prf+0xbe>
    60d8:	3a c0       	rjmp	.+116    	; 0x614e <dtoa_prf+0x13c>
    60da:	a2 ff       	sbrs	r26, 2
    60dc:	3f c0       	rjmp	.+126    	; 0x615c <dtoa_prf+0x14a>
    60de:	44 23       	and	r20, r20
    60e0:	11 f0       	breq	.+4      	; 0x60e6 <dtoa_prf+0xd4>
    60e2:	84 e0       	ldi	r24, 0x04	; 4
    60e4:	01 c0       	rjmp	.+2      	; 0x60e8 <dtoa_prf+0xd6>
    60e6:	83 e0       	ldi	r24, 0x03	; 3
    60e8:	81 17       	cp	r24, r17
    60ea:	10 f4       	brcc	.+4      	; 0x60f0 <dtoa_prf+0xde>
    60ec:	18 1b       	sub	r17, r24
    60ee:	01 c0       	rjmp	.+2      	; 0x60f2 <dtoa_prf+0xe0>
    60f0:	10 e0       	ldi	r17, 0x00	; 0
    60f2:	e4 fc       	sbrc	r14, 4
    60f4:	0b c0       	rjmp	.+22     	; 0x610c <dtoa_prf+0xfa>
    60f6:	91 2f       	mov	r25, r17
    60f8:	f6 01       	movw	r30, r12
    60fa:	80 e2       	ldi	r24, 0x20	; 32
    60fc:	02 c0       	rjmp	.+4      	; 0x6102 <dtoa_prf+0xf0>
    60fe:	81 93       	st	Z+, r24
    6100:	91 50       	subi	r25, 0x01	; 1
    6102:	99 23       	and	r25, r25
    6104:	e1 f7       	brne	.-8      	; 0x60fe <dtoa_prf+0xec>
    6106:	c1 0e       	add	r12, r17
    6108:	d1 1c       	adc	r13, r1
    610a:	10 e0       	ldi	r17, 0x00	; 0
    610c:	44 23       	and	r20, r20
    610e:	19 f0       	breq	.+6      	; 0x6116 <dtoa_prf+0x104>
    6110:	f6 01       	movw	r30, r12
    6112:	41 93       	st	Z+, r20
    6114:	6f 01       	movw	r12, r30
    6116:	e2 fe       	sbrs	r14, 2
    6118:	07 c0       	rjmp	.+14     	; 0x6128 <dtoa_prf+0x116>
    611a:	89 e4       	ldi	r24, 0x49	; 73
    611c:	f6 01       	movw	r30, r12
    611e:	80 83       	st	Z, r24
    6120:	8e e4       	ldi	r24, 0x4E	; 78
    6122:	81 83       	std	Z+1, r24	; 0x01
    6124:	86 e4       	ldi	r24, 0x46	; 70
    6126:	06 c0       	rjmp	.+12     	; 0x6134 <dtoa_prf+0x122>
    6128:	89 e6       	ldi	r24, 0x69	; 105
    612a:	f6 01       	movw	r30, r12
    612c:	80 83       	st	Z, r24
    612e:	8e e6       	ldi	r24, 0x6E	; 110
    6130:	81 83       	std	Z+1, r24	; 0x01
    6132:	86 e6       	ldi	r24, 0x66	; 102
    6134:	82 83       	std	Z+2, r24	; 0x02
    6136:	83 e0       	ldi	r24, 0x03	; 3
    6138:	90 e0       	ldi	r25, 0x00	; 0
    613a:	c8 0e       	add	r12, r24
    613c:	d9 1e       	adc	r13, r25
    613e:	81 2f       	mov	r24, r17
    6140:	f6 01       	movw	r30, r12
    6142:	90 e2       	ldi	r25, 0x20	; 32
    6144:	02 c0       	rjmp	.+4      	; 0x614a <dtoa_prf+0x138>
    6146:	91 93       	st	Z+, r25
    6148:	81 50       	subi	r24, 0x01	; 1
    614a:	88 23       	and	r24, r24
    614c:	e1 f7       	brne	.-8      	; 0x6146 <dtoa_prf+0x134>
    614e:	c1 0e       	add	r12, r17
    6150:	d1 1c       	adc	r13, r1
    6152:	f6 01       	movw	r30, r12
    6154:	10 82       	st	Z, r1
    6156:	8e ef       	ldi	r24, 0xFE	; 254
    6158:	9f ef       	ldi	r25, 0xFF	; 255
    615a:	af c0       	rjmp	.+350    	; 0x62ba <dtoa_prf+0x2a8>
    615c:	21 e0       	ldi	r18, 0x01	; 1
    615e:	30 e0       	ldi	r19, 0x00	; 0
    6160:	44 23       	and	r20, r20
    6162:	11 f4       	brne	.+4      	; 0x6168 <dtoa_prf+0x156>
    6164:	20 e0       	ldi	r18, 0x00	; 0
    6166:	30 e0       	ldi	r19, 0x00	; 0
    6168:	16 16       	cp	r1, r22
    616a:	17 06       	cpc	r1, r23
    616c:	1c f4       	brge	.+6      	; 0x6174 <dtoa_prf+0x162>
    616e:	cb 01       	movw	r24, r22
    6170:	01 96       	adiw	r24, 0x01	; 1
    6172:	02 c0       	rjmp	.+4      	; 0x6178 <dtoa_prf+0x166>
    6174:	81 e0       	ldi	r24, 0x01	; 1
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	28 0f       	add	r18, r24
    617a:	39 1f       	adc	r19, r25
    617c:	ff 20       	and	r15, r15
    617e:	21 f0       	breq	.+8      	; 0x6188 <dtoa_prf+0x176>
    6180:	8f 2d       	mov	r24, r15
    6182:	90 e0       	ldi	r25, 0x00	; 0
    6184:	01 96       	adiw	r24, 0x01	; 1
    6186:	02 c0       	rjmp	.+4      	; 0x618c <dtoa_prf+0x17a>
    6188:	80 e0       	ldi	r24, 0x00	; 0
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	82 0f       	add	r24, r18
    618e:	93 1f       	adc	r25, r19
    6190:	21 2f       	mov	r18, r17
    6192:	30 e0       	ldi	r19, 0x00	; 0
    6194:	82 17       	cp	r24, r18
    6196:	93 07       	cpc	r25, r19
    6198:	1c f4       	brge	.+6      	; 0x61a0 <dtoa_prf+0x18e>
    619a:	51 2f       	mov	r21, r17
    619c:	58 1b       	sub	r21, r24
    619e:	01 c0       	rjmp	.+2      	; 0x61a2 <dtoa_prf+0x190>
    61a0:	50 e0       	ldi	r21, 0x00	; 0
    61a2:	8e 2d       	mov	r24, r14
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	9c 01       	movw	r18, r24
    61a8:	20 71       	andi	r18, 0x10	; 16
    61aa:	30 70       	andi	r19, 0x00	; 0
    61ac:	e4 fc       	sbrc	r14, 4
    61ae:	0d c0       	rjmp	.+26     	; 0x61ca <dtoa_prf+0x1b8>
    61b0:	e3 fc       	sbrc	r14, 3
    61b2:	0b c0       	rjmp	.+22     	; 0x61ca <dtoa_prf+0x1b8>
    61b4:	85 2f       	mov	r24, r21
    61b6:	f6 01       	movw	r30, r12
    61b8:	90 e2       	ldi	r25, 0x20	; 32
    61ba:	02 c0       	rjmp	.+4      	; 0x61c0 <dtoa_prf+0x1ae>
    61bc:	91 93       	st	Z+, r25
    61be:	81 50       	subi	r24, 0x01	; 1
    61c0:	88 23       	and	r24, r24
    61c2:	e1 f7       	brne	.-8      	; 0x61bc <dtoa_prf+0x1aa>
    61c4:	c5 0e       	add	r12, r21
    61c6:	d1 1c       	adc	r13, r1
    61c8:	50 e0       	ldi	r21, 0x00	; 0
    61ca:	44 23       	and	r20, r20
    61cc:	19 f0       	breq	.+6      	; 0x61d4 <dtoa_prf+0x1c2>
    61ce:	f6 01       	movw	r30, r12
    61d0:	41 93       	st	Z+, r20
    61d2:	6f 01       	movw	r12, r30
    61d4:	21 15       	cp	r18, r1
    61d6:	31 05       	cpc	r19, r1
    61d8:	59 f4       	brne	.+22     	; 0x61f0 <dtoa_prf+0x1de>
    61da:	85 2f       	mov	r24, r21
    61dc:	f6 01       	movw	r30, r12
    61de:	90 e3       	ldi	r25, 0x30	; 48
    61e0:	02 c0       	rjmp	.+4      	; 0x61e6 <dtoa_prf+0x1d4>
    61e2:	91 93       	st	Z+, r25
    61e4:	81 50       	subi	r24, 0x01	; 1
    61e6:	88 23       	and	r24, r24
    61e8:	e1 f7       	brne	.-8      	; 0x61e2 <dtoa_prf+0x1d0>
    61ea:	c5 0e       	add	r12, r21
    61ec:	d1 1c       	adc	r13, r1
    61ee:	50 e0       	ldi	r21, 0x00	; 0
    61f0:	b6 0e       	add	r11, r22
    61f2:	4a 81       	ldd	r20, Y+2	; 0x02
    61f4:	20 e1       	ldi	r18, 0x10	; 16
    61f6:	62 2e       	mov	r6, r18
    61f8:	71 2c       	mov	r7, r1
    61fa:	6a 22       	and	r6, r26
    61fc:	7b 22       	and	r7, r27
    61fe:	a4 ff       	sbrs	r26, 4
    6200:	03 c0       	rjmp	.+6      	; 0x6208 <dtoa_prf+0x1f6>
    6202:	41 33       	cpi	r20, 0x31	; 49
    6204:	09 f4       	brne	.+2      	; 0x6208 <dtoa_prf+0x1f6>
    6206:	ba 94       	dec	r11
    6208:	1b 14       	cp	r1, r11
    620a:	2c f4       	brge	.+10     	; 0x6216 <dtoa_prf+0x204>
    620c:	8b 2d       	mov	r24, r11
    620e:	89 30       	cpi	r24, 0x09	; 9
    6210:	18 f0       	brcs	.+6      	; 0x6218 <dtoa_prf+0x206>
    6212:	88 e0       	ldi	r24, 0x08	; 8
    6214:	01 c0       	rjmp	.+2      	; 0x6218 <dtoa_prf+0x206>
    6216:	81 e0       	ldi	r24, 0x01	; 1
    6218:	9b 01       	movw	r18, r22
    621a:	77 ff       	sbrs	r23, 7
    621c:	02 c0       	rjmp	.+4      	; 0x6222 <dtoa_prf+0x210>
    621e:	20 e0       	ldi	r18, 0x00	; 0
    6220:	30 e0       	ldi	r19, 0x00	; 0
    6222:	a0 e0       	ldi	r26, 0x00	; 0
    6224:	b0 e0       	ldi	r27, 0x00	; 0
    6226:	9e e2       	ldi	r25, 0x2E	; 46
    6228:	e9 2e       	mov	r14, r25
    622a:	4b 01       	movw	r8, r22
    622c:	88 1a       	sub	r8, r24
    622e:	91 08       	sbc	r9, r1
    6230:	cb 01       	movw	r24, r22
    6232:	82 1b       	sub	r24, r18
    6234:	93 0b       	sbc	r25, r19
    6236:	8e 01       	movw	r16, r28
    6238:	0f 5f       	subi	r16, 0xFF	; 255
    623a:	1f 4f       	sbci	r17, 0xFF	; 255
    623c:	08 0f       	add	r16, r24
    623e:	19 1f       	adc	r17, r25
    6240:	8f 2d       	mov	r24, r15
    6242:	90 e0       	ldi	r25, 0x00	; 0
    6244:	aa 24       	eor	r10, r10
    6246:	bb 24       	eor	r11, r11
    6248:	a8 1a       	sub	r10, r24
    624a:	b9 0a       	sbc	r11, r25
    624c:	ff ef       	ldi	r31, 0xFF	; 255
    624e:	2f 3f       	cpi	r18, 0xFF	; 255
    6250:	3f 07       	cpc	r19, r31
    6252:	19 f4       	brne	.+6      	; 0x625a <dtoa_prf+0x248>
    6254:	f6 01       	movw	r30, r12
    6256:	e1 92       	st	Z+, r14
    6258:	6f 01       	movw	r12, r30
    625a:	62 17       	cp	r22, r18
    625c:	73 07       	cpc	r23, r19
    625e:	44 f0       	brlt	.+16     	; 0x6270 <dtoa_prf+0x25e>
    6260:	82 16       	cp	r8, r18
    6262:	93 06       	cpc	r9, r19
    6264:	2c f4       	brge	.+10     	; 0x6270 <dtoa_prf+0x25e>
    6266:	f8 01       	movw	r30, r16
    6268:	ea 0f       	add	r30, r26
    626a:	fb 1f       	adc	r31, r27
    626c:	81 81       	ldd	r24, Z+1	; 0x01
    626e:	01 c0       	rjmp	.+2      	; 0x6272 <dtoa_prf+0x260>
    6270:	80 e3       	ldi	r24, 0x30	; 48
    6272:	21 50       	subi	r18, 0x01	; 1
    6274:	30 40       	sbci	r19, 0x00	; 0
    6276:	11 96       	adiw	r26, 0x01	; 1
    6278:	2a 15       	cp	r18, r10
    627a:	3b 05       	cpc	r19, r11
    627c:	24 f0       	brlt	.+8      	; 0x6286 <dtoa_prf+0x274>
    627e:	f6 01       	movw	r30, r12
    6280:	81 93       	st	Z+, r24
    6282:	6f 01       	movw	r12, r30
    6284:	e3 cf       	rjmp	.-58     	; 0x624c <dtoa_prf+0x23a>
    6286:	26 17       	cp	r18, r22
    6288:	37 07       	cpc	r19, r23
    628a:	41 f4       	brne	.+16     	; 0x629c <dtoa_prf+0x28a>
    628c:	46 33       	cpi	r20, 0x36	; 54
    628e:	28 f4       	brcc	.+10     	; 0x629a <dtoa_prf+0x288>
    6290:	45 33       	cpi	r20, 0x35	; 53
    6292:	21 f4       	brne	.+8      	; 0x629c <dtoa_prf+0x28a>
    6294:	61 14       	cp	r6, r1
    6296:	71 04       	cpc	r7, r1
    6298:	09 f4       	brne	.+2      	; 0x629c <dtoa_prf+0x28a>
    629a:	81 e3       	ldi	r24, 0x31	; 49
    629c:	f6 01       	movw	r30, r12
    629e:	81 93       	st	Z+, r24
    62a0:	85 2f       	mov	r24, r21
    62a2:	df 01       	movw	r26, r30
    62a4:	90 e2       	ldi	r25, 0x20	; 32
    62a6:	02 c0       	rjmp	.+4      	; 0x62ac <dtoa_prf+0x29a>
    62a8:	9d 93       	st	X+, r25
    62aa:	81 50       	subi	r24, 0x01	; 1
    62ac:	88 23       	and	r24, r24
    62ae:	e1 f7       	brne	.-8      	; 0x62a8 <dtoa_prf+0x296>
    62b0:	e5 0f       	add	r30, r21
    62b2:	f1 1d       	adc	r31, r1
    62b4:	10 82       	st	Z, r1
    62b6:	80 e0       	ldi	r24, 0x00	; 0
    62b8:	90 e0       	ldi	r25, 0x00	; 0
    62ba:	29 96       	adiw	r28, 0x09	; 9
    62bc:	ee e0       	ldi	r30, 0x0E	; 14
    62be:	0c 94 0c 33 	jmp	0x6618	; 0x6618 <__epilogue_restores__+0x8>

000062c2 <__ftoa_engine>:
    62c2:	28 30       	cpi	r18, 0x08	; 8
    62c4:	08 f0       	brcs	.+2      	; 0x62c8 <__ftoa_engine+0x6>
    62c6:	27 e0       	ldi	r18, 0x07	; 7
    62c8:	33 27       	eor	r19, r19
    62ca:	da 01       	movw	r26, r20
    62cc:	99 0f       	add	r25, r25
    62ce:	31 1d       	adc	r19, r1
    62d0:	87 fd       	sbrc	r24, 7
    62d2:	91 60       	ori	r25, 0x01	; 1
    62d4:	00 96       	adiw	r24, 0x00	; 0
    62d6:	61 05       	cpc	r22, r1
    62d8:	71 05       	cpc	r23, r1
    62da:	39 f4       	brne	.+14     	; 0x62ea <__ftoa_engine+0x28>
    62dc:	32 60       	ori	r19, 0x02	; 2
    62de:	2e 5f       	subi	r18, 0xFE	; 254
    62e0:	3d 93       	st	X+, r19
    62e2:	30 e3       	ldi	r19, 0x30	; 48
    62e4:	2a 95       	dec	r18
    62e6:	e1 f7       	brne	.-8      	; 0x62e0 <__ftoa_engine+0x1e>
    62e8:	08 95       	ret
    62ea:	9f 3f       	cpi	r25, 0xFF	; 255
    62ec:	30 f0       	brcs	.+12     	; 0x62fa <__ftoa_engine+0x38>
    62ee:	80 38       	cpi	r24, 0x80	; 128
    62f0:	71 05       	cpc	r23, r1
    62f2:	61 05       	cpc	r22, r1
    62f4:	09 f0       	breq	.+2      	; 0x62f8 <__ftoa_engine+0x36>
    62f6:	3c 5f       	subi	r19, 0xFC	; 252
    62f8:	3c 5f       	subi	r19, 0xFC	; 252
    62fa:	3d 93       	st	X+, r19
    62fc:	91 30       	cpi	r25, 0x01	; 1
    62fe:	08 f0       	brcs	.+2      	; 0x6302 <__ftoa_engine+0x40>
    6300:	80 68       	ori	r24, 0x80	; 128
    6302:	91 1d       	adc	r25, r1
    6304:	df 93       	push	r29
    6306:	cf 93       	push	r28
    6308:	1f 93       	push	r17
    630a:	0f 93       	push	r16
    630c:	ff 92       	push	r15
    630e:	ef 92       	push	r14
    6310:	19 2f       	mov	r17, r25
    6312:	98 7f       	andi	r25, 0xF8	; 248
    6314:	96 95       	lsr	r25
    6316:	e9 2f       	mov	r30, r25
    6318:	96 95       	lsr	r25
    631a:	96 95       	lsr	r25
    631c:	e9 0f       	add	r30, r25
    631e:	ff 27       	eor	r31, r31
    6320:	e6 59       	subi	r30, 0x96	; 150
    6322:	fd 4f       	sbci	r31, 0xFD	; 253
    6324:	99 27       	eor	r25, r25
    6326:	33 27       	eor	r19, r19
    6328:	ee 24       	eor	r14, r14
    632a:	ff 24       	eor	r15, r15
    632c:	a7 01       	movw	r20, r14
    632e:	e7 01       	movw	r28, r14
    6330:	05 90       	lpm	r0, Z+
    6332:	08 94       	sec
    6334:	07 94       	ror	r0
    6336:	28 f4       	brcc	.+10     	; 0x6342 <__ftoa_engine+0x80>
    6338:	36 0f       	add	r19, r22
    633a:	e7 1e       	adc	r14, r23
    633c:	f8 1e       	adc	r15, r24
    633e:	49 1f       	adc	r20, r25
    6340:	51 1d       	adc	r21, r1
    6342:	66 0f       	add	r22, r22
    6344:	77 1f       	adc	r23, r23
    6346:	88 1f       	adc	r24, r24
    6348:	99 1f       	adc	r25, r25
    634a:	06 94       	lsr	r0
    634c:	a1 f7       	brne	.-24     	; 0x6336 <__ftoa_engine+0x74>
    634e:	05 90       	lpm	r0, Z+
    6350:	07 94       	ror	r0
    6352:	28 f4       	brcc	.+10     	; 0x635e <__ftoa_engine+0x9c>
    6354:	e7 0e       	add	r14, r23
    6356:	f8 1e       	adc	r15, r24
    6358:	49 1f       	adc	r20, r25
    635a:	56 1f       	adc	r21, r22
    635c:	c1 1d       	adc	r28, r1
    635e:	77 0f       	add	r23, r23
    6360:	88 1f       	adc	r24, r24
    6362:	99 1f       	adc	r25, r25
    6364:	66 1f       	adc	r22, r22
    6366:	06 94       	lsr	r0
    6368:	a1 f7       	brne	.-24     	; 0x6352 <__ftoa_engine+0x90>
    636a:	05 90       	lpm	r0, Z+
    636c:	07 94       	ror	r0
    636e:	28 f4       	brcc	.+10     	; 0x637a <__ftoa_engine+0xb8>
    6370:	f8 0e       	add	r15, r24
    6372:	49 1f       	adc	r20, r25
    6374:	56 1f       	adc	r21, r22
    6376:	c7 1f       	adc	r28, r23
    6378:	d1 1d       	adc	r29, r1
    637a:	88 0f       	add	r24, r24
    637c:	99 1f       	adc	r25, r25
    637e:	66 1f       	adc	r22, r22
    6380:	77 1f       	adc	r23, r23
    6382:	06 94       	lsr	r0
    6384:	a1 f7       	brne	.-24     	; 0x636e <__ftoa_engine+0xac>
    6386:	05 90       	lpm	r0, Z+
    6388:	07 94       	ror	r0
    638a:	20 f4       	brcc	.+8      	; 0x6394 <__ftoa_engine+0xd2>
    638c:	49 0f       	add	r20, r25
    638e:	56 1f       	adc	r21, r22
    6390:	c7 1f       	adc	r28, r23
    6392:	d8 1f       	adc	r29, r24
    6394:	99 0f       	add	r25, r25
    6396:	66 1f       	adc	r22, r22
    6398:	77 1f       	adc	r23, r23
    639a:	88 1f       	adc	r24, r24
    639c:	06 94       	lsr	r0
    639e:	a9 f7       	brne	.-22     	; 0x638a <__ftoa_engine+0xc8>
    63a0:	84 91       	lpm	r24, Z
    63a2:	10 95       	com	r17
    63a4:	17 70       	andi	r17, 0x07	; 7
    63a6:	41 f0       	breq	.+16     	; 0x63b8 <__ftoa_engine+0xf6>
    63a8:	d6 95       	lsr	r29
    63aa:	c7 95       	ror	r28
    63ac:	57 95       	ror	r21
    63ae:	47 95       	ror	r20
    63b0:	f7 94       	ror	r15
    63b2:	e7 94       	ror	r14
    63b4:	1a 95       	dec	r17
    63b6:	c1 f7       	brne	.-16     	; 0x63a8 <__ftoa_engine+0xe6>
    63b8:	e0 e1       	ldi	r30, 0x10	; 16
    63ba:	f2 e0       	ldi	r31, 0x02	; 2
    63bc:	68 94       	set
    63be:	15 90       	lpm	r1, Z+
    63c0:	15 91       	lpm	r17, Z+
    63c2:	35 91       	lpm	r19, Z+
    63c4:	65 91       	lpm	r22, Z+
    63c6:	95 91       	lpm	r25, Z+
    63c8:	05 90       	lpm	r0, Z+
    63ca:	7f e2       	ldi	r23, 0x2F	; 47
    63cc:	73 95       	inc	r23
    63ce:	e1 18       	sub	r14, r1
    63d0:	f1 0a       	sbc	r15, r17
    63d2:	43 0b       	sbc	r20, r19
    63d4:	56 0b       	sbc	r21, r22
    63d6:	c9 0b       	sbc	r28, r25
    63d8:	d0 09       	sbc	r29, r0
    63da:	c0 f7       	brcc	.-16     	; 0x63cc <__ftoa_engine+0x10a>
    63dc:	e1 0c       	add	r14, r1
    63de:	f1 1e       	adc	r15, r17
    63e0:	43 1f       	adc	r20, r19
    63e2:	56 1f       	adc	r21, r22
    63e4:	c9 1f       	adc	r28, r25
    63e6:	d0 1d       	adc	r29, r0
    63e8:	7e f4       	brtc	.+30     	; 0x6408 <__ftoa_engine+0x146>
    63ea:	70 33       	cpi	r23, 0x30	; 48
    63ec:	11 f4       	brne	.+4      	; 0x63f2 <__ftoa_engine+0x130>
    63ee:	8a 95       	dec	r24
    63f0:	e6 cf       	rjmp	.-52     	; 0x63be <__ftoa_engine+0xfc>
    63f2:	e8 94       	clt
    63f4:	01 50       	subi	r16, 0x01	; 1
    63f6:	30 f0       	brcs	.+12     	; 0x6404 <__ftoa_engine+0x142>
    63f8:	08 0f       	add	r16, r24
    63fa:	0a f4       	brpl	.+2      	; 0x63fe <__ftoa_engine+0x13c>
    63fc:	00 27       	eor	r16, r16
    63fe:	02 17       	cp	r16, r18
    6400:	08 f4       	brcc	.+2      	; 0x6404 <__ftoa_engine+0x142>
    6402:	20 2f       	mov	r18, r16
    6404:	23 95       	inc	r18
    6406:	02 2f       	mov	r16, r18
    6408:	7a 33       	cpi	r23, 0x3A	; 58
    640a:	28 f0       	brcs	.+10     	; 0x6416 <__ftoa_engine+0x154>
    640c:	79 e3       	ldi	r23, 0x39	; 57
    640e:	7d 93       	st	X+, r23
    6410:	2a 95       	dec	r18
    6412:	e9 f7       	brne	.-6      	; 0x640e <__ftoa_engine+0x14c>
    6414:	10 c0       	rjmp	.+32     	; 0x6436 <__ftoa_engine+0x174>
    6416:	7d 93       	st	X+, r23
    6418:	2a 95       	dec	r18
    641a:	89 f6       	brne	.-94     	; 0x63be <__ftoa_engine+0xfc>
    641c:	06 94       	lsr	r0
    641e:	97 95       	ror	r25
    6420:	67 95       	ror	r22
    6422:	37 95       	ror	r19
    6424:	17 95       	ror	r17
    6426:	17 94       	ror	r1
    6428:	e1 18       	sub	r14, r1
    642a:	f1 0a       	sbc	r15, r17
    642c:	43 0b       	sbc	r20, r19
    642e:	56 0b       	sbc	r21, r22
    6430:	c9 0b       	sbc	r28, r25
    6432:	d0 09       	sbc	r29, r0
    6434:	98 f0       	brcs	.+38     	; 0x645c <__ftoa_engine+0x19a>
    6436:	23 95       	inc	r18
    6438:	7e 91       	ld	r23, -X
    643a:	73 95       	inc	r23
    643c:	7a 33       	cpi	r23, 0x3A	; 58
    643e:	08 f0       	brcs	.+2      	; 0x6442 <__ftoa_engine+0x180>
    6440:	70 e3       	ldi	r23, 0x30	; 48
    6442:	7c 93       	st	X, r23
    6444:	20 13       	cpse	r18, r16
    6446:	b8 f7       	brcc	.-18     	; 0x6436 <__ftoa_engine+0x174>
    6448:	7e 91       	ld	r23, -X
    644a:	70 61       	ori	r23, 0x10	; 16
    644c:	7d 93       	st	X+, r23
    644e:	30 f0       	brcs	.+12     	; 0x645c <__ftoa_engine+0x19a>
    6450:	83 95       	inc	r24
    6452:	71 e3       	ldi	r23, 0x31	; 49
    6454:	7d 93       	st	X+, r23
    6456:	70 e3       	ldi	r23, 0x30	; 48
    6458:	2a 95       	dec	r18
    645a:	e1 f7       	brne	.-8      	; 0x6454 <__ftoa_engine+0x192>
    645c:	11 24       	eor	r1, r1
    645e:	ef 90       	pop	r14
    6460:	ff 90       	pop	r15
    6462:	0f 91       	pop	r16
    6464:	1f 91       	pop	r17
    6466:	cf 91       	pop	r28
    6468:	df 91       	pop	r29
    646a:	99 27       	eor	r25, r25
    646c:	87 fd       	sbrc	r24, 7
    646e:	90 95       	com	r25
    6470:	08 95       	ret

00006472 <__ctype_isfalse>:
    6472:	99 27       	eor	r25, r25
    6474:	88 27       	eor	r24, r24

00006476 <__ctype_istrue>:
    6476:	08 95       	ret

00006478 <strnlen_P>:
    6478:	fc 01       	movw	r30, r24
    647a:	05 90       	lpm	r0, Z+
    647c:	61 50       	subi	r22, 0x01	; 1
    647e:	70 40       	sbci	r23, 0x00	; 0
    6480:	01 10       	cpse	r0, r1
    6482:	d8 f7       	brcc	.-10     	; 0x647a <strnlen_P+0x2>
    6484:	80 95       	com	r24
    6486:	90 95       	com	r25
    6488:	8e 0f       	add	r24, r30
    648a:	9f 1f       	adc	r25, r31
    648c:	08 95       	ret

0000648e <strnlen>:
    648e:	fc 01       	movw	r30, r24
    6490:	61 50       	subi	r22, 0x01	; 1
    6492:	70 40       	sbci	r23, 0x00	; 0
    6494:	01 90       	ld	r0, Z+
    6496:	01 10       	cpse	r0, r1
    6498:	d8 f7       	brcc	.-10     	; 0x6490 <strnlen+0x2>
    649a:	80 95       	com	r24
    649c:	90 95       	com	r25
    649e:	8e 0f       	add	r24, r30
    64a0:	9f 1f       	adc	r25, r31
    64a2:	08 95       	ret

000064a4 <strrev>:
    64a4:	dc 01       	movw	r26, r24
    64a6:	fc 01       	movw	r30, r24
    64a8:	67 2f       	mov	r22, r23
    64aa:	71 91       	ld	r23, Z+
    64ac:	77 23       	and	r23, r23
    64ae:	e1 f7       	brne	.-8      	; 0x64a8 <strrev+0x4>
    64b0:	32 97       	sbiw	r30, 0x02	; 2
    64b2:	04 c0       	rjmp	.+8      	; 0x64bc <strrev+0x18>
    64b4:	7c 91       	ld	r23, X
    64b6:	6d 93       	st	X+, r22
    64b8:	70 83       	st	Z, r23
    64ba:	62 91       	ld	r22, -Z
    64bc:	ae 17       	cp	r26, r30
    64be:	bf 07       	cpc	r27, r31
    64c0:	c8 f3       	brcs	.-14     	; 0x64b4 <strrev+0x10>
    64c2:	08 95       	ret

000064c4 <fputc>:
    64c4:	0f 93       	push	r16
    64c6:	1f 93       	push	r17
    64c8:	cf 93       	push	r28
    64ca:	df 93       	push	r29
    64cc:	8c 01       	movw	r16, r24
    64ce:	eb 01       	movw	r28, r22
    64d0:	8b 81       	ldd	r24, Y+3	; 0x03
    64d2:	81 ff       	sbrs	r24, 1
    64d4:	1b c0       	rjmp	.+54     	; 0x650c <fputc+0x48>
    64d6:	82 ff       	sbrs	r24, 2
    64d8:	0d c0       	rjmp	.+26     	; 0x64f4 <fputc+0x30>
    64da:	2e 81       	ldd	r18, Y+6	; 0x06
    64dc:	3f 81       	ldd	r19, Y+7	; 0x07
    64de:	8c 81       	ldd	r24, Y+4	; 0x04
    64e0:	9d 81       	ldd	r25, Y+5	; 0x05
    64e2:	28 17       	cp	r18, r24
    64e4:	39 07       	cpc	r19, r25
    64e6:	64 f4       	brge	.+24     	; 0x6500 <fputc+0x3c>
    64e8:	e8 81       	ld	r30, Y
    64ea:	f9 81       	ldd	r31, Y+1	; 0x01
    64ec:	01 93       	st	Z+, r16
    64ee:	f9 83       	std	Y+1, r31	; 0x01
    64f0:	e8 83       	st	Y, r30
    64f2:	06 c0       	rjmp	.+12     	; 0x6500 <fputc+0x3c>
    64f4:	e8 85       	ldd	r30, Y+8	; 0x08
    64f6:	f9 85       	ldd	r31, Y+9	; 0x09
    64f8:	80 2f       	mov	r24, r16
    64fa:	09 95       	icall
    64fc:	00 97       	sbiw	r24, 0x00	; 0
    64fe:	31 f4       	brne	.+12     	; 0x650c <fputc+0x48>
    6500:	8e 81       	ldd	r24, Y+6	; 0x06
    6502:	9f 81       	ldd	r25, Y+7	; 0x07
    6504:	01 96       	adiw	r24, 0x01	; 1
    6506:	9f 83       	std	Y+7, r25	; 0x07
    6508:	8e 83       	std	Y+6, r24	; 0x06
    650a:	02 c0       	rjmp	.+4      	; 0x6510 <fputc+0x4c>
    650c:	0f ef       	ldi	r16, 0xFF	; 255
    650e:	1f ef       	ldi	r17, 0xFF	; 255
    6510:	c8 01       	movw	r24, r16
    6512:	df 91       	pop	r29
    6514:	cf 91       	pop	r28
    6516:	1f 91       	pop	r17
    6518:	0f 91       	pop	r16
    651a:	08 95       	ret

0000651c <__ultoa_invert>:
    651c:	fa 01       	movw	r30, r20
    651e:	aa 27       	eor	r26, r26
    6520:	28 30       	cpi	r18, 0x08	; 8
    6522:	51 f1       	breq	.+84     	; 0x6578 <__ultoa_invert+0x5c>
    6524:	20 31       	cpi	r18, 0x10	; 16
    6526:	81 f1       	breq	.+96     	; 0x6588 <__ultoa_invert+0x6c>
    6528:	e8 94       	clt
    652a:	6f 93       	push	r22
    652c:	6e 7f       	andi	r22, 0xFE	; 254
    652e:	6e 5f       	subi	r22, 0xFE	; 254
    6530:	7f 4f       	sbci	r23, 0xFF	; 255
    6532:	8f 4f       	sbci	r24, 0xFF	; 255
    6534:	9f 4f       	sbci	r25, 0xFF	; 255
    6536:	af 4f       	sbci	r26, 0xFF	; 255
    6538:	b1 e0       	ldi	r27, 0x01	; 1
    653a:	3e d0       	rcall	.+124    	; 0x65b8 <__ultoa_invert+0x9c>
    653c:	b4 e0       	ldi	r27, 0x04	; 4
    653e:	3c d0       	rcall	.+120    	; 0x65b8 <__ultoa_invert+0x9c>
    6540:	67 0f       	add	r22, r23
    6542:	78 1f       	adc	r23, r24
    6544:	89 1f       	adc	r24, r25
    6546:	9a 1f       	adc	r25, r26
    6548:	a1 1d       	adc	r26, r1
    654a:	68 0f       	add	r22, r24
    654c:	79 1f       	adc	r23, r25
    654e:	8a 1f       	adc	r24, r26
    6550:	91 1d       	adc	r25, r1
    6552:	a1 1d       	adc	r26, r1
    6554:	6a 0f       	add	r22, r26
    6556:	71 1d       	adc	r23, r1
    6558:	81 1d       	adc	r24, r1
    655a:	91 1d       	adc	r25, r1
    655c:	a1 1d       	adc	r26, r1
    655e:	20 d0       	rcall	.+64     	; 0x65a0 <__ultoa_invert+0x84>
    6560:	09 f4       	brne	.+2      	; 0x6564 <__ultoa_invert+0x48>
    6562:	68 94       	set
    6564:	3f 91       	pop	r19
    6566:	2a e0       	ldi	r18, 0x0A	; 10
    6568:	26 9f       	mul	r18, r22
    656a:	11 24       	eor	r1, r1
    656c:	30 19       	sub	r19, r0
    656e:	30 5d       	subi	r19, 0xD0	; 208
    6570:	31 93       	st	Z+, r19
    6572:	de f6       	brtc	.-74     	; 0x652a <__ultoa_invert+0xe>
    6574:	cf 01       	movw	r24, r30
    6576:	08 95       	ret
    6578:	46 2f       	mov	r20, r22
    657a:	47 70       	andi	r20, 0x07	; 7
    657c:	40 5d       	subi	r20, 0xD0	; 208
    657e:	41 93       	st	Z+, r20
    6580:	b3 e0       	ldi	r27, 0x03	; 3
    6582:	0f d0       	rcall	.+30     	; 0x65a2 <__ultoa_invert+0x86>
    6584:	c9 f7       	brne	.-14     	; 0x6578 <__ultoa_invert+0x5c>
    6586:	f6 cf       	rjmp	.-20     	; 0x6574 <__ultoa_invert+0x58>
    6588:	46 2f       	mov	r20, r22
    658a:	4f 70       	andi	r20, 0x0F	; 15
    658c:	40 5d       	subi	r20, 0xD0	; 208
    658e:	4a 33       	cpi	r20, 0x3A	; 58
    6590:	18 f0       	brcs	.+6      	; 0x6598 <__ultoa_invert+0x7c>
    6592:	49 5d       	subi	r20, 0xD9	; 217
    6594:	31 fd       	sbrc	r19, 1
    6596:	40 52       	subi	r20, 0x20	; 32
    6598:	41 93       	st	Z+, r20
    659a:	02 d0       	rcall	.+4      	; 0x65a0 <__ultoa_invert+0x84>
    659c:	a9 f7       	brne	.-22     	; 0x6588 <__ultoa_invert+0x6c>
    659e:	ea cf       	rjmp	.-44     	; 0x6574 <__ultoa_invert+0x58>
    65a0:	b4 e0       	ldi	r27, 0x04	; 4
    65a2:	a6 95       	lsr	r26
    65a4:	97 95       	ror	r25
    65a6:	87 95       	ror	r24
    65a8:	77 95       	ror	r23
    65aa:	67 95       	ror	r22
    65ac:	ba 95       	dec	r27
    65ae:	c9 f7       	brne	.-14     	; 0x65a2 <__ultoa_invert+0x86>
    65b0:	00 97       	sbiw	r24, 0x00	; 0
    65b2:	61 05       	cpc	r22, r1
    65b4:	71 05       	cpc	r23, r1
    65b6:	08 95       	ret
    65b8:	9b 01       	movw	r18, r22
    65ba:	ac 01       	movw	r20, r24
    65bc:	0a 2e       	mov	r0, r26
    65be:	06 94       	lsr	r0
    65c0:	57 95       	ror	r21
    65c2:	47 95       	ror	r20
    65c4:	37 95       	ror	r19
    65c6:	27 95       	ror	r18
    65c8:	ba 95       	dec	r27
    65ca:	c9 f7       	brne	.-14     	; 0x65be <__ultoa_invert+0xa2>
    65cc:	62 0f       	add	r22, r18
    65ce:	73 1f       	adc	r23, r19
    65d0:	84 1f       	adc	r24, r20
    65d2:	95 1f       	adc	r25, r21
    65d4:	a0 1d       	adc	r26, r0
    65d6:	08 95       	ret

000065d8 <__prologue_saves__>:
    65d8:	2f 92       	push	r2
    65da:	3f 92       	push	r3
    65dc:	4f 92       	push	r4
    65de:	5f 92       	push	r5
    65e0:	6f 92       	push	r6
    65e2:	7f 92       	push	r7
    65e4:	8f 92       	push	r8
    65e6:	9f 92       	push	r9
    65e8:	af 92       	push	r10
    65ea:	bf 92       	push	r11
    65ec:	cf 92       	push	r12
    65ee:	df 92       	push	r13
    65f0:	ef 92       	push	r14
    65f2:	ff 92       	push	r15
    65f4:	0f 93       	push	r16
    65f6:	1f 93       	push	r17
    65f8:	cf 93       	push	r28
    65fa:	df 93       	push	r29
    65fc:	cd b7       	in	r28, 0x3d	; 61
    65fe:	de b7       	in	r29, 0x3e	; 62
    6600:	ca 1b       	sub	r28, r26
    6602:	db 0b       	sbc	r29, r27
    6604:	0f b6       	in	r0, 0x3f	; 63
    6606:	f8 94       	cli
    6608:	de bf       	out	0x3e, r29	; 62
    660a:	0f be       	out	0x3f, r0	; 63
    660c:	cd bf       	out	0x3d, r28	; 61
    660e:	09 94       	ijmp

00006610 <__epilogue_restores__>:
    6610:	2a 88       	ldd	r2, Y+18	; 0x12
    6612:	39 88       	ldd	r3, Y+17	; 0x11
    6614:	48 88       	ldd	r4, Y+16	; 0x10
    6616:	5f 84       	ldd	r5, Y+15	; 0x0f
    6618:	6e 84       	ldd	r6, Y+14	; 0x0e
    661a:	7d 84       	ldd	r7, Y+13	; 0x0d
    661c:	8c 84       	ldd	r8, Y+12	; 0x0c
    661e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6620:	aa 84       	ldd	r10, Y+10	; 0x0a
    6622:	b9 84       	ldd	r11, Y+9	; 0x09
    6624:	c8 84       	ldd	r12, Y+8	; 0x08
    6626:	df 80       	ldd	r13, Y+7	; 0x07
    6628:	ee 80       	ldd	r14, Y+6	; 0x06
    662a:	fd 80       	ldd	r15, Y+5	; 0x05
    662c:	0c 81       	ldd	r16, Y+4	; 0x04
    662e:	1b 81       	ldd	r17, Y+3	; 0x03
    6630:	aa 81       	ldd	r26, Y+2	; 0x02
    6632:	b9 81       	ldd	r27, Y+1	; 0x01
    6634:	ce 0f       	add	r28, r30
    6636:	d1 1d       	adc	r29, r1
    6638:	0f b6       	in	r0, 0x3f	; 63
    663a:	f8 94       	cli
    663c:	de bf       	out	0x3e, r29	; 62
    663e:	0f be       	out	0x3f, r0	; 63
    6640:	cd bf       	out	0x3d, r28	; 61
    6642:	ed 01       	movw	r28, r26
    6644:	08 95       	ret

00006646 <__do_global_dtors>:
    6646:	13 e0       	ldi	r17, 0x03	; 3
    6648:	c0 e1       	ldi	r28, 0x10	; 16
    664a:	d3 e0       	ldi	r29, 0x03	; 3
    664c:	04 c0       	rjmp	.+8      	; 0x6656 <__do_global_dtors+0x10>
    664e:	fe 01       	movw	r30, r28
    6650:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <__tablejump__>
    6654:	22 96       	adiw	r28, 0x02	; 2
    6656:	c4 31       	cpi	r28, 0x14	; 20
    6658:	d1 07       	cpc	r29, r17
    665a:	c9 f7       	brne	.-14     	; 0x664e <__do_global_dtors+0x8>
    665c:	f8 94       	cli

0000665e <__stop_program>:
    665e:	ff cf       	rjmp	.-2      	; 0x665e <__stop_program>
